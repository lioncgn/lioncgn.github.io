<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>flask cookie使用</title>
    <url>/2020/02/20/flask-cookie%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Flask-cookie使用"><a href="#Flask-cookie使用" class="headerlink" title="Flask cookie使用"></a><center>Flask cookie使用</center></h3><a id="more"></a>

<h3 id="1-设置和删除cookie"><a href="#1-设置和删除cookie" class="headerlink" title="1.设置和删除cookie"></a>1.设置和删除cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">"设置cookie"</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'username'</span>, <span class="string">'cgn'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'删除cookie'</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="2-设置cookie的过期时间"><a href="#2-设置cookie的过期时间" class="headerlink" title="2.设置cookie的过期时间"></a>2.设置cookie的过期时间</h3><ul>
<li>第一种方式使用<code>max_age</code> 参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_max_age')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set max age'</span>)</span><br><span class="line">    <span class="comment"># max_age使用's'为单位，默认值为None,表示随着浏览器关闭过期</span></span><br><span class="line">    ＃ 这时候表示过期时间是<span class="number">10</span>s后过期</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, max_age=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式使用<code>expires</code>参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_expires</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set expire '</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires) <span class="comment">#expires接收datetime对象</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>当同时使用<code>expires</code>, <code>max_age</code> 参数，那么将使用<code>max_age</code> 参数的值作为过期值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_age_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age_expire</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set age expire'</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires, max_age=<span class="number">30</span>) <span class="comment">#过期时间为30s</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="3-在子域名中如何获取cookie"><a href="#3-在子域名中如何获取cookie" class="headerlink" title="3. 在子域名中如何获取cookie"></a>3. 在子域名中如何获取cookie</h3><ul>
<li>第一步:在开发过程中可以通过设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">"SERVER_NAME"</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"><span class="comment"># 在/etc/hosts 文件中添加映射</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> test.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> bp.test.com</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步: 通过蓝图设置子域名访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, request</span><br><span class="line"></span><br><span class="line">sub_bp = Blueprint(<span class="string">'submin'</span>, __name__, subdomain=<span class="string">'bp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@sub_bp.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    get_key = request.cookies.get(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">return</span> get_key <span class="keyword">or</span> <span class="string">"Hello  none"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">'SERVER_NAME'</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(sub_bp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">    response = Response(<span class="string">"Hello world"</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'test'</span>, <span class="string">'cookie'</span>, domain=<span class="string">'.test.com'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>然后通过访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com:5000&#x2F;index  # 设置cookie</span><br><span class="line">http:&#x2F;&#x2F;bp.test.com:5000&#x2F;index # 在子域名中访问到cookie</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>python描述符</title>
    <url>/2020/02/20/python%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="再谈python中的descriptor"><a href="#再谈python中的descriptor" class="headerlink" title="再谈python中的descriptor"></a><center>再谈python中的descriptor</center></h2><a id="more"></a>

<h3 id="1-flask使用data-descriptor"><a href="#1-flask使用data-descriptor" class="headerlink" title="1. flask使用data descriptor"></a>1. flask使用data descriptor</h3><ul>
<li>查看flask内置session源码时，发现使用了实现<code>__get__</code> 和<code>__set__</code> 方法的类，于是查看了相关的资料，记录如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">     s = self.get_signing_serializer(app)</span><br><span class="line">     <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">     val = request.cookies.get(app.session_cookie_name) <span class="comment"># 获取session_cookie_name这个属性</span></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br><span class="line">     max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         data = s.loads(val, max_age=max_age)</span><br><span class="line">         <span class="keyword">return</span> self.session_class(data)</span><br><span class="line">     <span class="keyword">except</span> BadSignature:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)　＃Flask类中的属性</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:　　＃ 通过类访问 ConfigAttribute的对象</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]  ＃将调用app.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value <span class="comment">#将调用app.config[self.__name__] = value</span></span><br></pre></td></tr></table></figure>

<h3 id="2-分析使用-get-与-set"><a href="#2-分析使用-get-与-set" class="headerlink" title="2.分析使用__get__ 与__set__"></a>2.分析使用<code>__get__</code> 与<code>__set__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">TestDescriptor</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'get'</span>, self, obj, type)</span><br><span class="line">   ...:         <span class="keyword">return</span> obj</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'set'</span>, self, obj,  val)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'delete'</span>, self, obj)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = TestDescriptor()</span><br><span class="line">   ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: t.d  <span class="comment"># 通过实例对象访问属性</span></span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[4]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Test.d　＃通过类访问属性</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [7]:</span> t.d = <span class="string">'hello'</span>　　＃通过实例对象设置属性 调用d.__set__</span><br><span class="line">(<span class="string">'set'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: t.d　＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[8]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: Test.d ＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [10]:</span> Test.d = <span class="string">'hello'</span>  <span class="comment">#直接赋值，不会调用d.__set__ </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: t.d　　　＃　可以获得值</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d　＃　可以获得值</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="3-仅仅使用-get"><a href="#3-仅仅使用-get" class="headerlink" title="3. 仅仅使用__get__"></a>3. 仅仅使用<code>__get__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">DataDesc</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         <span class="keyword">return</span> (self, obj, type)</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">5</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = DataDesc()</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">6</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: t.d <span class="comment">#调用__get__</span></span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">(&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;,</span><br><span class="line"> &lt;__main__.Test at <span class="number">0x7f55399f62d0</span>&gt;,</span><br><span class="line"> __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: Test.d  ＃调用__get__</span><br><span class="line">Out[<span class="number">8</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">n [<span class="number">9</span>]: t.d = <span class="string">'hello'</span> </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: t.d </span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: Test.d</span><br><span class="line">Out[<span class="number">11</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d = <span class="string">'world'</span>  </span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: t.d</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: Test.d</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'world'</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过obj.attr 属性查找策略(优先级)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. attr是自动产生的属性（最高) 如：__class__，__str__</span><br><span class="line">2. 查找obj.__class__.__dict__ 也就是对象obj所在类中存在data descriptor对象(实现了&#96;__get__&#96; 和&#96;__set__&#96;方法),找到就返回&#96;__get__&#96;的执行结果，没有找到就到父类或者祖先类中查找是否有data descirptor,</span><br><span class="line">（实际上就是查找这个类属性是不是data descriptor对象或者父类中是否存在这个对象，如果是就执行__get__方法）</span><br><span class="line">3. 就到obj.__dict__中查找，找到就返回，找不到就进入下一步;</span><br><span class="line">（实际上就是先查找当前类或者父类中有无此属性)</span><br><span class="line">４．在obj.__class__.__dict__中查找是否存在non-data descriptor(仅仅实现了&#96;__get__&#96;方法)，找到就返回&#96;__get__&#96; 的结果，如果找到一个普通属性，就直接返回；找不到就报AttributeError;</span><br></pre></td></tr></table></figure>

<p>通过obj.attr = value赋值策略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查找obj.__class__.__dict__中是否有data descriptor对象，有就调用`__set__` 方法，没有就去父类或者祖先类中查找是否有data descriptor,依然没有就进入下一步；</span><br><span class="line">２．直接在obj.__dict__中加入obj.__dict__[attr] = vlaue;</span><br></pre></td></tr></table></figure>

<p>执行顺序就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特殊类属性</span><br><span class="line">数据描述符</span><br><span class="line">实例属性</span><br><span class="line">非数据描述符</span><br><span class="line">__getattr__（如果定义了的话）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>flask session机制</title>
    <url>/2020/02/19/flask-session%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="flask-session机制"><a href="#flask-session机制" class="headerlink" title="flask session机制"></a><center>flask session机制</center></h2><a id="more"></a>

<h2 id="1-对于session处理从请求上下文执行push方法开始"><a href="#1-对于session处理从请求上下文执行push方法开始" class="headerlink" title="1. 对于session处理从请求上下文执行push方法开始"></a>1. 对于session处理从请求上下文执行push方法开始</h2><ul>
<li>首先执行ctx.push()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    session_interface = self.app.session_interface</span><br><span class="line">    ＃ 为请求上下文对象中的session对象赋值为　SecureCookieSession对象</span><br><span class="line">    self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:　＃只有当没有设置secret_key时执行它</span><br><span class="line">        <span class="comment"># 为self.session 赋值为　NullSession对象</span></span><br><span class="line">        self.session = session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来进入<code>class SecureCookieSessionInterface(SessionInterface):</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">      s = self.get_signing_serializer(app)</span><br><span class="line">      <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">      <span class="comment"># 从request.cookies中获取键'session'的值</span></span><br><span class="line">      val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()　＃第一次请求到来没有这个值，返回一个对象                         <span class="comment"># SecureCookieSession()</span></span><br><span class="line">      max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          data = s.loads(val, max_age=max_age)</span><br><span class="line">          <span class="keyword">return</span> self.session_class(data)　</span><br><span class="line">      <span class="keyword">except</span> BadSignature:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSession</span><span class="params">(CallbackDict, SessionMixin)</span>:</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">ctx = _request_ctx_stack.top</span><br><span class="line">  bp = ctx.request.blueprint</span><br><span class="line">  funcs = ctx._after_request_functions</span><br><span class="line">  <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">  <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">  <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">      response = handler(response)</span><br><span class="line">  <span class="comment"># 只要app.secret_key 被设置过，这里永远不会为False</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">      <span class="comment"># 最终执行这里的save_session </span></span><br><span class="line">      self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">  <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">      domain = self.get_cookie_domain(app)</span><br><span class="line">      path = self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># If the session is modified to be empty, remove the cookie.</span></span><br><span class="line">      <span class="comment"># If the session is empty, return without setting the cookie.</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> session: <span class="comment">#</span></span><br><span class="line">          <span class="keyword">if</span> session.modified:</span><br><span class="line">              response.delete_cookie(</span><br><span class="line">                  app.session_cookie_name, domain=domain, path=path</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Add a "Vary: Cookie" header if the session was accessed at all.</span></span><br><span class="line">      <span class="keyword">if</span> session.accessed:</span><br><span class="line">          response.vary.add(<span class="string">"Cookie"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.should_set_cookie(app, session):</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      httponly = self.get_cookie_httponly(app)</span><br><span class="line">      secure = self.get_cookie_secure(app)</span><br><span class="line">      samesite = self.get_cookie_samesite(app)</span><br><span class="line">      expires = self.get_expiration_time(app, session)</span><br><span class="line">      val = self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">      response.set_cookie(</span><br><span class="line">          app.session_cookie_name,</span><br><span class="line">          val,</span><br><span class="line">          expires=expires,</span><br><span class="line">          httponly=httponly,</span><br><span class="line">          domain=domain,</span><br><span class="line">          path=path,</span><br><span class="line">          secure=secure,</span><br><span class="line">          samesite=samesite,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="２-使用session-的方式"><a href="#２-使用session-的方式" class="headerlink" title="２. 使用session  的方式"></a>２. 使用<code>session</code>  的方式</h2><ul>
<li>如何设置session</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 设置session的键为'www', 值为'world </span></span><br><span class="line">    <span class="comment"># 操作session时候</span></span><br><span class="line">    <span class="comment"># 通过LocalProxy对象找到Local栈顶存储的请求上下文对象中的session属性</span></span><br><span class="line">    <span class="comment"># 执行__setitem__方法就是执行 SecureCookieSession对象的__setitem__方法</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    <span class="comment"># 默认为False,这时session的过期时间是当浏览器关闭时过期</span></span><br><span class="line">    <span class="comment"># 当设置为True时，这时session的过期时间为默认31天。</span></span><br><span class="line">    session.permanent = <span class="literal">True</span>  </span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)  <span class="comment"># 打印出设置的过期时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"set session"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如何更改session默认过期时间31天</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上面的基础上添加此配置</span></span><br><span class="line">app.config[<span class="string">'PERMANENT_SESSION_LIFETIME'</span>] = timedelta(hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取session的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/get')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    value = session.get(<span class="string">'www'</span>)  <span class="comment"># 获取session设置的键的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"get session %s"</span> % value</span><br></pre></td></tr></table></figure>

<ul>
<li>删除session中设置的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delte</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># session.pop('www') #删除session中'www'的键值对</span></span><br><span class="line">    <span class="comment"># del session['www']　# 删除session中 'www'的键值对</span></span><br><span class="line">    session.clear()　＃清空这个类似字典的容器</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"delete session</span></span><br></pre></td></tr></table></figure>

<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask中的session 实际上使用set_cookie 方法设置名字为session的cookie,他的值是将数据通过一定的算法得出的随机数,最终是存放在客户端中，因为如果想存储在其他位置，需要自定义session;同时session中的数据不能存放敏感数据，因为可以通过其他方法解析出来</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = <span class="string">'eyJfcGVybWFuZW50Ijp0cnVlLCJ3d3ciOnsiIGIiOiJkMjl5YkdRPSJ9fQ.Xk56XQ.SlMSH-1sIZQCixZRm5fC6uG3AVs'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: data, timestamp, secret = s.split(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: base64_decode(data)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'&#123;"_permanent":true,"www":&#123;" b":"d29ybGQ="&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-使用扩展-flask-session"><a href="#4-使用扩展-flask-session" class="headerlink" title="4.使用扩展　flask-session"></a>4.使用扩展　flask-session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">"SESSION_REDIS"</span>] = Redis(password=<span class="string">'studyredis'</span>)</span><br><span class="line"><span class="comment"># app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(days=2)</span></span><br><span class="line">app.secret_key = <span class="string">'sdfasdfas'</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中的信号</title>
    <url>/2020/02/19/flask%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="flask中的信号"><a href="#flask中的信号" class="headerlink" title="flask中的信号"></a><center>flask中的信号</center></h2><a id="more"></a>

<h3 id="1-flask中使用的信号"><a href="#1-flask中使用的信号" class="headerlink" title="1. flask中使用的信号"></a>1. flask中使用的信号</h3><ul>
<li>flask中的信号基于blinker,在请求过程中定制行为</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install blinker</span><br></pre></td></tr></table></figure>

<ul>
<li>信号对象有：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)＃　模板渲染之后执行</span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>) <span class="comment">#模板渲染之前执行</span></span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)＃请求到来之前</span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)＃请求结束之后</span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)＃请求执行完毕后自动执行(无论成功与否)</span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)＃请求执行出现异常执行</span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)＃　应用上下文执行完毕后自动执行(无论成功与否)</span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)＃应用上下文push</span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)＃应用上下文pop</span><br><span class="line">message_flashed = _signals.signal(<span class="string">"message-flashed"</span>)<span class="comment"># 向flash添加数据时</span></span><br></pre></td></tr></table></figure>

<h3 id="2-信号触发的区域"><a href="#2-信号触发的区域" class="headerlink" title="2. 信号触发的区域:"></a>2. 信号触发的区域:</h3><ul>
<li>开始(1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.try_trigger_before_first_request_functions() <span class="comment"># 执行@app.before_first_request</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 触发request_started信号</span></span><br><span class="line">    request_started.send(self)</span><br><span class="line">    rv = self.preprocess_request()</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        rv = self.dispatch_request()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    rv = self.handle_user_exception(e)</span><br><span class="line"><span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来(2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kfuncs = self.before_request_funcs.get(<span class="literal">None</span>, ()) </span><br><span class="line"><span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.before_request_funcs:</span><br><span class="line">    funcs = chain(funcs, self.before_request_funcs[bp])</span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">    rv = func()  <span class="comment"># 执行@app.before_request</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<ul>
<li>(3)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    req = _request_ctx_stack.top.request</span><br><span class="line">    <span class="keyword">if</span> req.routing_exception <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.raise_routing_exception(req)</span><br><span class="line">    rule = req.url_rule</span><br><span class="line">    <span class="comment"># if we provide automatic options for this URL and the</span></span><br><span class="line">    <span class="comment"># request came with the OPTIONS method, reply automatically</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        getattr(rule, <span class="string">"provide_automatic_options"</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">and</span> req.method == <span class="string">"OPTIONS"</span></span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> self.make_default_options_response()</span><br><span class="line">    <span class="comment"># otherwise dispatch to the handler for that endpoint</span></span><br><span class="line">    <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)<span class="comment"># 执行视图函数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>(4)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    ctx = _request_ctx_stack.top</span><br><span class="line">    bp = ctx.request.blueprint</span><br><span class="line">    funcs = ctx._after_request_functions</span><br><span class="line">    <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">        response = handler(response) <span class="comment">#　执行@app.after_request</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">        self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>(5)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request_finished.send(self, response=response) <span class="comment">#触发　request_finished 信号</span></span><br></pre></td></tr></table></figure>

<h3 id="3-定义信号处理函数"><a href="#3-定义信号处理函数" class="headerlink" title="3. 定义信号处理函数"></a>3. 定义信号处理函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, signals</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'测试触发'</span>)</span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">signals.request_started.connect(func)</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>信号</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(3)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h2 id="flask学习-3"><a href="#flask学习-3" class="headerlink" title="flask学习(3)"></a><center>flask学习(3)</center></h2><a id="more"></a>

<h3 id="1-Flask的app上下文"><a href="#1-Flask的app上下文" class="headerlink" title="1.Flask的app上下文"></a>1.Flask的app上下文</h3><p>1.1 通过ctx.push()进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved:</span><br><span class="line">        top.pop(top._preserved_exc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before we push the request context we have to ensure that there</span></span><br><span class="line">    <span class="comment"># is an application context.</span></span><br><span class="line">    app_ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">        app_ctx = self.app.app_context()  <span class="comment"># 返回AppContext()对象</span></span><br><span class="line">        app_ctx.push() <span class="comment"># 将app_ctx对象通过LocalStack添加到Local中</span></span><br><span class="line">        self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._implicit_app_ctx_stack.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>1.2 AppContext类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app  <span class="comment"># 全局代理对象current_app　代理的就是这个app</span></span><br><span class="line">        self.url_adapter = app.create_url_adapter(<span class="literal">None</span>)</span><br><span class="line">        self.g = app.app_ctx_globals_class() <span class="comment"># 全局代理对象g 代理的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Like request context, app contexts can be pushed multiple times</span></span><br><span class="line">        <span class="comment"># but there a basic "refcount" is enough to track them.</span></span><br><span class="line">        self._refcnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Binds the app context to the current context."""</span></span><br><span class="line">        self._refcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">            sys.exc_clear()</span><br><span class="line">        _app_ctx_stack.push(self)</span><br><span class="line">        appcontext_pushed.send(self.app)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">        <span class="string">"""Pops the app context."""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._refcnt -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._refcnt &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel:</span><br><span class="line">                    exc = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                self.app.do_teardown_appcontext(exc)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            rv = _app_ctx_stack.pop()</span><br><span class="line">        <span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">"Popped wrong app context.  (%r instead of %r)"</span> % (rv, self)</span><br><span class="line">        appcontext_popped.send(self.app)</span><br><span class="line">＃　支持　<span class="keyword">with</span> 语法：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.push()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></span><br><span class="line">        self.pop(exc_value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> BROKEN_PYPY_CTXMGR_EXIT <span class="keyword">and</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            reraise(exc_type, exc_value, tb)</span><br></pre></td></tr></table></figure>

<p>1.3  应用上下文对象中的具体属性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_ctx_globals_class = _AppCtxGlobals  <span class="comment">#  g----&gt; 对应的类对象</span></span><br><span class="line"><span class="comment"># current_app 对应的就是　Flask()实例app</span></span><br></pre></td></tr></table></figure>

<p>1.4 </p>
<p>总结：程序上下文的生命周期：随着请求上下文的生命周期产生和销毁；每个请求都会创建新的请求上下文堆栈，因为也会创建新的程序上下文堆栈，所以g 会在每个请求中重设；</p>
<p>程序上下文可以在不需要请求存在的情况下使用(测试)，这时候只需要单独推送程序上下文，可以看到不同的程序运行状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, g, session, request</span><br><span class="line"><span class="comment"># 这时候所有的全局上下文对象都没有被绑定，处于程序设置状态</span></span><br><span class="line">In [<span class="number">2</span>]: app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: current_app, g, session, request</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">(&lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: app_ctx = app.app_context()</span><br><span class="line"><span class="comment"># 推送程序上下文后，程序上下文对象都绑定了各自的对象，　－－程序运行状态</span></span><br><span class="line">In [<span class="number">5</span>]: app_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: req_ctx = app.test_request_context()</span><br><span class="line"><span class="comment"># 推送请求上下文后，四个对象都绑定了各自的对象　－－－　请求运行态</span></span><br><span class="line">In [<span class="number">8</span>]: req_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;Request <span class="string">'http://localhost/'</span> [GET]&gt;,</span><br><span class="line"> &lt;NullSession &#123;&#125;&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="2-多app应用"><a href="#2-多app应用" class="headerlink" title="2.多app应用"></a>2.多app应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.middleware.dispatcher <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, globals</span><br><span class="line"><span class="keyword">from</span> flask.globals <span class="keyword">import</span> _app_ctx_stack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app1 = Flask(<span class="string">'app01'</span>)</span><br><span class="line">app2 = Flask(<span class="string">'app02'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route('/index1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"wwww"</span></span><br><span class="line"></span><br><span class="line">app = DispatcherMiddleware(app1, &#123;<span class="string">'/test'</span>: app2&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为脚本执行时，这时候就会出现同一个　'stack':对应多个值的情况，所有使用列表存储</span></span><br><span class="line"><span class="keyword">with</span> app1.app_context():</span><br><span class="line">    print(_app_ctx_stack._local.__storage__)</span><br><span class="line">    <span class="keyword">with</span> app2.app_context():</span><br><span class="line">        print(_app_ctx_stack._local.__storage__)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;]&#125;&#125;</span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x7f4712923c50</span>&gt;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">5000</span>, app, )</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>pymysql 与数据库连接池</title>
    <url>/2020/02/19/pymysql-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="pymysql以及DButils"><a href="#pymysql以及DButils" class="headerlink" title="pymysql以及DButils"></a><center>pymysql以及DButils</center></h2><a id="more"></a>

<ol>
<li>使用原生sql连接数据库(pymysql)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> ＃ 在下面的情况下，会出现问题，多线程并发执行，不能正确的获取打算的结果。</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span>      </span><br><span class="line"> <span class="number">7</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">8</span>                        database=<span class="string">'Tutorial'</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line"> <span class="number">9</span>      </span><br><span class="line"><span class="number">10</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">11</span>     cursor = CONN.cursor()</span><br><span class="line"><span class="number">12</span>     cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">13</span>     result = cursor.fetchall()</span><br><span class="line"><span class="number">14</span>     cursor.close()</span><br><span class="line"><span class="number">15</span>     print(result)</span><br><span class="line"><span class="number">16</span>      </span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">19</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">20</span>     t.start()</span><br></pre></td></tr></table></figure>

<p>２．解决方案之一，使用锁机制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span>      </span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span> <span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"> <span class="number">7</span>      </span><br><span class="line"> <span class="number">8</span> LOCK = RLock()</span><br><span class="line"> <span class="number">9</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, database=<span class="string">'Tutorial'</span>,            charset=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="number">10</span>      </span><br><span class="line"><span class="number">11</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">12</span>     <span class="keyword">with</span> LOCK:                                                                                                  </span><br><span class="line"><span class="number">13</span>         cursor = CONN.cursor()</span><br><span class="line"><span class="number">14</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">15</span>         result = cursor.fetchall()</span><br><span class="line"><span class="number">16</span>         cursor.close()</span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span>         print(result)</span><br><span class="line"><span class="number">19</span>      </span><br><span class="line"><span class="number">20</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">21</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">22</span>     t.start()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解决方案二, 使用DBUtils 模块创建线程池:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line">  <span class="number">3</span> <span class="keyword">import</span> threading</span><br><span class="line">  <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line">  <span class="number">5</span> <span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">  <span class="number">6</span>      </span><br><span class="line">  <span class="number">7</span> POOL = PooledDB(</span><br><span class="line">  <span class="number">8</span>         creator=pymysql, <span class="comment"># 使用的哪个模块连接数据库</span></span><br><span class="line">  <span class="number">9</span>         maxconnections=<span class="number">6</span>, <span class="comment">#连接池允许的最大连接数，０或者None表示不限制数量</span></span><br><span class="line"> <span class="number">10</span>         mincached=<span class="number">2</span>, <span class="comment"># 初始化时连接池最少创建的空闲连接，　０表示不创建</span></span><br><span class="line"> <span class="number">11</span>         maxcached=<span class="number">5</span>, <span class="comment"># 连接池中最多空闲的连接，　０或者None 表示不限制</span></span><br><span class="line"> <span class="number">12</span>        ＃ maxshared=<span class="number">3</span>,                                                                                                <span class="comment">#连接池中最多共享的连接数量，０或者None表示全部共享，因为pymysql和MySQLdb等模块的threadsafety都为１,                所以值无论设置为多少，_maxshared都是０,</span></span><br><span class="line"> <span class="number">13</span>         <span class="comment"># 所以所有连接都是共享连接,这个值不用设置就行</span></span><br><span class="line"> <span class="number">14</span>         blocking=<span class="literal">True</span>, <span class="comment"># 连接池如果没有可用连接后，是否阻塞等待，True:等待;False:不等待报错</span></span><br><span class="line"> <span class="number">15</span>         maxusage=<span class="literal">None</span>, <span class="comment"># 一个连接最多被重复使用的次数，None表示没有限制</span></span><br><span class="line"> <span class="number">16</span>         setsession=[], <span class="comment"># 开始回话前执行的命令列表　如["set time_zone ..."]</span></span><br><span class="line"> <span class="number">17</span>         ping=<span class="number">0</span>, <span class="comment">#ping MySQL服务器，检查服务是否可用，０或者None 表示Never, 1,默认（ｗhenever it is requested);      2(when a cursor is created)                                                                                     </span></span><br><span class="line"> <span class="number">18</span>         <span class="comment"># 4 (when a query is executed常用) ;7 (always常用）</span></span><br><span class="line"> <span class="number">19</span>         host=<span class="string">'localhost'</span>,</span><br><span class="line"> <span class="number">20</span>         port=<span class="number">3306</span>,</span><br><span class="line"> <span class="number">21</span>         user=<span class="string">'root'</span>,</span><br><span class="line"> <span class="number">22</span>         password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">23</span>         database=<span class="string">'Tutorial'</span></span><br><span class="line"> <span class="number">24</span>         )</span><br><span class="line"> <span class="number">25</span>      </span><br><span class="line"> <span class="number">26</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line"> <span class="number">27</span>         <span class="string">"""</span></span><br><span class="line"><span class="string"> 28         检查当前运行的连接数量是否小于最大连接数，如果大于，等待或者　raise TooManyConnections</span></span><br><span class="line"><span class="string">29         一旦关闭连接，连接就返回到连接池让后续线程使用</span></span><br><span class="line"><span class="string"> 30         :return:</span></span><br><span class="line"><span class="string"> 31         """</span></span><br><span class="line"> <span class="number">32</span>         conn = POOL.connection()</span><br><span class="line"> <span class="number">33</span>         cursor = conn.cursor()</span><br><span class="line"> <span class="number">34</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"> <span class="number">35</span>         result = cursor.fetchall()</span><br><span class="line"> <span class="number">36</span>         print(<span class="string">"线程&#123;&#125;: &#123;&#125;"</span>.format(arg, result))</span><br><span class="line"> <span class="number">37</span>         conn.close()</span><br><span class="line"> <span class="number">38</span>      </span><br><span class="line"> <span class="number">39</span>      </span><br><span class="line"> <span class="number">40</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> <span class="number">41</span>     t = threading.Thread(target=func, args=(i,))</span><br><span class="line"> <span class="number">42</span>     t.start()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(2)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h2 id="Flask-学习-2"><a href="#Flask-学习-2" class="headerlink" title="Flask 学习(2)"></a><center>Flask 学习(2)</center></h2><a id="more"></a>

<h3 id="1-flask请求上下文"><a href="#1-flask请求上下文" class="headerlink" title="1.flask请求上下文"></a>1.flask请求上下文</h3><p>１．从app.run()开始调用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    run_simple(host, port, self, **options) <span class="comment">#当请求进来时将调用self的__call__方法</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># reset the first request information if the development server</span></span><br><span class="line">    <span class="comment"># reset normally.  This makes it possible to restart the server</span></span><br><span class="line">    <span class="comment"># without reloader and that stuff from an interactive shell.</span></span><br><span class="line">    self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">    <span class="string">"""The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">    wrapped to applying middleware."""</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)　＃利用这个函数可以做中间件</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">       <span class="comment"># ctx 就是RequestContext(self, environ)的对象</span></span><br><span class="line">       ＃　ctx就封装了app,request,session</span><br><span class="line">       ctx = self.request_context(environ)  </span><br><span class="line">       error = <span class="literal">None</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               ＃　ctx入栈</span><br><span class="line">               ＃　 _request_ctx_stack.push(self)　请求上下文入栈</span><br><span class="line">               ctx.push() </span><br><span class="line">               response = self.full_dispatch_request()</span><br><span class="line">           <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">               error = e</span><br><span class="line">               response = self.handle_exception(e)</span><br><span class="line">           <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">               error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">               <span class="keyword">raise</span></span><br><span class="line">           <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">       <span class="keyword">finally</span>:</span><br><span class="line">           <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">               error = <span class="literal">None</span></span><br><span class="line">           ctx.auto_pop(error) 　<span class="comment"># 删除请求上下文对象（里面有app上下文对象的pop)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app  </span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ)　＃将请求相关的数据封装在Request中</span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line">        <span class="keyword">except</span> HTTPException <span class="keyword">as</span> e:</span><br><span class="line">            self.request.routing_exception = e</span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line">        self.session = session</span><br></pre></td></tr></table></figure>



<p>使用多线程处理请求时，如何保证直接导入的request对象就是当前请求的request对象？</p>
<p>Flask解决方案就是使用Werkzeug提供的Local类实现的(类似threading.local()),存放数据的同时记录下对应线程的ID,获取数据时根据所在线程的ID获取到对应的数据；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_app_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> top.app</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()  <span class="comment">#请求上下文堆栈</span></span><br><span class="line">_app_ctx_stack = LocalStack()　＃程序上下文堆栈</span><br><span class="line">＃　全局上下文代理对象(使用代理)</span><br><span class="line">current_app = LocalProxy(_find_app)　＃app上下文代理对象</span><br><span class="line"><span class="comment"># partial()返回一个新的函数对象　obj = partial(_lookup_req_object, "request")</span></span><br><span class="line"><span class="comment"># obj() 将调用_lookup_req_object("request")这个函数</span></span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))　＃请求上下文代理对象</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">"session"</span>))　＃请求上下文代理对象</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">"g"</span>))　＃app上下文代理对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implements_bool</span><br><span class="line">class LocalProxy(object):</span><br><span class="line">    __slots__ &#x3D; (&quot;__local&quot;, &quot;__dict__&quot;, &quot;__name__&quot;, &quot;__wrapped__&quot;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, local, name&#x3D;None):</span><br><span class="line">    	＃对私有变量的赋值通过_LoclaProxy__local实现</span><br><span class="line">        object.__setattr__(self, &quot;_LocalProxy__local&quot;, local)</span><br><span class="line">        object.__setattr__(self, &quot;__name__&quot;, name)</span><br><span class="line">        if callable(local) and not hasattr(local, &quot;__release_local__&quot;):</span><br><span class="line">            # &quot;local&quot; is a callable that is not an instance of Local or</span><br><span class="line">            # LocalManager: mark it as a wrapped function.</span><br><span class="line">            object.__setattr__(self, &quot;__wrapped__&quot;, local)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    def _get_current_object(self):</span><br><span class="line">        &quot;&quot;&quot;Return the current object.  This is useful if you want the real</span><br><span class="line">        object behind the proxy at a time for performance reasons or because</span><br><span class="line">        you want to pass the object into a different context.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not hasattr(self.__local, &quot;__release_local__&quot;):</span><br><span class="line">        	#通过self.__local()函数获取</span><br><span class="line">            return self.__local()</span><br><span class="line">        try:</span><br><span class="line">            return getattr(self.__local, self.__name__)</span><br><span class="line">        except AttributeError:</span><br><span class="line">            raise RuntimeError(&quot;no object bound to %s&quot; % self.__name__)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理Local()对象的一个栈</span></span><br><span class="line">＃这里使用LocalStack而不是直接使用Local，主要原因时为了支持多app共存</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local = Local() <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local.__release_local__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._local.__ident_func__</span><br><span class="line"></span><br><span class="line"><span class="meta">    @__ident_func__.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        object.__setattr__(self._local, <span class="string">"__ident_func__"</span>, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_lookup</span><span class="params">()</span>:</span></span><br><span class="line">            rv = self.top</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"object unbound"</span>)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(_lookup)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv　＃使用列表存储请求上文或者app上下文对象</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Removes the topmost item from the stack, will return the</span></span><br><span class="line"><span class="string">        old value or `None` if the stack was already empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            release_local(self._local)</span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">"__storage__"</span>, <span class="string">"__ident_func__"</span>) <span class="comment"># 对外能够被访问的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"__storage__"</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__ident_func__"</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        <span class="string">"""Create a proxy for a name."""</span></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br></pre></td></tr></table></figure>

<p>总结:</p>
<p>视图函数获取请求对象的方式:</p>
<p>Django使用传递request参数的方式来实现；</p>
<p>Flask使用上下文管理的方式来实现：</p>
<p>请求进来，将请求的所有数据封装在RequestContext对象中，然后将这个对象通过LocalStack放到Local中；</p>
<p>在视图中使用的时候，调用request的属性时，实际上调用的是LocalProxy的方法，获取真实的request对象的属性；</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(-)</title>
    <url>/2020/02/17/flask%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="flask学习"><a href="#flask学习" class="headerlink" title="flask学习(-)"></a><center>flask学习(-)</center></h2><a id="more"></a>

<p>flask作为轻量级，易于扩展的微型python web框架。Flask有两个依赖：一个是ＷSGI工具集(Werkzeug),一个是Jinja2模板引擎。Flask只保留web开发的核心功能，其他功能全靠外部扩展来实现(比如数据库集成，表单认证，文件上传)。WSGI是python中用来规定Web服务器如何与Python Web程序进行沟通的标准，与WSGI完全兼容的Flask能够配置到各种大型网络服务器中。</p>
<p>１．配置文件</p>
<ul>
<li><code>app.config[&#39;ADMIN_NAME&#39;] = &#39;cgn&#39; 单个配置</code></li>
<li><code>app.config.update(TESTING=True, SECRET_KEY=&#39;dsfsdfs&#39;) 多个配置</code></li>
<li><code>大型配置app.config.from_object(&#39;settings.DevelopmentConfig&#39;)</code></li>
</ul>
<p>２．路由器</p>
<ul>
<li>route()的常见参数有methods, endpoint,其他参数有</li>
<li>defaults: url没有参数，但是视图函数有参数的情况下，这里可以使用它</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/test', defaults=&#123;'id': 1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teset</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id is %s"</span> % id</span><br></pre></td></tr></table></figure>

<ul>
<li>redirect_to: 重定向到另一个位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/redirect', redirect_to='/test')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello redirect"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>​    subdomain:支持子域名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/www', subdomain='www')  # 访问　www.test.com:5000/www</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">www</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"www"</span></span><br><span class="line"><span class="comment"># 设置的前提：　app.config["SERVER_NAME"] = 'test.com:5000'</span></span><br><span class="line"><span class="comment"># 同时还需要修改 hosts文件，添加　127.0.0.1　www.test.com</span></span><br></pre></td></tr></table></figure>

<ul>
<li>strict_slashes: 是否严格的’/‘结尾</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/strict', strict_slashes=False) # strict_slashes=True, 严格url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strict</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"strict visit"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>基于装饰器实现，本质是通过　app.add_url_rule(rule, endpoint, view_func, **options)实现</li>
<li>除了基本的FBV,还可以实现CBV</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>]</span><br><span class="line">    decorators = [auth,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Index.GET"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index.POST"</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, view_func=IndexView.as_view(name=<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>内置的URL变量转换器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string: (默认值)不包括斜线的字符串 &lt;val&gt;</span><br><span class="line">int: &lt;int:year&gt; 整型</span><br><span class="line">float: &lt;flaot:val&gt; 浮点数</span><br><span class="line">path: &lt;path:path&gt; 包含斜线的字符串</span><br><span class="line">any: &lt;any(blue, white, red):color&gt; 匹配一系列给定值中的元素</span><br><span class="line">uuid: UUID字符串</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展URL变量转换器支持正则表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegerConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, regex)</span>:</span></span><br><span class="line">        super(RegerConverter, self).__init__(map)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 匹配成功时，传递给视图函数的参数的值</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        ＃使用url_for 反向生成url调用的函数</span><br><span class="line">        val = super(RegerConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegerConverter</span><br><span class="line">＃使用&lt;reger:test&gt; 这个转换器</span><br><span class="line"><span class="meta">@app.route('/index/&lt;reger("\d+"):test&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_test</span><span class="params">(test)</span>:</span></span><br><span class="line">    print(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello %s'</span> % test</span><br></pre></td></tr></table></figure>

<p>常见的错误:</p>
<ul>
<li>自定义装饰器，当给视图函数使用多个装饰器时，装饰器的顺序很重要，如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/detail/&lt;int:id&gt;', methods=['GET'], endpoint='detail_id')</span></span><br><span class="line"><span class="meta">@LoginRequired   # 访问之前要确认是否已经登录</span></span><br><span class="line">＃这个装饰器要放在@app.route的下面，如果放在上面，那么将不起任何作用，这时的理解是当请求到来的时候，执行的＃　视图处理函数就是＠app.route下面的函数，而在它上面的装饰器(如果有的话)的处理逻辑没有执行；</span><br><span class="line">＃同时这时候还需要给每个使用这个装饰器的函数添加endpoint参数，因为如果不添加，可能导致下面的错误</span><br><span class="line">＃因为视图函数的名字不能相同，这时候视图函数的名字都是wrapper</span><br><span class="line"><span class="comment"># AssertionError: View function mapping is overwriting an existing endpoint function: #wrapper</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_id</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> id <span class="keyword">in</span> data_dict:</span><br><span class="line">        info = data_dict[id]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'detail_id.html'</span>, info=info)</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的也可以通过修改装饰器函数(不添加endpoint)也可以实现,被装饰的视图函数的名字不同</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">	@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>３．模板语言</p>
<ul>
<li>向模板中传递html格式的字符串，如何标记为safe,使用　,或者通过Markup()</li>
<li>支持宏定义</li>
<li>其他语法与Django模板相似</li>
</ul>
<p>４．请求与响应</p>
<ul>
<li>请求的属性</li>
<li>返回值</li>
<li>如何定制响应相关的属性</li>
</ul>
<p>５．请求扩展</p>
<ul>
<li>@app.before_request 在每个请求之前都要执行被这个装饰器装饰的函数，可以有返回值，一旦返回值不是None,将拦截请求，或者重定向</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现每个请求之前检查用户是否登录，除了`/login`</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求之前'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/login'</span> == request.path:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<ul>
<li>@app.before_first_request,第一个请求到来的时候执行，不管是否有返回值都不会拦截</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_first_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是第一个请求'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>@app.after_request, 每个请求完成后都要执行的响应处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'bye bye'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p><strong>可以使用多个请求和多个响应处理函数，它们的执行顺序是，请求处理从上到下，而响应是从下到上,,如果第一个请求被拦截后，那么后面的请求不会执行，但是响应都会执行</strong> </p>
<ul>
<li>＠app.errorhandler定制错误处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Page not found'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>给模板自定义全局函数或者过滤器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_global</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  a1 + a2</span><br><span class="line"><span class="comment"># &#123;&#123; use_global(1, 2) &#125;&#125;</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment"># &#123;&#123; 3|use_filter(3, 4) &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>６．中间件</p>
<p>当请求到来的时候，实际上执行的是app.wsgi_app(environ, start_response)这个方法，利用这一点，我们可以在处理请求之前做一些事情，下面就是中间件的处理，仅仅打印一些信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之前'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        result = self.app(environ, start_response)</span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之后'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">app.wsgi_app = MyMiddleware(app.wsgi_app)</span><br></pre></td></tr></table></figure>



<p>７．闪现</p>
<ul>
<li>基于session实现的对临时数据的存取，主要应用显示消息</li>
<li>flash(‘message’)  —&gt;存消息</li>
<li>get_flashed_messages() —&gt;取出某个请求的所有消息，返回值是列表[(‘message’, ‘category’)],然后清空；</li>
</ul>
<p>８．蓝图</p>
<p>利用蓝图可以将应用分模块安排，可以按照功能模块化程序，同时蓝图可以有自己的静态文件夹和模板文件夹，另外蓝图也可以完成请求的扩展(注册路由，错误处理函数，上下文处理函数，请求处理函数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> views.admin <span class="keyword">import</span> admin_bp</span><br><span class="line"><span class="keyword">from</span> views.auth <span class="keyword">import</span> auth_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.register_blueprint(auth_bp, url_prefix=<span class="string">'/auth'</span>)</span><br><span class="line">app.register_blueprint(admin_bp, url_prefix=<span class="string">'/admin'</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Django with celery使用</title>
    <url>/2020/02/15/django-with-celery%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Django-with-celery使用"><a href="#Django-with-celery使用" class="headerlink" title=" Django with celery使用"></a><center> Django with celery使用</center></h2><a id="more"></a>

<ol>
<li>当前使用的环境:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">------------------------- -------</span><br><span class="line">amqp                      <span class="number">2.5</span><span class="number">.2</span>  </span><br><span class="line">asgiref                   <span class="number">3.2</span><span class="number">.3</span>  </span><br><span class="line">Babel                     <span class="number">2.8</span><span class="number">.0</span>  </span><br><span class="line">billiard                  <span class="number">3.6</span><span class="number">.2</span><span class="number">.0</span></span><br><span class="line">celery                    <span class="number">4.4</span><span class="number">.0</span>  </span><br><span class="line">Django                    <span class="number">3.0</span><span class="number">.3</span>  </span><br><span class="line">django-crispy-forms       <span class="number">1.8</span><span class="number">.1</span>  </span><br><span class="line">django-registration-redux <span class="number">2.7</span>    </span><br><span class="line">flower                    <span class="number">0.9</span><span class="number">.3</span>  </span><br><span class="line">importlib-metadata        <span class="number">1.5</span><span class="number">.0</span>  </span><br><span class="line">kombu                     <span class="number">4.6</span><span class="number">.7</span>  </span><br><span class="line">numpy                     <span class="number">1.18</span><span class="number">.1</span> </span><br><span class="line">pip                       <span class="number">20.0</span><span class="number">.2</span> </span><br><span class="line">pytz                      <span class="number">2019.3</span> </span><br><span class="line">redis                     <span class="number">3.4</span><span class="number">.1</span>  </span><br><span class="line">scipy                     <span class="number">1.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>项目目录结构</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DjangoCelery/</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── demoapp</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   ├── <span class="number">0001</span>_initial.py</span><br><span class="line">│   │   ├── <span class="number">0002</span>_jobmodel.py</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tasks.py  <span class="comment"># celery 任务模块</span></span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── DjangoCelery</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── celery.py　　　＃ celery实例模块</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── kill_celery.sh</span><br><span class="line">├── manage.py</span><br><span class="line">├── start_celery.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>与celery有关的文件</li>
</ol>
<ul>
<li><code>DjangoCelery/celery.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'DjangoCelery.settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'DjangoCelery'</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/__init__.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/settings.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># celery setting</span></span><br><span class="line"></span><br><span class="line">CELERY_BROKER_URL = <span class="string">'amqp://guest:guest@localhost'</span></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>]</span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:studyredis@localhost:6379/1'</span></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/tasks.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task, current_task</span><br><span class="line"><span class="keyword">from</span> demoapp.models <span class="keyword">import</span> Widget</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers)</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_widgets</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Widget.objects.count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_widget</span><span class="params">(wdiget_id, name)</span>:</span></span><br><span class="line">    w = Widget.objects.get(id=wdiget_id)</span><br><span class="line">    w.name = name</span><br><span class="line">    w.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用track_started=True 改变任务状态变化</span></span><br><span class="line"><span class="meta">@shared_task(track_started=True) # 任务状态从PEDDING--SUCCESS变化为PEDDING-STARTED-SUCCESS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fft_random</span><span class="params">(n)</span>:</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        x = random.normal(<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">2000</span>)</span><br><span class="line">        y = fft(x)</span><br><span class="line">        <span class="keyword">if</span> i == int(j * n / <span class="number">50</span>):</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"j=&#123;&#125;"</span>.format(j))</span><br><span class="line">            current_task.update_state(state=<span class="string">'PROGRESS'</span>, meta=&#123;<span class="string">'current'</span>: i, <span class="string">'total'</span>: n&#125;)</span><br><span class="line">    <span class="keyword">return</span> random.random()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/views.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, username)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'ffts'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           count = int(request.POST.get(<span class="string">'ffts'</span>))</span><br><span class="line">           print(count)</span><br><span class="line">           task = fft_random.delay(count)　＃开启任务</span><br><span class="line">           job = JobModel(user=request.user, task_id=task.task_id)</span><br><span class="line">           job.save()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'cancel_computation'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           task = get_active_task(request.user)</span><br><span class="line">           <span class="keyword">if</span> task:</span><br><span class="line">               celery_app.control.revoke(task.task_id, terminate=<span class="literal">True</span>) <span class="comment">#取消耗时任务</span></span><br><span class="line">               print(<span class="string">"About to cancel"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               print(<span class="string">'No active task to cancel.'</span>)</span><br><span class="line">       <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'demoapp:Profile'</span>, args=[request.user.username]))</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>启动worker,关闭worker方式</p>
<p>4.1 使用后台作业方式</p>
<ul>
<li>`celery worker -A DjangoCelery -l info &amp;``</li>
<li>``ps -ef |grep celery| grep -v grep |awk ‘{print $2}’ |xargs kill -9` </li>
</ul>
<p>4.2 使用<code>sudo systemctl start celery.service</code> 方式开启</p>
<p>  官网文档:<a href="https://docs.celeryproject.org/en/stable/userguide/daemonizing.html" target="_blank" rel="noopener">设置守护进程</a> </p>
<ul>
<li><p>首先要增加<code>celery.service</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> [Unit]</span><br><span class="line"> <span class="number">2</span> Description=Celery Service</span><br><span class="line"> <span class="number">3</span> After=network.target</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> [Service]</span><br><span class="line"> <span class="number">6</span> Type=forking</span><br><span class="line"> <span class="number">7</span> User=cgn</span><br><span class="line"> <span class="number">8</span> Group=cgn</span><br><span class="line"> <span class="number">9</span> EnvironmentFile=/etc/conf.d/celery</span><br><span class="line"><span class="number">10</span> WorkingDirectory=/home/cgn/study_celery_with_django/DjangoCelery</span><br><span class="line"><span class="number">11</span> ExecStart=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi start $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">12 &gt;---&gt;---  -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">13 &gt;---&gt;---  --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> ExecStop=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi stopwait $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">16 &gt;---&gt;--- --pidfile=$&#123;CELERYD_PID_FILE&#125;'</span></span><br><span class="line"><span class="number">17</span>  </span><br><span class="line"><span class="number">18</span> ExecReload=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi restart $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">19 &gt;---&gt;---   -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">20 &gt;---&gt;---   --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">21</span>  </span><br><span class="line"><span class="number">22</span> [Install]</span><br><span class="line"><span class="number">23</span> WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>sudo systemctl daemon-reload</code> ,每次修改之后都要先执行它</p>
</li>
<li><p>增加配置文件<code>/etc/conf.d/celery</code> </p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> CELERYD_NODES=<span class="string">"celery"</span></span><br><span class="line">  <span class="number">2</span>  </span><br><span class="line">  <span class="number">3</span>  </span><br><span class="line">  <span class="number">4</span> <span class="comment">#CELERY_BIN="/usr/local/bin/celery"</span></span><br><span class="line">  <span class="number">5</span> <span class="comment"># CELERY_BIN="/virtualenvs/bin/celery"</span></span><br><span class="line">  <span class="number">6</span> CELERY_BIN=<span class="string">"/home/cgn/.local/share/virtualenvs/study_celery_with_django-qMMGxLEz/bin/celery"</span></span><br><span class="line">  <span class="number">7</span>  </span><br><span class="line">  <span class="number">8</span> CELERY_APP=<span class="string">"DjangoCelery"</span></span><br><span class="line">  <span class="number">9</span> CELERYD_MULTI=<span class="string">"multi"</span></span><br><span class="line"> <span class="number">10</span>  </span><br><span class="line"> <span class="number">11</span> CELERYD_OPTS=<span class="string">"--time-limit=300 --concurrency=4"</span></span><br><span class="line"> <span class="number">12</span>  </span><br><span class="line"> <span class="number">13</span> CELERYD_PID_FILE=<span class="string">"/var/run/celery/%n.pid"</span></span><br><span class="line"> <span class="number">14</span> CELERYD_LOG_FILE=<span class="string">"/var/log/celery/%n%I.log"</span></span><br><span class="line"> <span class="number">15</span> CELERYD_LOG_LEVEL=<span class="string">"INFO"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过这个命令<code>systemd-tmpfiles --create /etc/tmpfiles.d/xxx.conf</code> 快速创建目录</p>
<p>例如　<code>/etc/tmpfiles.d/celery.conf</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d /var/run/celery <span class="number">0755</span> cgn cgn </span><br><span class="line">d /var/log/celery <span class="number">0755</span> cgn cgn</span><br></pre></td></tr></table></figure>

<p>命令解释如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--create</span><br><span class="line"> 	创建或者写入所有f,F,w,d,D,v,p,L,c,b,m标记的文件与目录</span><br><span class="line">--remove</span><br><span class="line">	删除D,R标记的目录中的内容，以及r,R标记的目录与文件本身</span><br><span class="line">--clean</span><br><span class="line">	清理所有过期的文件与目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置完成之后可以通过如下命令进行开启和停止</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo systemctl start celery.service</span><br><span class="line">sudo systemctl stop celery.service</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq初学习</title>
    <url>/2020/02/15/rabbitmq%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="rabbitmq初学习"><a href="#rabbitmq初学习" class="headerlink" title=" rabbitmq初学习"></a><center> rabbitmq初学习</center></h2><a id="more"></a>
<p>学习地址: <a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">rabbitmq在python中的使用</a> </p>
<p>AMQP消息路由必须有三部分:交换器，队列和绑定；</p>
<p>生产者将消息发布到交换器上，消息最终到达队列，并被消费者接收；绑定决定了消息如何从交换器路由到特定的队列。</p>
<p>1.目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study_rabbitmq/</span><br><span class="line">├── receive_message.py</span><br><span class="line">└── send_message.py</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>receive_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">6</span>  </span><br><span class="line"> <span class="number">7</span> channel = connection.channel()　＃发送消息都要通过信道</span><br><span class="line"> <span class="number">8</span> <span class="comment"># 这个code不必重复使用，如果我们已经确定这个hello队列已经存在的话，如果不确定，那么就需要写上(可重复使用，只在第一次被创建)</span></span><br><span class="line"> <span class="number">9</span> channel.queue_declare(queue=<span class="string">'hello'</span>)　＃创建队列</span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="number">11</span>  </span><br><span class="line"><span class="number">12</span> <span class="comment"># 无论何时接收到消息，回调函数都将被调用</span></span><br><span class="line"><span class="number">13</span> <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line"><span class="number">14</span>     print(<span class="string">"[x] Received %r"</span> % body)</span><br><span class="line"><span class="number">15</span>  </span><br><span class="line"><span class="number">16</span> <span class="comment"># 从'hello'这个队列中接收消息，同时对于接收到的消息都要确认(通过auto_ack=True自动确认)</span></span><br><span class="line">＃ 确认之后rabbitmq 才会把这条消息从队列中删除掉；</span><br><span class="line"><span class="number">17</span> channel.basic_consume(queue=<span class="string">'hello'</span>, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"><span class="number">18</span>  </span><br><span class="line"><span class="number">19</span> print(<span class="string">"[*] Waiting for messages.To exit press CTRL+C"</span>)</span><br><span class="line"><span class="number">20</span> <span class="comment"># 开启循环等待消息到来,调用回调函数</span></span><br><span class="line"><span class="number">21</span> channel.start_consuming()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>send_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> time</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">5</span>  </span><br><span class="line"> <span class="number">6</span> <span class="comment"># 建立与rabbitmq server的连接</span></span><br><span class="line"> <span class="number">7</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">8</span> channel = connection.channel()</span><br><span class="line"> <span class="number">9</span> <span class="comment"># 创建一个接收我们消息的queue</span></span><br><span class="line"><span class="number">10</span> channel.queue_declare(queue=<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">11</span> <span class="comment"># rabbitmq 不能直接发送消息到队列中，必须通过exchange,这里使用默认exchange(一个空字符串)</span></span><br><span class="line"><span class="number">12</span> <span class="comment"># routing_key 指定队列的名字，使用这个交换器根据routing_key决定将消息发送到哪个队列中</span></span><br><span class="line"><span class="number">13</span> channel.basic_publish(exchange=<span class="string">''</span>, routing_key=<span class="string">'hello'</span>, body=<span class="string">'hello world!'</span>)</span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> print(<span class="string">"[x] Sent 'hello world!'"</span>)</span><br><span class="line"><span class="number">16</span> connection.close()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行过程</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.启动 consumer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python receive_message.py </span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages.To exit press CTRL+C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打开另一个终端启动　producer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python send_message.py </span><br><span class="line">[x] Sent <span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看队列情况</span></span><br><span class="line"> sudo rabbitmqctl list_queues</span><br><span class="line"> hello	<span class="number">0</span></span><br><span class="line"></span><br><span class="line">＃４．查看消息是否被接收，消息被处理后是否发送确认标志</span><br><span class="line">~/study_rabbitmq$ sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br><span class="line">hello	<span class="number">0</span>	<span class="number">0</span></span><br><span class="line">＃ <span class="number">5.</span> 可以使用如下命令删除这个没有意义的队列</span><br><span class="line">sudo rabbitmqctl stop_app</span><br><span class="line">sudo rabbitmqctl reset</span><br><span class="line">sudo rabbitmqctl start_app</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>celery初认识</title>
    <url>/2020/02/08/celery%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h3 id="celery初认识"><a href="#celery初认识" class="headerlink" title="celery初认识"></a><center>celery初认识</center></h3><a id="more"></a>

<h4 id="1-在python2-7环境下使用"><a href="#1-在python2-7环境下使用" class="headerlink" title="1. 在python2.7环境下使用"></a>1. 在python2.7环境下使用</h4><p>1.1 单个任务执行</p>
<ul>
<li>准备环境</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install --python <span class="number">2.7</span></span><br><span class="line">pipenv install celery</span><br><span class="line">pipenv install redis</span><br></pre></td></tr></table></figure>

<ul>
<li><p>celery_app_task.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line">backend = <span class="string">'redis://:studyredis@127.0.0.1:6379/1'</span></span><br><span class="line">broker = <span class="string">'redis://:studyredis@127.0.0.1:6379/2'</span></span><br><span class="line"></span><br><span class="line">cel = celery.Celery(<span class="string">'test'</span>, backend=backend, broker=broker)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
</li>
<li><p>add_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>check_result.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">''</span>, app=cel)  <span class="comment"># 这里的 id为result.id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.gete()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始执行'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始执行：</p>
<ul>
<li><code>celery  worker -A celery_app_task -l info</code> 启动工作队列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40-70 v4.4.0 (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-4.4.0-173-generic-x86_64-with-Ubuntu-16.04-xenial 2020-02-08 17:13:07</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         test:0x7f3f8bbdc5d0</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;1</span><br><span class="line">- *** --- * --- .&gt; concurrency: 4 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_app_task.add</span><br><span class="line"></span><br><span class="line">[2020-02-08 17:13:07,576: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">[2020-02-08 17:13:07,581: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-02-08 17:13:08,597: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2020-02-08 17:13:08,615: INFO&#x2F;MainProcess] celery@cgn-Lenovo-S40-70 ready.</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>向任务队列中添加任务</p>
<p><code>python add_task.py</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-02-08 17:13:55,164: INFO&#x2F;MainProcess] Received task: celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce]  </span><br><span class="line">[2020-02-08 17:13:55,170: INFO&#x2F;ForkPoolWorker-1] Task celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce] succeeded in 0.00431576301344s: 7</span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<p>  1.2 多任务添加到消息中间件中</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>├── celery_task<br>│   ├── celery_app.py<br>│   ├── <strong>init</strong>.py<br>│   ├── task_one.py<br>│   └── task_two.py<br>├── my_celery.py<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- celery_app.py</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding&#x3D;utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">celery_task &#x3D; Celery(&quot;task&quot;,</span><br><span class="line">                     broker&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;1&quot;,</span><br><span class="line">                     backend&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;2&quot;,</span><br><span class="line">                     include&#x3D;[&quot;celery_task.task_one&quot;, &quot;celery_task.task_two&quot;])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">two.delay(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启ｗorker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task.celery_app -l info</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9c486e9d0</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">411</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">417</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">433</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">443</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">771</span>: INFO/MainProcess] Received task: celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">773</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">782</span>: INFO/ForkPoolWorker<span class="number">-1</span>] Task celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a] succeeded <span class="keyword">in</span> <span class="number">5.00957920798</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">789</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7] succeeded <span class="keyword">in</span> <span class="number">5.01353460201</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-在python3-6-环境下如何使用？"><a href="#2-在python3-6-环境下如何使用？" class="headerlink" title="2. 在python3.6 环境下如何使用？"></a>2. 在python3.6 环境下如何使用？</h3><p>２.1  添加多个任务到任务队列中</p>
</li>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py   <span class="comment"># 必须使用这个名字</span></span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br><span class="line"></span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9fc743eb8</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">819</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">828</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">847</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">857</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务到消息中间件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">251</span>: INFO/MainProcess] Received task: celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">253</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-2</span>] Task celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1] succeeded <span class="keyword">in</span> <span class="number">5.015381631994387</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">50</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8] succeeded <span class="keyword">in</span> <span class="number">5.016119522973895</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3. 定时任务"></a>3. 定时任务</h3><p>3.1 在python3.6环境下实现定时10s后执行，使用如下：</p>
<ul>
<li><p>目录结构如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc_time = datetime.utcfromtimestamp(time.time()) <span class="comment">#这里必须使用utc时间</span></span><br><span class="line">add_time = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">action_time = utc_time + add_time</span><br><span class="line"></span><br><span class="line">res = one.apply_async(args=(<span class="number">10</span>, <span class="number">10</span>), eta=action_time) <span class="comment">#　定时10s后执行</span></span><br><span class="line">print(res.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7f5c2b12de80</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">726</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">736</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">757</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">772</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>将定时任务添加到任务队列中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">34</span>,<span class="number">567</span>: INFO/MainProcess] Received task: celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965]  ETA:[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">44.447419</span>+<span class="number">00</span>:<span class="number">00</span>] </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">49</span>,<span class="number">652</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965] succeeded <span class="keyword">in</span> <span class="number">5.012816867005313</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.2 实现周期性定时任务</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每10s执行一次celery_task.task_one,参数是(10, 10)</span></span><br><span class="line">celery_task.conf.beat_schedule = &#123;</span><br><span class="line">        <span class="string">"each10s_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>, <span class="comment"># 任务函数</span></span><br><span class="line">            <span class="string">"schedule"</span>: <span class="number">10</span>, <span class="comment"># 每10s执行一次　＃频率</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each1m_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(minute=<span class="number">1</span>),  <span class="comment"># 每一分钟执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each24hours_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(hour=<span class="string">'*/24'</span>),  <span class="comment"># 每24小时执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>task_one.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开始生产出周期性任务,需要一个生产者beat</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">celery beat -A celery_task</span><br><span class="line"></span><br><span class="line">celery beat v4<span class="number">.4</span><span class="number">.0</span> (cliffs) <span class="keyword">is</span> starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-02-08 20:47:44</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; redis://:**@127.0.0.1:6379/1</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%WARNING</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br></pre></td></tr></table></figure>

<ul>
<li>开启worker </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>分析中间件CsrfViewMiddleware源码</title>
    <url>/2020/01/28/%E5%88%86%E6%9E%90%E4%B8%AD%E9%97%B4%E4%BB%B6CsrfViewMiddleware%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="CsrfViewMiddleware-源码分析"><a href="#CsrfViewMiddleware-源码分析" class="headerlink" title=" ＣsrfViewMiddleware 源码分析"></a><center> <code>ＣsrfViewMiddleware</code> 源码分析</center></h3><a id="more"></a>

<ol>
<li><p>流程图</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/CsrfViewMiddleware.jpg" alt="avatar"></p>
</li>
</ol>
<ol start="2">
<li>源码分析</li>
</ol>
<ul>
<li>在工程的配置文件要有中间件 <code>CsrfViewMiddleware</code> 才能使用<code>csrf</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>请求进来，首先通过各个中间件的<code>process_requst</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="comment"># 第一次请求，返回None</span></span><br><span class="line">       csrf_token = self._get_token(request)</span><br><span class="line">       <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="comment"># Use same token next time.</span></span><br><span class="line">           request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_get_token</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               <span class="keyword">return</span> request.session.get(CSRF_SESSION_KEY)</span><br><span class="line">           <span class="keyword">except</span> AttributeError:</span><br><span class="line">               <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                   <span class="string">'CSRF_USE_SESSIONS is enabled, but request.session is not '</span></span><br><span class="line">                   <span class="string">'set. SessionMiddleware must appear before CsrfViewMiddleware '</span></span><br><span class="line">                   <span class="string">'in MIDDLEWARE%s.'</span> % (<span class="string">'_CLASSES'</span> <span class="keyword">if</span> settings.MIDDLEWARE <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">               )</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           ＃ 默认配置中，CSRF_USE_SESSIONS 为<span class="literal">False</span>，总不会执行</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">           ＃　第一次请求，没有cookie，返回<span class="literal">None</span></span><br><span class="line">               cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]</span><br><span class="line">           <span class="keyword">except</span> KeyError:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">           csrf_token = _sanitize_token(cookie_token)</span><br><span class="line">           <span class="keyword">if</span> csrf_token != cookie_token:</span><br><span class="line">               <span class="comment"># Cookie token needed to be replaced;</span></span><br><span class="line">               <span class="comment"># the cookie needs to be reset.</span></span><br><span class="line">               request.csrf_cookie_needs_reset = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> csrf_token</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后找到路由系统，根据请求的URL,找到对应的视图处理函数，然后再在各个中间件中找寻process_view</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> getattr(request, <span class="string">'csrf_processing_done'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">       <span class="keyword">if</span> getattr(callback, <span class="string">'csrf_exempt'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span>	</span><br><span class="line">       <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>):</span><br><span class="line">           <span class="keyword">if</span> request.is_secure():  <span class="comment"># 如果是　https请求</span></span><br><span class="line">                   referer = force_text(</span><br><span class="line">                   request.META.get(<span class="string">'HTTP_REFERER'</span>),</span><br><span class="line">                   strings_only=<span class="literal">True</span>,</span><br><span class="line">                   errors=<span class="string">'replace'</span></span><br><span class="line">               )</span><br><span class="line">               <span class="keyword">if</span> referer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_REFERER)</span><br><span class="line">          　　　....</span><br><span class="line">            csrf_token = request.META.get(<span class="string">'CSRF_COOKIE'</span>)</span><br><span class="line">            <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 为空，直接拒绝</span></span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_CSRF_COOKIE)</span><br><span class="line">  　　　　　　　　request_csrf_token = <span class="string">""</span></span><br><span class="line">           　<span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   request_csrf_token = request.POST.get(<span class="string">'csrfmiddlewaretoken'</span>, <span class="string">''</span>)</span><br><span class="line">               <span class="keyword">except</span> IOError:</span><br><span class="line">                   <span class="keyword">pass</span></span><br><span class="line">             <span class="keyword">if</span> request_csrf_token == <span class="string">""</span>:</span><br><span class="line">                   request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, <span class="string">''</span>)</span><br><span class="line">             request_csrf_token = _sanitize_token(request_csrf_token)</span><br><span class="line">             <span class="comment"># 比较请求头中的csrf_token 与从表单提交数据中获取的 request_csrf_token是否符合规则</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> _compare_salted_tokens(request_csrf_token, csrf_token):</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_BAD_TOKEN)</span><br><span class="line">        </span><br><span class="line">       <span class="comment"># 对于get, head, options, trace请求方法，直接跳过检查</span></span><br><span class="line">  　　　　　<span class="keyword">return</span> self._accept(request)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行真正的视图处理函数，如果返回的是渲染后的表单，同时表单中有标签  ,那么在渲染这个标签的时候，将调用get_token() 函数，这个函数的作用有两方面</p>
<ul>
<li>为请求头添加<code>CSRF_COOKIE</code> 属性，值为随机生成的64位<code>ascii</code>值</li>
<li>为表单隐藏的字段<code>csrfmiddlewaretoken</code> 赋值</li>
<li>设置请求头<code>CSRF_COOKIE_USED</code> 为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"CSRF_COOKIE"</span> <span class="keyword">not</span> <span class="keyword">in</span> request.META:</span><br><span class="line">               csrf_secret = _get_new_csrf_string()</span><br><span class="line">               request.META[<span class="string">"CSRF_COOKIE"</span>] = _salt_cipher_secret(csrf_secret)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               csrf_secret = _unsalt_cipher_token(request.META[<span class="string">"CSRF_COOKIE"</span>])</span><br><span class="line">           request.META[<span class="string">"CSRF_COOKIE_USED"</span>] = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> _salt_cipher_secret(csrf_secret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行<code>process_response</code> 响应，根据上面<code>get_token</code> 被调用，将执行<code>_set_token()</code> 函数，为响应设置<code>cookie</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">          <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">              <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 执行过 get_token后，这个条件不成立</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>): </span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">      ＃　为返回的响应设置cookie</span><br><span class="line">      self._set_token(request, response)</span><br><span class="line">      response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_set_token</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">          request.session[CSRF_SESSION_KEY] = request.META[<span class="string">'CSRF_COOKIE'</span>]</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          response.set_cookie(</span><br><span class="line">              settings.CSRF_COOKIE_NAME,　＃　cookie键为　csrftoken</span><br><span class="line">              request.META[<span class="string">'CSRF_COOKIE'</span>], <span class="comment"># 对应的值为　get_token函数生成的值</span></span><br><span class="line">              max_age=settings.CSRF_COOKIE_AGE,</span><br><span class="line">              domain=settings.CSRF_COOKIE_DOMAIN,</span><br><span class="line">              path=settings.CSRF_COOKIE_PATH,</span><br><span class="line">              secure=settings.CSRF_COOKIE_SECURE,</span><br><span class="line">              httponly=settings.CSRF_COOKIE_HTTPONLY,</span><br><span class="line">          )</span><br><span class="line">          <span class="comment"># Set the Vary header since content varies with the CSRF cookie.</span></span><br><span class="line">          patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>对get,head, options, trace这样的方法，不做<code>csrf</code>认证</p>
</li>
<li><p>只有当表单中使用了 这样的标签后，调用<code>get_token</code> 方法，为表单中与<code>csrf</code> 有关的字段赋值，同时这个值会随着每次请求而发生变化；</p>
</li>
<li><p>对于post,put, patch, delete 这样的请求，都会做出验证，如果想要不对这些做出认证，方法可以有</p>
<ul>
<li><p>不使用这个中间件</p>
</li>
<li><p>使用<code>csrf_exempt</code> 这个装饰器</p>
</li>
<li><p>如果是类视图中的函数，可以为类添加<code>@method_decorator(csrf_exempt, name=&#39;dispatch&#39;)</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>study-心理路线</title>
    <url>/2020/01/28/study-%E5%BF%83%E7%90%86%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="自觉持续的勤奋"><a href="#自觉持续的勤奋" class="headerlink" title=" 自觉持续的勤奋"></a><center> 自觉持续的勤奋</center></h2><a id="more"></a>

<p>​    如果身在职场，人微言轻，家境平平，那么持续性的自律和勤奋就是我的出路。我也曾经这样考虑过，我跑步的速度赶不上别人，我唯一能够做的就是持续性的跑步，我的速度不如人家，那就训练坚持跑的意志，这是我觉得是唯一一件主观上要发挥自己能力需要锻炼自己的事情。第一份工作就是自己没有好好考虑好，没有危机感，总感觉自己生活还行，从不知要修炼自己的能力，最近两年都处在恍恍惚惚中，好像又回到了学校里的焦虑时光，好像从来不知道自己到底热爱什么，可是我喜欢这种按键盘的感觉，在昏黄的午后，余晖照在我旁边的茶杯上，我坐在笔记本面前，迅速的在敲代码。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>django template 使用</title>
    <url>/2020/01/27/django-template-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="django-中的template使用"><a href="#django-中的template使用" class="headerlink" title=" django 中的template使用 "></a><center> django 中的template使用 </center></h2><a id="more"></a>

<h3 id="1-可以使用python-manage-py-shell-来快速测试模板语法是否正确"><a href="#1-可以使用python-manage-py-shell-来快速测试模板语法是否正确" class="headerlink" title="1. 可以使用python manage.py shell 来快速测试模板语法是否正确"></a>1. 可以使用<code>python manage.py shell</code> 来快速测试模板语法是否正确</h3><ul>
<li>模板中分变量和标签 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量的表示方法 &#123;&#123; var &#125;&#125;</span></span><br><span class="line">   <span class="comment"># 标签的表示方法  &#123;% if　%&#125;&#125; &#123;% else %&#125; &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>测试前的准备工作：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Context, Template</span><br><span class="line">   <span class="comment"># 生成一个模板对象</span></span><br><span class="line">   t = Template(<span class="string">'My name is &#123;&#123; name &#125;&#125;'</span>)</span><br><span class="line">   <span class="comment"># 创建给模板传递数据的对象,使用字典映射变量和他们的值</span></span><br><span class="line">   c = Context(&#123;<span class="string">'name'</span>: <span class="string">'Test'</span>&#125;) <span class="comment"># 给变量name 传递一个字符串 'Test'</span></span><br><span class="line">   <span class="comment"># 使用模板对象的render方法进行填充</span></span><br><span class="line">   t.render(c) <span class="comment"># 输出是一个unicode对象</span></span><br><span class="line">   <span class="comment"># u'My name is Test'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>向模板传递字典，或者类对象，如何访问他们的数据, 都是通过<code>.</code> 进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'Sally'</span>, <span class="string">'age'</span>: <span class="number">32</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old.'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 访问对象的属性</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.now()</span><br><span class="line">t = Template(<span class="string">'The month is &#123;&#123; date.month &#125;&#125; and the year is &#123;&#123; date.year &#125;&#125;'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'date'</span>: d&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 也可以访问对象的方法，但是只能调用不带参数的方法，同时不能带()</span></span><br><span class="line">t = Template(<span class="string">'&#123;&#123; var &#125;&#125;--- &#123;&#123; var.upper &#125;&#125;----&#123;&#123; var.isdigit &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'var'</span>: <span class="string">'hello'</span>&#125;))</span><br><span class="line"><span class="comment"># 也可以通过索引访问列表中的元素，但是不能使用负索引</span></span><br><span class="line">alist = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">t = Template(<span class="string">'Item 1 is &#123;&#123; items.1 &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'items'</span>: alist&#125;))</span><br><span class="line"><span class="comment"># 模板系统遇到点时，会按照一下顺序进行查找：</span></span><br><span class="line"><span class="comment"># 1. 字典类型</span></span><br><span class="line"><span class="comment"># 2. 属性查找</span></span><br><span class="line"><span class="comment"># 3. 方法调用</span></span><br><span class="line"><span class="comment"># 4. 列表类型索引查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点查找可以多级嵌套使用</span></span><br><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'sally'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name.upper &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用注意点</span></span><br><span class="line"><span class="comment"># 如果方法中有抛出异常，那么在渲染过程中就会传播此异常。为了不传播此异常，只要设置该异常有</span></span><br><span class="line">silent_variable_failure = <span class="literal">True</span> 这个属性就不会传播此异常</span><br><span class="line">t = Template(<span class="string">"My name is &#123;&#123; person.first_name &#125;&#125;"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> SilentAssertionError, <span class="string">"foo"</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SilentAssertionError</span><span class="params">(AssertionError)</span>:</span></span><br><span class="line">    silent_variable_failure = <span class="literal">True</span></span><br><span class="line">t.render(Context(&#123;<span class="string">'person'</span>: Person()&#125;))</span><br><span class="line"><span class="comment"># 默认情况下，变量不存在，模板系统将展示它为空字符串；</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注释语法： </span><br><span class="line"></span><br><span class="line">  - 单行注释 &#96;&#123;#  This is a comment #&#125;&#96;</span><br><span class="line">  - 多行注释 &#96;&#123;% comment %&#125; &#123;% endcomment %&#125;&#96;</span><br><span class="line"></span><br><span class="line">- 过滤器，显示变量内容前修改它的值</span><br><span class="line"></span><br><span class="line">  - &#96;&#123;&#123; name|lower &#125;&#125;&#96; 转变为小写显示</span><br><span class="line">  - &#96;&#123;&#123; my_list|first|upper &#125;&#125;&#96; 列表的第一个元素大写显示</span><br><span class="line">  - 带参数的过滤器，通过冒号之后添加双引号作为参数的值</span><br><span class="line">  - &#96;&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125;&#96; 显示变量的前30个词</span><br><span class="line"></span><br><span class="line">### 2. MVC</span><br><span class="line"></span><br><span class="line">- MVC(Model-View-Controller)，一种软件架构模式，分别是数据存取逻辑，业务逻辑和表现逻辑相互分开并组合在一起。</span><br><span class="line">- M: 数据存取部分， 对应于Django中的models</span><br><span class="line">- V:选择显示哪些数据以及如何显示，由视图和模板处理</span><br><span class="line">- C：根据用户输入委派视图部分，也就是Django中的路由，对给定的URL调用适当的python函数</span><br><span class="line">- 由于C由框架自行处理，Django中更关注的是Model，模板（Template)和视图（Views），所以也被称为MTV框架；</span><br><span class="line">- M（代表模型Model),数据存取层，处理与数据相关的所有事务：如何存取，如何验证有效性，以及数据之间的关系</span><br><span class="line">- T( 代表模板Template),表现层，如何在页面中显示；</span><br><span class="line">- V(View):业务逻辑层，是模型与模板之间的桥梁；</span><br><span class="line"></span><br><span class="line">### 3.模型</span><br><span class="line"></span><br><span class="line">- 通过&#96;python manage.py shell&#96; 研究 存取数据的一些知识</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  	from App.models import Animal</span><br><span class="line">  	# 查找所有对象</span><br><span class="line">  	animal_list &#x3D; Animal.objects.all() #返回一个QuerySet </span><br><span class="line">  	animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;) # 返回单个对象 </span><br><span class="line">  	# 只能用于返回单个对象，当返回值多于一个或者没有找到时会报错</span><br><span class="line">  	try:</span><br><span class="line">  		animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;)</span><br><span class="line">  	except Animal.DoesNotExist:  #DoesNotExist是类的属性，可以捕获并处理</span><br><span class="line">  		print(&#39;Animal does not name is dog&#39;)</span><br><span class="line">  	# 排序,按照某个字段进行排序</span><br><span class="line">  	animal &#x3D; Animal.objects.order_by(&#39;name&#39;)</span><br><span class="line">  	# 倒序排列通过</span><br><span class="line">  	aniaml &#x3D; Animal.objects.order_by(&#39;-name&#39;)</span><br><span class="line">  	# 对应的sql语句就是</span><br><span class="line">  	# select id, name from Animal order by name DESC;</span><br><span class="line">  	# order_by(arg1, arg2) 多个字段表示arg1相同的情况下，按照arg2进行排序</span><br><span class="line">  	# 如果向对所有的查询都执行排序，就配置类属性,那么默认情况下都会执行排序</span><br><span class="line">  	class Meta:</span><br><span class="line">  		ordering &#x3D; [&#39;name&#39;]</span><br><span class="line">  		</span><br><span class="line">  	# 过滤和排序可以同时使用</span><br><span class="line">  	animal &#x3D; Animal.objects.filter(name&#x3D;&#39;dog&#39;).order_by(&#39;name&#39;)</span><br><span class="line">  	#对应的sql</span><br><span class="line">  	# select id, name from Animal where name&#x3D;&#39;dog&#39; order by name;</span><br><span class="line">  	# 返回前两条记录</span><br><span class="line">  	# animal &#x3D; Animal.objects.order_by(&#39;name&#39;)[0:2]</span><br><span class="line">  	# 对应的sql</span><br><span class="line">  	# select id, name from Animal order by name offset 0 limit 2;</span><br><span class="line">  	# 不支持负索引</span><br><span class="line">  	</span><br><span class="line">  	# save 方法将一条记录的所有数据提交到数据库</span><br><span class="line">  	# update 方法只将更新的数据提交到数据库，可以避免其他列可能被其他进程改动，引起竞态；</span><br><span class="line">  	Animal.objects.order_by(id&#x3D;1).update(name&#x3D;&#39;Dog&#39;) # 返回受影响的记录条数</span><br><span class="line">  	#对应的sql语句</span><br><span class="line">  	# select id, name from Animal set name&#x3D;&#39;Dog&#39; where id&#x3D;1;</span><br><span class="line">  	</span><br><span class="line">  	# 删除操作,删除指定的一条记录</span><br><span class="line">  	Animal.objects.filter(id&#x3D;1).delete()</span><br><span class="line">  	# 删除所有记录</span><br><span class="line">  	Animal.objects.all().delete()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>djangorestframework 组件使用</title>
    <url>/2020/01/20/djangorestframework-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="djangorestframework组件使用"><a href="#djangorestframework组件使用" class="headerlink" title=" djangorestframework组件使用"></a><center> djangorestframework组件使用</center></h2><a id="more"></a>

<p>1.根据token值进行认证</p>
<p>自定义认证器 <code>authenticators</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line">   <span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line">   <span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">       <span class="comment"># 自己实现认证过程</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">           token = request.query_parames.get(<span class="string">'token'</span>)</span><br><span class="line">           token_obj = UserToken.objects.filter(u_token=token).first()</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">               <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>) <span class="comment">#必须抛出一个异常</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> (token_obj.user, token_obj)  <span class="comment">#必须返回一个元祖赋值给request.user, request.auth</span></span><br><span class="line">           </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(APIView)</span>:</span></span><br><span class="line">       <span class="comment">#定义该类的认证，通过认证后才能访问这个类的视图函数</span></span><br><span class="line">	authentication_classes = [MyAuth,]</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 也可以定义所有视图类的认证器</span></span><br></pre></td></tr></table></figure>

<p>认证流程及返回值：</p>
<p>通过调用APIView中的dispatch方法，将原生的request对象就行包装，添加了认证类的对象属性，</p>
<p>然后执行intial方法，调用里面的perform_authentication方法，这个方法将使用request.user来执行认证的具体实现，遍历所有的认证类，然后执行认证。</p>
<p>自定义类需要实现的方法：</p>
<ul>
<li>authenticate</li>
<li>authenticate_header</li>
</ul>
<p>返回值有三种：</p>
<ul>
<li>None</li>
<li>元祖</li>
<li>raise APIException子类的异常</li>
</ul>
<p>​    2.为了给不同的视图类都实现权限的功能，实现自定义的权限，区分局部使用和全局使用的配置</p>
<p>基于用户角色的权限控制</p>
<p>实现自定义权限类的方式：</p>
<p>继承自BasePermission</p>
<ul>
<li>实现 has_permission方法</li>
</ul>
<p>返回值两种：</p>
<ul>
<li>True</li>
<li>False</li>
</ul>
<p>​    3.实现频率组件（根据用户是否认证，设置不同的键，进行频率控制）</p>
<p>​        -  匿名用户  (ip或者代理ip)</p>
<p>​        - 验证过的用户（用户名) </p>
<ol start="4">
<li><p>版本控制（BasicVersioning)  可以局部配置或者全局配置</p>
<ul>
<li><p>通过查询参数自定义版本</p>
<ul>
<li><p><a href="http://localhost:8000/api/user/?version=v1" target="_blank" rel="noopener">http://localhost:8000/api/user/?version=v1</a></p>
</li>
<li><p>可以通过在get请求中添加版本参数来获取版本</p>
</li>
<li><p>继承QueryParameterVersioning</p>
</li>
</ul>
</li>
<li><p>在url中设置版本</p>
<ul>
<li><a href="http://localhost:8000/api/v1/user/" target="_blank" rel="noopener">http://localhost:8000/api/v1/user/</a></li>
<li>使用内置的URLPathVersioning</li>
<li>通过request.version 获取url中的version</li>
<li>通过request.versioning_scheme获取版本类的对象</li>
</ul>
</li>
<li><p>可以反向生成包含版本的url</p>
<ul>
<li>通过reqeust.versioning_scheme.reverse(viewname=’user’, request=request)来得到url</li>
</ul>
</li>
</ul>
</li>
<li><p>解析器(</p>
<p>​    用来做什么？</p>
<ul>
<li><p>对请求过来的数据根据content-type选择合适的解析器解析到request.data)</p>
</li>
<li><p>入口在调用 request.data时，根据content-type选择对应的解析器</p>
</li>
<li></li>
<li><p>当请求体有数据，而请求POST没数据时，发生了什么？</p>
</li>
<li><p>指定解析器（根据不同请求头中的数据进行解析）</p>
</li>
<li><p>content-type: application/json  或者 x-www-form-urlencoded 或者form-data </p>
</li>
<li><p>可以为全局视图配置解析器，或者为单个视图配置解析器</p>
</li>
<li><p>默认支持application/json, x-www-form-urlencoded, form-data</p>
</li>
</ul>
</li>
<li><p>序列化</p>
<ul>
<li><p>请求数据进行验证</p>
<ul>
<li>可以自定义验证出错信息error_messages={‘required’: ‘字段缺失’， ‘blank’: ‘字段不能为空字符串‘}</li>
<li>可以自定义验证字段方法<ul>
<li>def validate_field_name(self, value)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Queryset</code> 进行序列化</p>
<p>基于数据库模型类定义序列化类，继承Serializer 或者ModelSerializer</p>
<ul>
<li><p>自定义显示字段名字通过  source</p>
<ul>
<li>role = serializers.CharField(source=’u_role’)</li>
</ul>
</li>
<li><p>自定义显示字段的方式</p>
<ul>
<li>roles = serializers.SerializerMethodField()</li>
<li>def get_role(self, row):</li>
</ul>
</li>
<li><p>自定序列化连表操作 depth=1  #官方建议 1-10</p>
</li>
<li><p>为某个字段反向生成url</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​    7.分页</p>
<ul>
<li><p>如果数据库有一千万条数据时，后面的分页数据响应越来越慢，如何解决这个问题？</p>
</li>
<li><p>设置每页显示多少条，显示结果</p>
</li>
<li><p>也可以设置基于索引位置，显示多少条  LimitOffPagination</p>
</li>
<li><p>将查询的页码显示为随机数，为了防止查询太对的页数</p>
</li>
</ul>
<p>​    8.路由</p>
<p>​    9.渲染器</p>
<p>​    10. 扩展APIView视图</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/01/20/interview/</url>
    <content><![CDATA[<h2 id="web开发面试题"><a href="#web开发面试题" class="headerlink" title=" web开发面试题 "></a><center> web开发面试题 </center></h2><ol>
<li><p>中间件有几种方法？</p>
<ul>
<li><p>process_request(self, request)</p>
<ul>
<li>django接收到request之后，在未解析url确定运行的view之前</li>
<li>返回值有None, HttpResponse对象</li>
<li>如果返回None,Django继续处理这个request,执行后续的中间件；</li>
<li>如果返回ＨttpResponse,Django不再执行其他的中间件以及视图，立即返回；</li>
</ul>
</li>
<li><p>process_view(self, request, view, <em>args, *</em>kwargs)</p>
<ul>
<li>调用时机是在：django执行完request预处理函数并确定待执行的view之后，但是在view函数实际执行之前</li>
<li>request,是HttpResponse对象，view是要调用的视图函数对象</li>
<li><em>args, *</em>kwargs:传入view的位置参数和关键字参数；</li>
<li>返回None 或者HttpResponse对象</li>
<li>返回None,Ｄjango继续处理这个request,执行后续的中间件，然后调用相应的ｖｉｅｗ;</li>
<li>返回HttpResponse对象，django不再执行任何其他的中间件以及对应的view, 立即返回ＨttpResponse;</li>
</ul>
</li>
<li><p>process_response(self, request, response)</p>
<ul>
<li>调用时机是在django执行ｖｉｅｗ函数并生成response 之后</li>
<li>参数：request是request对象，response是从view中返回的response对象</li>
<li>必须返回　ＨttpResponse对象；</li>
</ul>
</li>
<li><p>process_exception(self, request, exception)</p>
<ul>
<li>调用时机：view函数抛出了一个未捕获的异常调用</li>
<li>参数：exception是view函数抛出的实际的异常对象exception</li>
<li>返回值：None, django使用框架内置的异常处理机制</li>
<li>返回　HttpResponse对象，</li>
</ul>
</li>
<li><p>适用于所有请求批量操作</p>
</li>
</ul>
<p>场景:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 基于角色的权限控制</span><br><span class="line">- 用户认证</span><br><span class="line">- csrf </span><br><span class="line">- session</span><br><span class="line">- 日志记录</span><br><span class="line">- 黑名单</span><br></pre></td></tr></table></figure>
</li>
<li><p>csrf_token 如何实现的？如何避免csrf验证？</p>
</li>
<li><p>谈谈对restful 的理解？</p>
</li>
<li><p>面向对象的理解？</p>
<p>封装 ，继承，多态</p>
<p>封装: 类的封装，实例的封装</p>
<p>继承: 为什么要继承？深度优先（经典类）广度优先（新式类）</p>
</li>
<li><p>django请求的声明周期?</p>
<p>WSGI —&gt;中间件–&gt;路由匹配 —&gt;视图（FBV/CBV)—&gt;响应</p>
</li>
<li><p>常见的请求头，状态码，请求方法</p>
</li>
<li><p>源码流程</p>
</li>
<li><p>mysql 联表查询语句？ 数据量很大的时候，分页如何做？</p>
</li>
<li><p>如何实现跨域？</p>
<ul>
<li>CORS</li>
<li>jsonp</li>
<li>nginx 反向代理</li>
</ul>
</li>
<li><p>djangorestframework提供的功能或者入口在哪里？</p>
<ul>
<li>首先我们自己定义的类视图要继承APIView或者它的子类</li>
<li>APIView 重新实现了dispatch方法</li>
<li>dispatch方法中两个重要的方法：initialize_request 和initial方法</li>
<li>initialize_request()对原始的request进行封装，同时添加了解析器和认证器；</li>
<li>initial方法中实现了版本，执行认证，检查权限和频率访问；</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>restful风格规范</title>
    <url>/2020/01/20/restful%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="restful风格规范"><a href="#restful风格规范" class="headerlink" title=" restful风格规范 "></a><center> restful风格规范 </center></h2><a id="more"></a>

<ol>
<li>协议</li>
<li>域名（url中应该体现api接口)<ul>
<li>放在主域名<a href="https://example.com/api" target="_blank" rel="noopener">https://example.com/api</a></li>
<li>或者使用专有域名<a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>  存在跨域问题</li>
</ul>
</li>
<li>版本   (url中体现版本)</li>
<li>能够提供查询参数接口，过滤返回结果</li>
<li>定义资源的方式尽量使用名词()</li>
<li>响应参数使用json格式</li>
<li>状态码与code结合</li>
<li>错误信息</li>
<li>返回结果，不同的请求，返回不同的结果。</li>
<li>返回结果中最好加上一个超链接</li>
</ol>
<p>、</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>python2.x中json的操作</title>
    <url>/2020/01/20/python2-x%E4%B8%ADjson%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="python2-x中json的操作"><a href="#python2-x中json的操作" class="headerlink" title=" python2.x中json的操作 "></a><center> python2.x中json的操作 </center></h2><a id="more"></a>

<p>json的操作就是将字典转换为json格式的字符串(dump/dumps),也可以将json格式的字符串转换成字典(load/loads).</p>
<ol>
<li>dumps方法(字典转换成json格式的字符串）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   astr = json.dumps(adict)</span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment"># &#123;"a": "123", "c": "json", "b": "\u6d4b\u8bd5"&#125;</span></span><br><span class="line">   astr = json.dumps(adict, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>) <span class="comment">#indent确定缩进，ensure_ascii=False显示中文</span></span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment">#&#123;</span></span><br><span class="line">   	<span class="string">"a"</span>: <span class="string">"123"</span>, </span><br><span class="line">   	<span class="string">"c"</span>: <span class="string">"json"</span>, </span><br><span class="line">   	<span class="string">"b"</span>: <span class="string">"测试"</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">'str.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       f.write(astr.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   <span class="comment"># 可以通过 sudo apt install jq 工具来查看json文件</span></span><br><span class="line">   <span class="comment"># cat str.json|jq</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dump方法作用和上面一样</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   f = open(<span class="string">'str.json'</span>, <span class="string">'w'</span>)</span><br><span class="line">   json.dump(adict, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">   <span class="comment">#不需要write方法就可以写入文件</span></span><br></pre></td></tr></table></figure>

<p>因此，操作文件的时候，使用dump,不需要操作文件的时候，使用dumps.</p>
<ol start="3">
<li>loads方法,将json字符串转换成字典</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   content = f.read()</span><br><span class="line">   data = json.loads(content)</span><br><span class="line">   <span class="comment">###############</span></span><br><span class="line">   f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   data = json.load(f)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>可以通过codecs模块中的open方法指定编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = codecs.open(<span class="string">'str.json'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># python3 中的open方法可以使用encoding参数</span></span><br></pre></td></tr></table></figure>

<p>应用中遇到的问题: 使用Django，通过<code>session.set_expiry(timedelta(days=3))</code> 为<code>session</code> 设置过期时间时，遇到了<code>TypeError: datetime.datetime(2020, 1, 23, 11, 1, 58, 993654) is not JSON serializable</code> 这样的错误，就是因为json默认不支持对<code>datetime</code> 对象的序列化。</p>
<p>首先解决方法:在工程的配置文件 <code>settings</code> 中设置一个属性</p>
<p>`SESSION_SERIALIZER=’django.contrib.sessions.serializers.PickleSerializer’ </p>
<p>如果自定义支持对<code>datetime</code> 的序列化，可以通过下面的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">   adict = &#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'create_time'</span>: datetime.now()&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">DateEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">           <span class="keyword">if</span> isinstance(obj, datetime):</span><br><span class="line">               <span class="keyword">return</span> obj.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> super(DateEncoder, self).default(obj)</span><br><span class="line">    </span><br><span class="line">   print(json.dumps(adict, cls=DateEncoder))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的魔术方法使用</title>
    <url>/2020/01/18/python%E4%B8%AD%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Python中的魔术方法使用"><a href="#Python中的魔术方法使用" class="headerlink" title="Python中的魔术方法使用"></a><center>Python中的魔术方法使用</center></h2><a id="more"></a>
<h3 id="1-getattribute-使用"><a href="#1-getattribute-使用" class="headerlink" title="1. __getattribute__ 使用"></a>1. <code>__getattribute__</code> 使用</h3><p>1.1 新式类使用<code>__getattribute__</code> 这个方法后，无论实例访问类属性，实例属性，方法，还是访问不存在的属性时，都会调用这个方法，而通过类访问属性，方法时，不会调用这个方法</p>
<p>常用于：实现访问属性时执行一段代码的特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     gender = <span class="string">"男"</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">   ...:         self.name = name</span><br><span class="line">   ...:         self.age = age</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"拦截"</span>)</span><br><span class="line">   ...:         <span class="keyword">try</span>:</span><br><span class="line">   ...:             super(Man, self).__getattribute__(attr)</span><br><span class="line">   ...:         <span class="keyword">except</span> AttributeError:</span><br><span class="line">   ...:             print(<span class="string">"have not attribute of %s"</span> % attr)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"hello world"</span>)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: ins = Man(<span class="string">'test'</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: print(Man.gender)</span><br><span class="line">男</span><br><span class="line">＃　类访问不存在的属性不会调用</span><br><span class="line">In [<span class="number">5</span>]: print(Man.name)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-5</span><span class="number">-011</span>ae3c55855&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print(Man.name)</span><br><span class="line"></span><br><span class="line">AttributeError: type object <span class="string">'Man'</span> has no attribute <span class="string">'name'</span></span><br><span class="line">In [<span class="number">6</span>]: print(ins.name)</span><br><span class="line">拦截</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: ins.age</span><br><span class="line">拦截</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: ins.xxx</span><br><span class="line">拦截</span><br><span class="line">have <span class="keyword">not</span> attribute of xxx</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: ins.hello()</span><br><span class="line">拦截</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-6</span>af60b825039&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 ins.hello()</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'NoneType'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<p>总之，通过实例访问的属性，方法都会被拦截，包括<code>self.__dict__</code> ,使用这个方法的唯一安全方式就是覆盖父类的方法。</p>
<p>1.2 如果使用了<code>__getattr__</code> 这个方法，它的执行条件是 <code>__getattribute__</code> 触发了<code>AttributeError</code> 异常后，才会调用这个方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">           self.age = age</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">           <span class="keyword">print</span> <span class="string">'执行__getattr__'</span></span><br><span class="line">       	</span><br><span class="line">    ins = Man(<span class="string">'hello'</span>, <span class="number">20</span>)</span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#执行__getattr__  (父类的__getattribute__触发了AttributeError异常)</span></span><br><span class="line">    当添加了下面的方法后</span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    		<span class="keyword">print</span> <span class="string">'拦截'</span></span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#拦截  (将不会执行__getattr__这个方法，因为__getattribute__覆盖了父类的方法，没有触发异常)</span></span><br></pre></td></tr></table></figure>

<p>1.3 使用<code>__setattr__</code> :任何对实例属性赋值的操作都将调用这个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name <span class="comment">#执行 __setattr__</span></span><br><span class="line">           self.age = age <span class="comment">#执行__setattr__</span></span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">       	<span class="keyword">print</span> <span class="string">'执行__setattr__'</span></span><br><span class="line">       	self.__dict__[key] = val <span class="comment">#这里不能通过self.key = val这种方式进行赋值，否则会进入无限循环</span></span><br><span class="line">       	</span><br><span class="line">   ins = Man(<span class="string">'hello'</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   Man.gender = <span class="string">'女'</span>  <span class="comment">#不会执行__setattr__</span></span><br></pre></td></tr></table></figure>

<h3 id="2-get-与-set"><a href="#2-get-与-set" class="headerlink" title="2. __get__ 与__set__"></a>2. <code>__get__</code> 与<code>__set__</code></h3><p>2.1 <code>__get__</code> 使用:拥有这个方法的类，产生一个实例，同时这个实例是另一个类的类属性，实例属性与这个方法就没有关系了；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBase</span><span class="params">(object)</span>:</span> <span class="comment">#这个类可以称为non-data descriptor</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>)</span><br><span class="line">           print(instance, owner)</span><br><span class="line">     </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestBase()</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (&lt;__main__.TestMain instance at 0x7fd46ba0a200&gt;, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span>  <span class="comment">#通过实例进行赋值</span></span><br><span class="line">       print(t.tes) <span class="comment"># 获得这个值</span></span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes <span class="comment">#访问这个值，将调用__get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7f7ead5e1668&gt;)</span></span><br><span class="line">       <span class="comment"># 通过TestMain赋值</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#通过这种方式赋值，不会调用__get__</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值后，类再访问这个属性，不能获取这个值，调用了<code>__get__</code> </p>
<p>2.2 <code>__get__</code> 和<code>__set__</code> 同时存在的情况下，如何呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSet</span><span class="params">(object)</span>:</span>  <span class="comment">#这个类称为 data descriptor</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>, instance, owner)</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, val)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __set__'</span>, instance, val)</span><br><span class="line">           </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestSet()</span><br><span class="line">	</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff1acb00f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span> <span class="comment"># 调用__set__方法</span></span><br><span class="line">       <span class="comment"># ('enter __set__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, 1)</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#与__get__, __set__无关</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值时，调用<code>__set__</code> ,然后无论通过类还是实例再次获取这个属性时，都将调用<code>__get__</code> </p>
<p><code>__get__</code> 的应用在<code>Django</code> 中的体现是，可以重写<code>@classmethod</code> 实现只能通过类进行访问类方法，而不能通过实例访问类方法：（<code>from django.utils.decorators import classonlymethod</code> )</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装最新版的nodejs</title>
    <url>/2020/01/17/ubuntu16-04%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84nodejs/</url>
    <content><![CDATA[<h2 id="ubuntu16-04安装最新版的nodejs"><a href="#ubuntu16-04安装最新版的nodejs" class="headerlink" title="ubuntu16.04安装最新版的nodejs"></a><center>ubuntu16.04安装最新版的nodejs</center></h2><a id="more"></a>
<p>ubuntu16.04 默认安装了v4.2.6版本的nodejs，为了使用最新版的nodejs，使用一下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>sudo apt update -y</span><br><span class="line"><span class="number">2.</span>sudo apt install nodejs nodejs-legacy npm -y</span><br><span class="line"><span class="number">3.</span>sudo npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="number">4.</span>sudo npm install n -g</span><br><span class="line"><span class="number">5.</span>sudo n stable</span><br></pre></td></tr></table></figure>

<p>遇到的问题：</p>
<p>使用命令<code>n</code> 安装过程非常缓慢，需要修改<code>n</code> 中的 <code>N_NODE_MIRROR</code> ，更改为国内的镜像源</p>
<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> </p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
