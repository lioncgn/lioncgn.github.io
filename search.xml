<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>人的弱点</title>
    <url>/2020/10/08/%E4%BA%BA%E7%9A%84%E5%BC%B1%E7%82%B9/</url>
    <content><![CDATA[<h1 id="伪勤奋的表现"><a href="#伪勤奋的表现" class="headerlink" title="伪勤奋的表现"></a><center>伪勤奋的表现</center></h1><a id="more"></a>

<h2 id="1-花大量的时间做事情中最容易的环节，还到处炫耀"><a href="#1-花大量的时间做事情中最容易的环节，还到处炫耀" class="headerlink" title="1. 花大量的时间做事情中最容易的环节，还到处炫耀"></a>1. 花大量的时间做事情中最容易的环节，还到处炫耀</h2><ul>
<li>没有功劳也有苦劳</li>
</ul>
<h2 id="2-以准备的名义拖延，看上去很忙但事情并没有任何进展"><a href="#2-以准备的名义拖延，看上去很忙但事情并没有任何进展" class="headerlink" title="2. 以准备的名义拖延，看上去很忙但事情并没有任何进展"></a>2. 以准备的名义拖延，看上去很忙但事情并没有任何进展</h2><h2 id="3-从来不检验工作成果，不知道做得好做得坏"><a href="#3-从来不检验工作成果，不知道做得好做得坏" class="headerlink" title="3. 从来不检验工作成果，不知道做得好做得坏"></a>3. 从来不检验工作成果，不知道做得好做得坏</h2><ul>
<li>只顾闷头拉车，不会抬头看天</li>
</ul>
<h2 id="4-读了很多书，但从不总结规律"><a href="#4-读了很多书，但从不总结规律" class="headerlink" title="4. 读了很多书，但从不总结规律"></a>4. 读了很多书，但从不总结规律</h2><ul>
<li>即使总结了规律，也没有用到实践中。</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中Form组件</title>
    <url>/2020/09/14/Django%E4%B8%ADForm%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django中form组件"><a href="#Django中form组件" class="headerlink" title="Django中form组件"></a><center>Django中form组件</center></h1><a id="more"></a>

<h2 id="1-Django中form组件的作用"><a href="#1-Django中form组件的作用" class="headerlink" title="1. Django中form组件的作用"></a>1. Django中form组件的作用</h2><ul>
<li>验证表单中的数据</li>
<li>生成html标签</li>
<li>保留上次提交的值</li>
<li>初始化表单显示内容</li>
</ul>
<h2 id="2-如何使用form"><a href="#2-如何使用form" class="headerlink" title="2. 如何使用form"></a>2. 如何使用form</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> Form, fields</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> Two.models <span class="keyword">import</span> Grade</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = fields.CharField(label=<span class="string">'学生姓名:'</span>, max_length=<span class="number">20</span>,</span><br><span class="line">                            error_messages=&#123;</span><br><span class="line">                                <span class="string">'required'</span>: <span class="string">'学生姓名不能为空'</span>,</span><br><span class="line">                                <span class="string">'max_length'</span>: <span class="string">'学生字段最大长度为20'</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">    age = fields.IntegerField(label=<span class="string">'学生年龄:'</span>, initial=<span class="number">18</span>, min_value=<span class="number">18</span>, max_value=<span class="number">120</span>,</span><br><span class="line">                              error_messages=&#123;</span><br><span class="line">                                  <span class="string">'required'</span>: <span class="string">'学生年龄字段不能为空'</span>,</span><br><span class="line">                                  <span class="string">'min_value'</span>: <span class="string">'最小值为18'</span>,</span><br><span class="line">                                  <span class="string">'max_value'</span>: <span class="string">'最大值为120'</span>,</span><br><span class="line">                                  <span class="string">'invalid'</span>: <span class="string">'字段必须是数字'</span>,<span class="comment"># 数据格式错误的通用写法</span></span><br><span class="line">                              &#125;)</span><br><span class="line">    grade_id = fields.IntegerField(label=<span class="string">'班级:'</span>, widget=widgets.Select(choices=Grade.objects.values_list(<span class="string">'id'</span>, <span class="string">'name'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Field 字段</span></span><br><span class="line">	required=<span class="literal">True</span>  <span class="comment">#字段不能为空</span></span><br><span class="line">    widget=<span class="literal">None</span>    <span class="comment">#生成html使用的插件      </span></span><br><span class="line">    error_messages=<span class="literal">None</span>  <span class="comment">#自定义错误信息</span></span><br><span class="line">    initial=<span class="literal">None</span>         <span class="comment">#初始值   </span></span><br><span class="line">    validators=() <span class="comment">#自定义验证规则</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#下面这些基本不使用，这是当&#123;&#123; form.as_p &#125;&#125;才会用到的字段</span></span><br><span class="line">    label=<span class="literal">None</span>           <span class="comment"># label标签对应的值</span></span><br><span class="line">    help_text=<span class="string">''</span>         <span class="comment"># 生成的html后添加一段帮助信息</span></span><br><span class="line">    show_hidden_initial=<span class="literal">False</span> </span><br><span class="line">    localize=<span class="literal">False</span>   <span class="comment">#本地化</span></span><br><span class="line">    disabled=<span class="literal">False</span>   <span class="comment">#是否可编辑</span></span><br><span class="line">    label_suffix=<span class="literal">None</span> <span class="comment">#标签的后缀 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">CharField(Field)</span><br><span class="line">	max_length = <span class="literal">None</span></span><br><span class="line">    min_length = <span class="literal">None</span></span><br><span class="line">    strip = <span class="literal">True</span>  <span class="comment">#去掉用户输入空白</span></span><br><span class="line">    </span><br><span class="line">IntegerField(Field)</span><br><span class="line">	max_value = <span class="literal">None</span></span><br><span class="line">    min_value = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">DateField(BaseTemporalField)   <span class="comment"># 格式如2016-09-11</span></span><br><span class="line"></span><br><span class="line">RegexField(CharField):</span><br><span class="line">    regex   <span class="comment"># 自定义验证规则</span></span><br><span class="line">    max_length = <span class="literal">None</span></span><br><span class="line">    min_length = <span class="literal">None</span></span><br><span class="line">    error_message = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">EmailField(CharField)</span><br><span class="line"></span><br><span class="line">ImageField(CharField)</span><br><span class="line">	<span class="comment"># 需要PIL模块</span></span><br><span class="line">    <span class="comment"># 注意两点：</span></span><br><span class="line">    	<span class="comment"># 1. form表单中的定义 enctype="multipart/form-data"</span></span><br><span class="line">        <span class="comment"># 2. view函数中， obj = MyForm(request.POST, request.FILES)</span></span><br><span class="line">FileField(Field):</span><br><span class="line">    allow_empty_file = <span class="literal">False</span>  <span class="comment">#是否允许空文件</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">GenericIPAddressField</span><br><span class="line">SlugField(CharField)  <span class="comment"># 数字，字母，下划线，减号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用插件</span></span><br><span class="line">widget = widgets.RaidoSelect(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>))) <span class="comment">#提交到后台的值是1， 2</span></span><br><span class="line">widget = widgets.Select(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)))</span><br><span class="line"><span class="comment">#其他写法</span></span><br><span class="line">fields.CharField(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)), initial=<span class="number">2</span>, widget=widgets.Select)</span><br><span class="line">widget = widgets.MultipleChoiceField(</span><br><span class="line">choices =((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)), initial=[<span class="number">1</span>], widget=widgets.SelectMultiple)</span><br><span class="line"></span><br><span class="line">widget = widgets.CheckboxInput()</span><br><span class="line"></span><br><span class="line">fields.MultipleChoiceField(</span><br><span class="line">initial=[<span class="number">2</span>],</span><br><span class="line">choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)),</span><br><span class="line">widget = widgets.CheckboxSelectMultiple</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用选择标签时，如何实时更新选项中的内容?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = fields.CharField(label=<span class="string">'学生姓名:'</span>, max_length=<span class="number">20</span>,</span><br><span class="line">                            error_messages=&#123;</span><br><span class="line">                                <span class="string">'required'</span>: <span class="string">'学生姓名不能为空'</span>,</span><br><span class="line">                                <span class="string">'max_length'</span>: <span class="string">'学生字段最大长度为20'</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">    age = fields.IntegerField(label=<span class="string">'学生年龄:'</span>, initial=<span class="number">18</span>, min_value=<span class="number">18</span>, max_value=<span class="number">120</span>,</span><br><span class="line">                              error_messages=&#123;</span><br><span class="line">                                  <span class="string">'required'</span>: <span class="string">'学生年龄字段不能为空'</span>,</span><br><span class="line">                                  <span class="string">'min_value'</span>: <span class="string">'最小值为18'</span>,</span><br><span class="line">                                  <span class="string">'max_value'</span>: <span class="string">'最大值为120'</span>,</span><br><span class="line">                                  <span class="string">'invalid'</span>: <span class="string">'字段必须是数字'</span>,</span><br><span class="line">                              &#125;)</span><br><span class="line">    grade_id = fields.ChoiceField(label=<span class="string">'班级:'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(StudentForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[<span class="string">'grade_id'</span>].widget.choices = Grade.objects.values_list(<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-验证表单中的数据"><a href="#3-验证表单中的数据" class="headerlink" title="3. 验证表单中的数据"></a>3. 验证表单中的数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditStudentView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        stu = Student.objects.filter(id=id).values().first()</span><br><span class="line">        print(stu)</span><br><span class="line">        <span class="comment"># form = StudentForm(initial=&#123;'name': stu.name, 'age': stu.age, 'grade_id': stu.grade_id&#125;)</span></span><br><span class="line">        form = StudentForm(initial=stu)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'edit_student.html'</span>, dict(form=form))</span><br><span class="line">        <span class="comment"># return HttpResponse('test')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid(): <span class="comment"># 进行验证表单中的数据</span></span><br><span class="line">            <span class="comment"># 验证通过的数据通过form.cleaned_data获取</span></span><br><span class="line">            Student.objects.filter(id=id).update(**form.cleaned_data)</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">'two:student_list'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'edit_student.html'</span>, dict(form=form))</span><br></pre></td></tr></table></figure>

<h2 id="4-生成HTML标签"><a href="#4-生成HTML标签" class="headerlink" title="4. 生成HTML标签"></a>4. 生成HTML标签</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.name.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.name &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> form.errors.name %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.name %&#125;</span><br><span class="line">            &#123;&#123; error &#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;&#123; form.age.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.age &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> form.errors.age %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.age %&#125;</span><br><span class="line">            &#123;&#123; error &#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;&#123; form.grade_id.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.grade_id &#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交修改"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-保留上次填写的值"><a href="#5-保留上次填写的值" class="headerlink" title="5. 保留上次填写的值"></a>5. 保留上次填写的值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 &#123;&#123; form.age &#125;&#125;&lt;br&gt;  保证有上次填写的值</span></span><br></pre></td></tr></table></figure>

<h2 id="6-初始化表单显示的值"><a href="#6-初始化表单显示的值" class="headerlink" title="6.初始化表单显示的值"></a>6.初始化表单显示的值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grade = Grade.objects.filter(id=id).first()</span><br><span class="line"> <span class="keyword">if</span> grade:</span><br><span class="line">     <span class="comment"># 初始字段的值如果再做校验，使用data参数</span></span><br><span class="line">     <span class="comment"># 如果不做校验，使用initial参数</span></span><br><span class="line">     form = GradeForm(initial=&#123;<span class="string">'name'</span>: grade.name&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-自定义验证规则"><a href="#7-自定义验证规则" class="headerlink" title="7. 自定义验证规则"></a>7. 自定义验证规则</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段中有validators属性使用已有的RegexValidator</span></span><br><span class="line">name = fields.CharField(</span><br><span class="line">        label=<span class="string">'测试'</span>,</span><br><span class="line">        validators= [RegexValidator(<span class="string">r'^\d+$'</span>, <span class="string">'请输入数字'</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mobile_validate</span><span class="params">(value)</span>:</span></span><br><span class="line">    mobile_re = re.compile(<span class="string">r'^(13\d|15\d\|17[6-8]|18\d|14[57])\d&#123;8&#125;$'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mobile_re.match(value):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'手机格式错误'</span>)</span><br><span class="line">        </span><br><span class="line">phone = fields.CharField(validators=[mobile_validate],</span><br><span class="line">                        <span class="comment"># 指定class属性和placeholder 为这个input</span></span><br><span class="line">                        widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;,</span><br><span class="line">                                                 <span class="string">'placeholder'</span>: <span class="string">'手机号码'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="8-使用ajax提交数据"><a href="#8-使用ajax提交数据" class="headerlink" title="8. 使用ajax提交数据"></a>8. 使用ajax提交数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> id=<span class="string">"f1"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="username" value="&#123;&#123; form.data.username &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.username.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="password" name="pwd" value="&#123;&#123; form.data.pwd &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.pwd.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;重复密码:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="password" name="pwd_repeat" value="&#123;&#123; form.data.pwd_repeat &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.pwd_repeat.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; error &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="submit" value="注册" id="submit"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;a onclick="submitForm();"&gt;提交&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src="&#123;% static 'js/jquery.min.js' %&#125;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#123;<span class="comment">#$(function () &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#  $('#submit').click(function (event) &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      event.preventDefault();#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      $.post(&#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          url: '/one/ajax_login/',#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          data: $('#f1').serialize(),#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          success: function (data) &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#              console.log(data);#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          &#125;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      &#125;)#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#  &#125;)#&#125;</span></span><br><span class="line"></span><br><span class="line">    function submitForm() &#123;</span><br><span class="line">        $(<span class="string">'.c1'</span>).remove(); <span class="comment">#先移除之前生成的标签（错误信息）</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'/one/ajax_login/'</span>,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>, <span class="comment">#将返回的数据装变为json对象</span></span><br><span class="line">            data: $(<span class="string">'#f1'</span>).serialize(), <span class="comment"># 将表单中的所有字段进行提交，包括csrf_token</span></span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data.status)&#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">#遍历data.msg #封装了错误信息</span></span><br><span class="line">                    $.each(data.msg, function (index, value) &#123;</span><br><span class="line">                        console.log(index, value);</span><br><span class="line">                        <span class="comment"># 创建&lt;span&gt;标签，指定它的内容</span></span><br><span class="line">                        var tag = $(<span class="string">'&lt;span class="c1"&gt;&lt;/span&gt;'</span>).text(value[<span class="number">0</span>]);</span><br><span class="line">                        console.log(tag);</span><br><span class="line">                        <span class="comment"># 然后将这个标签添加到指定标签的后面</span></span><br><span class="line">                        $(<span class="string">'input[name="'</span> + index + <span class="string">'"]'</span>).after(tag);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 处理ajax请求，并返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    res = &#123;</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'OK'</span>,</span><br><span class="line">        <span class="string">'msg'</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = forms.RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            print(form.cleaned_data)</span><br><span class="line">            res[<span class="string">'msg'</span>] = form.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">            print(type(form.errors))</span><br><span class="line">            res[<span class="string">'status'</span>] = <span class="literal">False</span></span><br><span class="line">            res[<span class="string">'msg'</span>] = form.errors</span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        str_json = json.dumps(res)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(str_json)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中的session</title>
    <url>/2020/09/10/django%E4%B8%AD%E7%9A%84session/</url>
    <content><![CDATA[<h1 id="Django-中的session"><a href="#Django-中的session" class="headerlink" title="Django 中的session"></a><center>Django 中的session</center></h1><a id="more"></a>

<h2 id="1-Django中的session原理"><a href="#1-Django中的session原理" class="headerlink" title="1. Django中的session原理"></a>1. Django中的session原理</h2><p>session是保存在服务器段的数据，用来保持会话，记住登录状态，由于cookie使请求可以携带查询信息，与session配合实现有状态的请求；</p>
<p>实现过程：</p>
<ul>
<li>生成随机字符串</li>
<li>设置cookie发送给客户端</li>
<li>同时在服务器端进行保存，将随机字符串作为session的key</li>
<li>实现过程通过设置就完成上面的操作：request.session[‘user_id’] = user.id</li>
</ul>
<p>当浏览器携带cookie再次进行访问，可以通过cookie找到对应的值进行匹配</p>
<ul>
<li>从cookie中获取值</li>
<li>根据这个值与存储session中的值进行比较，找到就通过</li>
<li>通过request.session.get(‘user_id’) ，找到就通过</li>
</ul>
<h2 id="2-session的默认配置"><a href="#2-session的默认配置" class="headerlink" title="2. session的默认配置"></a>2. session的默认配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cookie name. This can be whatever you want.</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">'sessionid'</span> <span class="comment"># 浏览器中设置的cookie的键名</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">2</span> <span class="comment"># 默认过期时间是14天</span></span><br><span class="line"><span class="comment"># A string like ".example.com", or None for standard domain cookie.</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span></span><br><span class="line"><span class="comment"># Whether the session cookie should be secure (https:// only).</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># The path of the session cookie.</span></span><br><span class="line">SESSION_COOKIE_PATH = <span class="string">'/'</span></span><br><span class="line"><span class="comment"># Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span></span><br><span class="line"><span class="comment"># Whether to save the session data on every request.</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span> <span class="comment">#如果为True,每次请求，将以当前的时间为准更新过期时间</span></span><br><span class="line"><span class="comment"># Whether a user's session cookie expires when the Web browser is closed.</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># The module to store session data</span></span><br><span class="line"><span class="comment"># session存储的位置 django_session表中</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br><span class="line"><span class="comment"># Directory to store session files if using the file session module. If None,</span></span><br><span class="line"><span class="comment"># the backend will use a sensible default.</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span></span><br><span class="line"><span class="comment"># class to serialize session data</span></span><br><span class="line">SESSION_SERIALIZER = <span class="string">'django.contrib.sessions.serializers.JSONSerializer'</span></span><br></pre></td></tr></table></figure>

<h2 id="3-session支持5种存储后端"><a href="#3-session支持5种存储后端" class="headerlink" title="3. session支持5种存储后端"></a>3. session支持5种存储后端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 数据库(默认)</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br><span class="line"><span class="comment"># 2. 缓存</span></span><br><span class="line"><span class="comment"># 一旦过期，redis中的key将自动删除</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'BACKEND': 'django.core.cache.backends.db.DatabaseCache',</span></span><br><span class="line">        <span class="comment"># 'LOCATION': 'test_cache',</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'redis://127.0.0.1:6379/1'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'CLIENT_CLASS'</span>: <span class="string">'django_redis.client.DefaultClient'</span>,</span><br><span class="line">            <span class="string">'PASSWORD'</span>: <span class="string">'test'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 文件</span></span><br><span class="line"><span class="comment"># 默认通过在tempfil.gettempdir() 也就是/tmp目录下创建一个文件（文件名是由sessionid与值组成）</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span></span><br><span class="line"><span class="comment"># Directory to store session files if using the file session module. If None,</span></span><br><span class="line"><span class="comment"># the backend will use a sensible default.</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 缓存+数据库(同时将session存放到缓存和数据库中)</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>	</span><br><span class="line"><span class="comment"># 5. 加密cookie</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span></span><br></pre></td></tr></table></figure>

<h2 id="4-session的操作"><a href="#4-session的操作" class="headerlink" title="4. session的操作"></a>4. session的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据库中过期的session删除，不会将通过文件存储的session删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># session 生成的随机字符串</span></span><br><span class="line">request.session.session_key</span><br><span class="line"><span class="comment"># 删除当前用户数据库中的所有session数据，可以有参数 session_key仅仅对session_key指定的删除</span></span><br><span class="line">request.session.delete()</span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line"><span class="comment"># 可以设置整数，多少秒过期</span></span><br><span class="line"><span class="comment"># 可以设置timedelta，具体的日期</span></span><br></pre></td></tr></table></figure>

<h2 id="5-自动让session过期的思路："><a href="#5-自动让session过期的思路：" class="headerlink" title="5. 自动让session过期的思路："></a>5. 自动让session过期的思路：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过让cookie过期或者删除cookie</span></span><br><span class="line">request.session.flush() <span class="comment"># 通过删除cookie的方式，数据库中的记录存在</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过在数据库中删除session对应的key，或者value都可以完成</span></span><br><span class="line">request.session.clear()  <span class="comment"># 删除session中key对应的值,数据库中的记录还在，只能通过过期的方法进行删除了</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">'user_id'</span>] <span class="comment">#同上</span></span><br></pre></td></tr></table></figure>

<h2 id="6-cookie原理"><a href="#6-cookie原理" class="headerlink" title="6. cookie原理"></a>6. cookie原理</h2><p>客户端浏览器保存的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_cookie(self, key, value=<span class="string">''</span>, max_age=<span class="literal">None</span>, expires=<span class="literal">None</span>, path=<span class="string">'/'</span>,</span><br><span class="line">                   domain=<span class="literal">None</span>, secure=<span class="literal">False</span>, httponly=<span class="literal">False</span>):</span><br><span class="line">set_signed_cookie(self, key, value, salt=<span class="string">''</span>, **kwargs)</span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># key:键名</span></span><br><span class="line"><span class="comment"># value:键值</span></span><br><span class="line"><span class="comment">#max_age: 过期秒</span></span><br><span class="line"><span class="comment"># expires: datetime对象</span></span><br><span class="line"><span class="comment"># path：cookie生效的路径，默认可以被所有URI访问</span></span><br><span class="line"><span class="comment"># domain: 指定哪个域名可以使用，默认当前域名</span></span><br><span class="line"><span class="comment"># secure: 只有通过HTTPS才能使用这个cookie</span></span><br><span class="line"><span class="comment"># httponly: 能否被javascrit访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器端获取cookie</span></span><br><span class="line">request.COOKIES.get(key)</span><br><span class="line">request.get_signed_cookie(key, salt=<span class="string">'vlaue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除cookie</span></span><br><span class="line">response.delete_cookie(key)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中间件</title>
    <url>/2020/09/08/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a><center>Django中间件</center></h1><a id="more"></a>

<h1 id="1-Django中间件"><a href="#1-Django中间件" class="headerlink" title="1. Django中间件"></a>1. Django中间件</h1><p>django就是一个类，然后通过注册的方式进行使用，这个类有一些特殊方法</p>
<p>应用：对所有请求或者部分请求做批量化操作；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'my process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_view'</span>)</span><br><span class="line">        print(callback, callback_args, callback_kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_exception '</span>)</span><br><span class="line">        print(exception)</span><br><span class="line">	<span class="comment"># 当访问的URI 返回的对象有render方法，那么将在执行render方法之前，会调用这个方法，然后执行render方法；</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_template_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, req)</span>:</span></span><br><span class="line">        self.req = req</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(self.req, <span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'test view func'</span>)</span><br><span class="line">    <span class="comment"># raise TypeError('test')</span></span><br><span class="line">    obj = Test(request)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'my process_reqeust 2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_response 222'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_view 222'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_exception 222'</span>)</span><br><span class="line">        print(exception)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#setting.py进行注册使用         </span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'One.views.MyMiddleware'</span>,</span><br><span class="line">    <span class="string">'One.views.MyMiddleware2'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行顺序:当请求到来的时候，先执行所有中间件中的process_request,如果process_request有返回值，那么将直接停止向下执行，从当前的中间件开始从下到上，执行所有中间件的process_response返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># process_resposne必须有返回值</span></span><br><span class="line"><span class="comment"># 如果process_request没有返回值，那么执行顺序如下：</span></span><br><span class="line"><span class="comment">#从上到下 执行所有中间件的process_request, 如果有process_view,那么再从上到下执行所有中间件的process_view,接着执行当前URI对应的视图函数，如果没有process_exception，那么将返回响应，从下到上执行所有中间件的process_response</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在执行过程中出现异常，而中间件的执行顺序将如下：</span></span><br><span class="line"><span class="comment"># 如果中间件有process_exception,那么将从下到上开始执行所有中间件的process_exception,接着再从下到上执行所有中间件的process_response;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django缓存</title>
    <url>/2020/09/08/django%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Django缓存框架"><a href="#Django缓存框架" class="headerlink" title="Django缓存框架"></a><center>Django缓存框架</center></h1><a id="more"></a>

<h2 id="1-Django官方文档位置-django缓存"><a href="#1-Django官方文档位置-django缓存" class="headerlink" title="1. Django官方文档位置 django缓存"></a>1. Django官方文档位置 <a href="https://docs.djangoproject.com/en/3.1/topics/cache/" target="_blank" rel="noopener">django缓存</a></h2><h2 id="2-Django提供的内置缓存后端"><a href="#2-Django提供的内置缓存后端" class="headerlink" title="2. Django提供的内置缓存后端"></a>2. Django提供的内置缓存后端</h2><ul>
<li>database cache</li>
<li>filesystem cache</li>
<li>dummy cache</li>
<li>memcache </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用数据库缓存</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.db.DatabaseCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'test_cache'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立缓存表</span></span><br><span class="line">python manage.py createcachetable test_cache --dry-run <span class="comment">#查看建表语句</span></span><br><span class="line">python manage.py createcachetable test_cache  <span class="comment"># 创建缓存表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存使用</span></span><br><span class="line"><span class="comment"># 针对视图函数的使用</span></span><br><span class="line"><span class="comment"># timeout位置参数，时间s</span></span><br><span class="line"><span class="comment"># cache缓存后端，默认值 default</span></span><br><span class="line"><span class="comment"># key_prefix: 缓存key前缀</span></span><br><span class="line"><span class="meta">@cache_page(timeout, cache=default, key_prefix=None)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存某个key的使用</span></span><br><span class="line">value = cache.get(<span class="string">'key'</span>)</span><br><span class="line"><span class="keyword">if</span> value:</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cache.set(<span class="string">'key'</span>, <span class="string">'hello, world'</span>, timeout=DEFAULT_TIMEOUT, version=<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">cache.add(<span class="string">'test_key'</span>, <span class="string">'new value'</span>) </span><br><span class="line"><span class="comment"># 当test_key不存在，添加这个key,返回True,</span></span><br><span class="line"><span class="comment"># 当test_key存在，返回False,不会添加或者修改已存在的test_key</span></span><br><span class="line">cache.get_many</span><br><span class="line">cache.set_many</span><br><span class="line">cache.delete(key, version=<span class="literal">None</span>) <span class="comment"># 删除指定的key，返回None,当key不存在，也返回None</span></span><br><span class="line">cache.delete_many()</span><br><span class="line">cache.clear() <span class="comment"># 删除所有key</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Django使用第三方-django-redis-作为缓存后端"><a href="#3-Django使用第三方-django-redis-作为缓存后端" class="headerlink" title="3. Django使用第三方 django-redis 作为缓存后端"></a>3. Django使用第三方 django-redis 作为缓存后端</h2><p> 查看<a href="https://github.com/jazzband/django-redis/blob/master/CHANGES.rst" target="_blank" rel="noopener">django-redis各个版本的改变</a>，找到适合Django版本的django-redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 django-redis为了支持 django1.11版本的使用，使用4.8.0版本</span></span><br><span class="line"><span class="comment"># 最新的django-redis 至少需要 django 2.2</span></span><br><span class="line"> pipenv install django-redis==<span class="number">4.8</span><span class="number">.0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'BACKEND': 'django.core.cache.backends.db.DatabaseCache',</span></span><br><span class="line">        <span class="comment"># 'LOCATION': 'test_cache',</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'redis://127.0.0.1:6379/1'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'CLIENT_CLASS'</span>: <span class="string">'django_redis.client.DefaultClient'</span>,</span><br><span class="line">            <span class="string">'PASSWORD'</span>: <span class="string">'test'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他的不需要改变，</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中csrf使用</title>
    <url>/2020/08/29/django%E4%B8%ADcsrf%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="django中csrf使用"><a href="#django中csrf使用" class="headerlink" title="django中csrf使用"></a><center>django中csrf使用</center></h1><a id="more"></a>

<h2 id="1-在视图函数中使用"><a href="#1-在视图函数中使用" class="headerlink" title="1. 在视图函数中使用"></a>1. 在视图函数中使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @csrf_exempt  # 跳过csrf验证</span></span><br><span class="line"><span class="meta">@csrf_protect   # 开启csrf验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_form</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'use_form.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        print(username, password)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post success'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-在类视图中使用"><a href="#2-在类视图中使用" class="headerlink" title="2. 在类视图中使用"></a>2. 在类视图中使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt, csrf_protect</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt, name='dispatch') #跳过csrf验证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        print(username, pwd)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post success'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-使用ajax请求时，如何保证csrf"><a href="#3-使用ajax请求时，如何保证csrf" class="headerlink" title="3. 使用ajax请求时，如何保证csrf"></a>3. 使用ajax请求时，如何保证csrf</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 作为ajax的请求数据提交请求</span></span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(<span class="string">"#submit"</span>).click(function (event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            var csrf_token = $(<span class="string">'input[name=csrfmiddlewaretoken]'</span>).val();</span><br><span class="line">            var user = $(<span class="string">'input[name=user]'</span>).val();</span><br><span class="line">            var pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="string">'url'</span>: <span class="string">'&#123;% url '</span>use_class<span class="string">' %&#125;'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">"POST"</span>,</span><br><span class="line">                <span class="string">'data'</span>: &#123;</span><br><span class="line">                    <span class="string">'user'</span>: user,</span><br><span class="line">                    <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                    <span class="string">'csrfmiddlewaretoken'</span>: csrf_token,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'success'</span>: function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在请求头中添加，第二种方式</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(<span class="string">'#submit'</span>).click(function (event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            var cookie = $.cookie(<span class="string">'csrftoken'</span>);</span><br><span class="line">            var user = $(<span class="string">'input[name=user]'</span>).val();</span><br><span class="line">            var pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'&#123;% url '</span>use_class<span class="string">' %&#125;'</span>,</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    <span class="string">'X-CSRFToken'</span>: cookie,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    <span class="string">'user'</span>: user,</span><br><span class="line">                    <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'success'</span>: function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'error'</span>: function (e) &#123;</span><br><span class="line">                    console.log(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="4-原理同flask相同"><a href="#4-原理同flask相同" class="headerlink" title="4. 原理同flask相同"></a>4. 原理同flask相同</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过在表单中添加&#123;% csrf_token %&#125;</span><br><span class="line">设置键为csrftoken的cookie;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中分页使用</title>
    <url>/2020/08/29/django%E4%B8%AD%E5%88%86%E9%A1%B5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="django中分页"><a href="#django中分页" class="headerlink" title="django中分页"></a><center>django中分页</center></h1><a id="more"></a>

<h2 id="1-django内置分页"><a href="#1-django内置分页" class="headerlink" title="1. django内置分页"></a>1. django内置分页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">        page_num = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">        article = Article.objects.all()</span><br><span class="line">        paginator = Paginator(article, <span class="number">10</span>)</span><br><span class="line">    <span class="comment"># per_page 每也显示的数据个数</span></span><br><span class="line">    <span class="comment"># count: 数据总数</span></span><br><span class="line">    <span class="comment"># num_pages: 总页数</span></span><br><span class="line">    <span class="comment"># page_range :页数的范围</span></span><br><span class="line">        print(<span class="string">'paginator.per_page is &#123;&#125;'</span>.format(paginator.per_page))</span><br><span class="line">        print(<span class="string">'paginator.count is &#123;&#125;'</span>.format(paginator.count))</span><br><span class="line">        print(<span class="string">'paginator.num_pages is &#123;&#125;'</span>.format(paginator.num_pages))</span><br><span class="line">        print(<span class="string">'paginator.page_range is &#123;&#125;'</span>.format(paginator.page_range))</span><br><span class="line">        page = paginator.page(page_num)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        page = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        page = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'articles.html'</span>, dict(page=page))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> article <span class="keyword">in</span> page.object_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; article.id &#125;&#125; &#123;&#123; article.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> page.has_previous %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page.previous_page_number &#125;&#125;"&gt;上一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> page_number <span class="keyword">in</span> page.paginator.page_range %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page_number &#125;&#125;"&gt;&#123;&#123; page_number &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> page.has_next %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page.next_page_number &#125;&#125;"&gt;下一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以实现诸如上一页，下一页的功能，或者列出所有页码</span></span><br></pre></td></tr></table></figure>



<h2 id="2-自定义分页实现"><a href="#2-自定义分页实现" class="headerlink" title="2. 自定义分页实现"></a>2. 自定义分页实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每页展示固定页数的分页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageInfo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page, per_page, total_count, display_page=<span class="number">11</span>)</span>:</span></span><br><span class="line">        <span class="comment"># page表示当前页, 防止出现无效字符串，负数页码</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.current_page = int(page)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">0</span>:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># per_page 表示每页的数量</span></span><br><span class="line">        self.per_page = per_page</span><br><span class="line">        <span class="comment"># total_count表示总的数据量</span></span><br><span class="line">        self.total_count = total_count</span><br><span class="line">        <span class="comment"># total_page 表示总页数</span></span><br><span class="line">        self.total_page = <span class="number">0</span></span><br><span class="line">        <span class="comment"># display_page 表示要显示的页数量</span></span><br><span class="line">        self.display_page = display_page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据索引的开始位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page</span><br><span class="line">    <span class="comment"># 数据结束的结束位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page</span><br><span class="line">    <span class="comment"># 计算数据的总页数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pages</span><span class="params">(self)</span>:</span></span><br><span class="line">        a, b = divmod(self.total_count, self.per_page)</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            self.total_page = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.total_page = a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.total_page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以当前页为准，总共要显示的页码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        half_page = (self.display_page - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        start_page = self.current_page - half_page</span><br><span class="line">        end_page = self.current_page + half_page + <span class="number">1</span></span><br><span class="line">        total_page = self.pages()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_page &lt; self.display_page:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = total_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.current_page &lt;= half_page:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = self.display_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.current_page &gt;= (total_page - half_page):</span><br><span class="line">            start_page = total_page + <span class="number">1</span> - self.display_page</span><br><span class="line">            end_page = total_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> range(start_page, end_page)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_prev_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page - <span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_next_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page + <span class="number">1</span> &lt;= self.pages()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中的级联操作</title>
    <url>/2020/08/23/django%E4%B8%AD%E7%9A%84%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Django中的级联操作"><a href="#Django中的级联操作" class="headerlink" title="Django中的级联操作"></a><center>Django中的级联操作</center></h1><a id="more"></a>

<h2 id="1-一对一关系中的建立及默认级联操作"><a href="#1-一对一关系中的建立及默认级联操作" class="headerlink" title="1. 一对一关系中的建立及默认级联操作"></a>1. 一对一关系中的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Capital</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">40</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># c_country = models.OneToOneField(Country, null=True, on_delete=models.SET(9))</span></span><br><span class="line">    c_country = models.OneToOneField(Country, null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实现一对一关系原理：</span></span><br><span class="line"><span class="comment"># 建立外键c_country_id，同时加上unique约束；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认级联操作： on_delete默认值是models.CASCADE,当主表数据删除时，与主表有关联的从表数据也一同删除；</span></span><br><span class="line"><span class="comment">#其他级联操作有：</span></span><br><span class="line"><span class="comment"># on_delete:models.PROTECT ,设置受保护，当主表数据删除时，一旦存在有关联的从表数据，那么将受到保护，不会删除，同时报错；</span></span><br><span class="line"><span class="comment"># on_delete: models.DO_NOTHING，当主表数据删除，一旦有关联的从表数据，那么将报错IntegrityError，因为存在外键约束；</span></span><br><span class="line"><span class="comment"># on_delete: models.set_NULL, 当主表数据删除，一旦有关联的从表数据，那么将设置为NULL(前提是可以为NULL,否则也会报错)</span></span><br><span class="line"><span class="comment"># on_delete: models.set_DEFAULT，当主表数据删除，一旦有关联的从表数据，那么将设置为此字段的default值（前提是有default约束，否则也报错）</span></span><br><span class="line"><span class="comment"># on_delete: models.set(value),设置为一个值，主表数据删除，一旦有关联的从表数据时，那么将设置为value值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于一对一关系来说，通过级联数据的获取：</span></span><br><span class="line"><span class="comment"># 通过主表对象获取从表对象：  主表object.从表表名(隐性属性，相当于flask中的backref)</span></span><br><span class="line"><span class="comment"># 通过从表对象获取主表对象：  从表object.级联字段(显性属性，默认根据此字段生成外键id(c_country_id))</span></span><br></pre></td></tr></table></figure>

<h2 id="2-一对多关系中的建立及默认级联操作"><a href="#2-一对多关系中的建立及默认级联操作" class="headerlink" title="2. 一对多关系中的建立及默认级联操作"></a>2. 一对多关系中的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_title = models.CharField(max_length=<span class="number">50</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 创建时间（当object.save(),此字段值将自动添加）</span></span><br><span class="line">    ctime = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 修改时间（当object.save(),此字段值将自动添加，修改的时候，自动将当前时间时间修改此字段）</span></span><br><span class="line">    atime = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    a_author = models.ForeignKey(Author)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一对多关系来说，默认的级联行为也是 models.CASCADE</span></span><br><span class="line"><span class="comment"># 其他关系同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过级联关系字段，获取关联的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过主表对象获取从表对象：  object.从表名_set.all()  (关系属性是隐性属性)</span></span><br><span class="line"><span class="comment"># 从表名_set 是 RelatedManager类实例；</span></span><br><span class="line"><span class="comment">#通过从表对象获取主表对象：  object.级联字段(显性属性，默认将使用此字段生成外键id)</span></span><br></pre></td></tr></table></figure>

<h2 id="3-多对多关系的建立及默认级联操作"><a href="#3-多对多关系的建立及默认级联操作" class="headerlink" title="3. 多对多关系的建立及默认级联操作"></a>3. 多对多关系的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 这个字段一方面用来作为第三张表的一部分，一方面还可以作为连表属性使用，表示teacher对象的学生记录</span></span><br><span class="line">    t_student= models.ManyToManyField(Student)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#实现方式，根据t_student作为第三张关联表的一部分存在，第三张关联表中自动将 两个外键字段作为联合唯一约束来实现；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认级联行为也是 CASCADE</span></span><br><span class="line"><span class="comment"># 通过级联关系字段，获取关联的对象：</span></span><br><span class="line"><span class="comment"># 主表获取从表： 依然是通过隐性属性表_set 来操作：</span></span><br><span class="line"><span class="comment"># 在多对多关系中，只有通过内置的多对多关系才能通过add 建立关系；</span></span><br><span class="line">teacher = Teacher.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">student.teacher_set.add(<span class="number">1</span>)  建立联系，<span class="comment"># 可以是多个参数add(1, 2, 3)</span></span><br><span class="line">student.teacher_set.add(teacher) 建立联系</span><br><span class="line"><span class="comment"># 如果想重置多个关系对象，使用set，参数必须是列表或者元祖</span></span><br><span class="line"> student.teacher_set.set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 这将以前的关系全部删除，然后设置新的关系</span></span><br><span class="line"><span class="comment"># 也可以通过对象 student.teacher_set.set((obj1, obj2, obj3))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除关系 通过 student.teacher_set.remove(1) 或者student.teacher_set.remove(teacher) 直接在数据库中生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部移除通过 student.teacher_set.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从表获取主表数据：</span></span><br><span class="line">teacher = Teacher.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line"><span class="comment"># 方法和主获取从的方式一模一样</span></span><br><span class="line">teacher.t_student.add()</span><br><span class="line">teacher.t_student.remove()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># values('id', 's_name')   获取查询字典的列表</span></span><br><span class="line"><span class="comment"># values_list('id', 's_name') 获取查询元祖的列表</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 另外可以通过自定义的方式定义多对多，自定义多对多关系，不能通过add建立关系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher_Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t = models.ForeignKey(Teacher)  <span class="comment"># 加不加引号都可以</span></span><br><span class="line">    s = models.ForeignKey(<span class="string">'Student'</span>)</span><br><span class="line">    <span class="comment"># 自定义 联合唯一约束</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        unique_together = [</span><br><span class="line">            (<span class="string">'t'</span>, <span class="string">'s'</span>)</span><br><span class="line">        ]</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_students</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#第一种实现方案，低效，每次都要进行连表查询</span></span><br><span class="line">    teacher = Teacher.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line">    students = teacher.teacher_student_set.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> students:</span><br><span class="line">        print(item.s.s_name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'get students'</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#还可以通过</span></span><br><span class="line">    student_list = Teacher_Student.objects.filter(s__s_name=<span class="string">'test2'</span>).values(<span class="string">'s__s_name'</span>, <span class="string">'t__t_name'</span>)</span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> student_list:</span><br><span class="line">        print(student[s__s_name], student[t__t_name])</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 也可以通过进行查询：</span></span><br><span class="line">    student_list = Teacher_Student.objects.filter(s__s_name=<span class="string">'test2'</span>).select_related(<span class="string">'t'</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多和多对多的使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title  = models.CharField(<span class="string">'标题'</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    category = models.ForeignKey(Category, verbose_name=<span class="string">'分类'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    tags = models.ManyToManyField(<span class="string">'Tag'</span>, verbose_name=<span class="string">'标签集合'</span>)</span><br><span class="line">    author = models.ForeignKey(Author, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询所有文章对应的标签，分类，以及作者信息如何实现？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_articles</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 为了减少sql查询次数，减低响应时间，可以通过select_related 或者prefetch_related来实现</span></span><br><span class="line"><span class="comment"># select_related() 可以为空，或者可选的一个或者多个外键字段，不能对多对多字段使用；</span></span><br><span class="line"><span class="comment"># prefetch_related() 可以作用于外键或者多对多的字段</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查询id=3的文章对应的信息及分类和标签信息</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.filter(id=3).select_related('category').prefetch_related('tags')</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查询分类为category3下的所有文章信息及标签信息，</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.filter(category__c_name='category3').prefetch_related('tags')</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询分类为category3下的所有文章信息，同时标签是以tag开头的标签</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.all().filter(category__c_name='category3').prefetch_related(</span></span><br><span class="line">    <span class="comment">#     Prefetch('tags', queryset=Tag.objects.filter(t_name__startswith='tag')),</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line"><span class="comment"># 查询所有文章对应的分类，作者及其标签信息    </span></span><br><span class="line">    <span class="comment"># articles = Article.objects.select_related('category', 'author').prefetch_related('tags')</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.select_related('category').prefetch_related('author')</span></span><br><span class="line">    articles = Article.objects.select_related(<span class="string">'category'</span>).select_related(<span class="string">'author'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'articles.html'</span>, dict(articles=articles))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对多关系 的第三种用法（借助内置ManyToManyField来实现自定义第三张表）</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 注意这里字段的书写顺序(先写Teacher表的外键，否则报错)</span></span><br><span class="line">    <span class="comment"># 通过使用students这个多对多字段，可以轻易实现查询和删除操作(也只能这样使用)</span></span><br><span class="line">    <span class="comment"># 不支持add,set,remove, 只能通过all,filter..clear</span></span><br><span class="line">    students = models.ManyToManyField(<span class="string">'Student'</span>, through=<span class="string">'Teacher_Student'</span>, through_fields=(<span class="string">'t'</span>, <span class="string">'s'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    teachers = models.ManyToManyField(<span class="string">'Teacher'</span>, through=<span class="string">'Teacher_Student'</span>, through_fields=(<span class="string">'s'</span>, <span class="string">'t'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher_Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t = models.ForeignKey(Teacher)</span><br><span class="line">    s = models.ForeignKey(<span class="string">'Student'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        unique_together = [</span><br><span class="line">            (<span class="string">'t'</span>, <span class="string">'s'</span>)</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line"><span class="comment"># 查询所有学生，同时和他们的老师名字信息等</span></span><br><span class="line"></span><br><span class="line">    student_list = Student.objects.prefetch_related(<span class="string">'teachers'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request, 'student.html', dict(teacher_list=teacher_list))</span></span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">'student.html'</span>, dict(student_list=student_list))</span><br><span class="line"><span class="comment"># student.html文件如下：</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> student <span class="keyword">in</span> student_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; student.s_name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> teacher <span class="keyword">in</span> student.teachers.all %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; teacher.t_name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有老师，以及所教的所有学生，和上面的类似；</span></span><br></pre></td></tr></table></figure>

<h2 id="4-一对多关系的建立"><a href="#4-一对多关系的建立" class="headerlink" title="4. 一对多关系的建立"></a>4. 一对多关系的建立</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 使用related_name代替隐性属性article_set 来查询</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">'Author'</span>, related_name=<span class="string">'articles'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在一对多关系中，不能通过add方法建立关系</span></span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">        article.author_id = random.randint(<span class="number">1</span>, counts)</span><br><span class="line">        article.save()</span><br></pre></td></tr></table></figure>

<h2 id="5-extra使用"><a href="#5-extra使用" class="headerlink" title="5. extra使用"></a>5. extra使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中，where表示添加额外的查询条件，这个条件就是原生的sql语句，params是where的实际参数</span></span><br><span class="line"><span class="comment"># 其中 select表示添加额外的查询字段，select_params是select的实际参数</span></span><br><span class="line"><span class="comment"># order_by 添加排序字段</span></span><br><span class="line"></span><br><span class="line">articles = Article.objects.extra(</span><br><span class="line">        where=[<span class="string">"id=%s or id=%s"</span>],</span><br><span class="line">        params=[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        select=&#123;<span class="string">'counts'</span>: <span class="string">'select count(1) from One_article where id &gt; %s'</span>&#125;,</span><br><span class="line">        select_params=[<span class="number">1</span>],</span><br><span class="line">        order_by=[<span class="string">'-id'</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        print(article.title, article.counts)</span><br></pre></td></tr></table></figure>

<h2 id="6-F-与Q"><a href="#6-F-与Q" class="headerlink" title="6. F 与Q"></a>6. F 与Q</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F, Q</span><br><span class="line"><span class="comment">#F用于引用表中的字段，更新时，获取原来的值</span></span><br><span class="line"></span><br><span class="line">Author.objects.all().update(age=F(<span class="string">"age"</span>) + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># Q 用来做复杂的逻辑运算</span></span><br><span class="line">articles = Article.objects.filter(Q(id=<span class="number">1</span>) | Q(title=<span class="string">'test7'</span>))</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"></span><br><span class="line">    q1 = Q()</span><br><span class="line">    q1.connector = <span class="string">'OR'</span></span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">    q2 = Q()</span><br><span class="line">    q2.connector = <span class="string">'AND'</span></span><br><span class="line">    q2.children.append((<span class="string">'author_id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    con = Q()</span><br><span class="line">    con.add(q1, <span class="string">'AND'</span>)</span><br><span class="line">    con.add(q2, <span class="string">'AND'</span>)</span><br><span class="line"></span><br><span class="line">    articles = Article.objects.filter(con)</span><br></pre></td></tr></table></figure>

<h2 id="7-自关联如何定义和使用"><a href="#7-自关联如何定义和使用" class="headerlink" title="7. 自关联如何定义和使用"></a>7. 自关联如何定义和使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于一对多关系 定义 自关联</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 评论的内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 评论的作者</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">'User'</span>)</span><br><span class="line">    <span class="comment"># 评论对应的文章</span></span><br><span class="line">    article = models.ForeignKey(<span class="string">'Article'</span>)</span><br><span class="line">    <span class="comment"># 评论对应的回复</span></span><br><span class="line">    comment = models.ForeignKey(<span class="string">'Comment'</span>, related_name=<span class="string">'replies'</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立关系 comment1的回复是comment2</span></span><br><span class="line">comment1 = Comment.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">comment2 = Comment.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">comment2.comment = comment1</span><br><span class="line">comment2.save()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 查询评论对应的所有回复</span></span><br><span class="line">comment = Comemnt.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">reply_list = comment.replies.all()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对于多对多关系定义自关联</span></span><br><span class="line"><span class="comment"># 第一种，通过自定义的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">20</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'女'</span>)</span><br><span class="line">    )</span><br><span class="line">    gender = models.BooleanField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U2U</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    boy = models.ForeignKey(<span class="string">'User'</span>, related_name=<span class="string">'girls'</span>)</span><br><span class="line">    girl = models.ForeignKey(<span class="string">'User'</span>, related_name=<span class="string">'boys'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立多对多关系</span></span><br><span class="line">U2U.objects.create(boy_id=user_id, girl_id=id) <span class="comment">#第一种通过id</span></span><br><span class="line">U2U.objects.create(boy=boy_obj, girl=girl_obj) <span class="comment">#第二种通过obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">    <span class="keyword">if</span> gender: <span class="comment"># 如果是女生,查询对应的男生有哪些</span></span><br><span class="line">        user_list = user.boys.all()  <span class="comment"># 返回的是 U2Ud的QuerySet</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment"># 如果是男生，查询对应的女生有哪些</span></span><br><span class="line">        user_list = user.girls.all()</span><br><span class="line"><span class="comment"># 在对应的模板文件中遍历对应的元素</span></span><br><span class="line">    &#123;% <span class="keyword">for</span> user <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">        &#123;% <span class="keyword">if</span> request.session.user_info.user_gender %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; user.boy.username &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; user.girl.username &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;h2&gt;暂时没有&lt;/h2&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">#第二种方式使用内置的ManyToMany来建立</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">20</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'女'</span>)</span><br><span class="line">    )</span><br><span class="line">    gender = models.BooleanField(choices=gender_choices)</span><br><span class="line">    m = models.ManyToManyField(<span class="string">'User'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立关系</span></span><br><span class="line">    user = User.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">    girl1 = User.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">    girl2 = User.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line">    girl3 = User.objects.filter(id=<span class="number">4</span>).first()</span><br><span class="line">    user.m.add(girl1)</span><br><span class="line">    user.m.add(girl2)</span><br><span class="line">    girl3.user_set.add(user)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">    girls = user.m.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> girls:</span><br><span class="line">        print(item.username)</span><br><span class="line">    boys = girl1.user_set.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> boys:</span><br><span class="line">        print(item.username)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_restful使用</title>
    <url>/2020/08/22/flask-restful%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Flask-restful使用"><a href="#Flask-restful使用" class="headerlink" title="Flask_restful使用"></a><center>Flask_restful使用</center></h1><a id="more"></a>

<h2 id="1-Rest-API规范是什么，在falsk中究竟如何实现？"><a href="#1-Rest-API规范是什么，在falsk中究竟如何实现？" class="headerlink" title="1. Rest API规范是什么，在falsk中究竟如何实现？"></a>1. Rest API规范是什么，在falsk中究竟如何实现？</h2><h2 id="2-flask中如何基于蓝图来实现rest-api"><a href="#2-flask中如何基于蓝图来实现rest-api" class="headerlink" title="2. flask中如何基于蓝图来实现rest api"></a>2. flask中如何基于蓝图来实现rest api</h2><h2 id="3-flask-restful如何对请求的数据进行类型检查？"><a href="#3-flask-restful如何对请求的数据进行类型检查？" class="headerlink" title="3. flask restful如何对请求的数据进行类型检查？"></a>3. flask restful如何对请求的数据进行类型检查？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用url定义资源，一般会将api作为url前缀或者将api加入主机名中，作为子域名；</span><br><span class="line"><span class="comment"># http://example.com/api  url前缀</span></span><br><span class="line"><span class="comment"># http://api.example.com  子域名</span></span><br><span class="line"><span class="number">2.</span>使用http方法描述操作</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取资源集合或者集合中某个元素，使用get方法，返回响应： 资源的表现层，200响应</span></span><br><span class="line"><span class="comment"># 集合中创建一个新成员，使用post方法，返回的响应是：指向新地址的表现层，首部Location字段为指向资源的url,201响应</span></span><br><span class="line"><span class="comment"># put方法： 更新某个资源，提供完整的资源数据，返回响应：空数据，204响应</span></span><br><span class="line"><span class="comment"># patch方法： 更新某个资源，只提供更新部分的数据，返回响应：空数据，204响应（No Content)</span></span><br><span class="line"><span class="comment"># delete方法：删除某个资源，(请求被接收，删除操作未执行，返回202（Accepted)响应；删除操作已经执行，返回204响应；删除操作已经执行，返回包含状态信息的表现层，返回200响应；</span></span><br><span class="line"><span class="number">3.</span>使用json交换数据</span><br><span class="line"><span class="number">4.</span>设置api版本</span><br><span class="line"><span class="comment"># 可以通过添加url前缀或者直接使用子域名来实现</span></span><br><span class="line"><span class="comment"># http://example.com/v1</span></span><br><span class="line"><span class="comment"># http://example.com/v2</span></span><br><span class="line"><span class="comment"># http://v1.example.com</span></span><br><span class="line"><span class="comment"># http://v2.example.com</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中使用signal</title>
    <url>/2020/08/21/signal/</url>
    <content><![CDATA[<h1 id="Flask中如何使用信号"><a href="#Flask中如何使用信号" class="headerlink" title="Flask中如何使用信号"></a><center>Flask中如何使用信号</center></h1><a id="more"></a>
<h2 id="1-自定义信号"><a href="#1-自定义信号" class="headerlink" title="1. 自定义信号"></a>1. 自定义信号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义信号：</span></span><br><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line">namespace = Namespace()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个信号</span></span><br><span class="line">test_signal = namespace.signal(<span class="string">'test_signal'</span>）</span><br><span class="line">                               </span><br><span class="line"><span class="comment"># 定义信号处理函数（至少一个位置参数sender),根据发送信号函数传入的参数来决定是否带参数，不确定的话，使用**kwargs来接收任意多个参数）                              </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_start</span><span class="params">(sender, access_log)</span>:</span> <span class="comment"># 参数名和发送函数的参数名要一致</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'access.log'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(access_log + <span class="string">'\n'</span>)</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 订阅一个信号</span></span><br><span class="line">test_signal.connect(request_start)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送信号 </span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    log_str = access_log(index.__name__)</span><br><span class="line">    test_signal.send(<span class="string">'test'</span>, access_log=log_str)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>

<h2 id="2-flask内置信号使用"><a href="#2-flask内置信号使用" class="headerlink" title="2. flask内置信号使用"></a>2. flask内置信号使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered, before_render_template, got_request_exception</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_template_rendered</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    print(<span class="string">'template rendered'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_before_render</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    print(<span class="string">'before render'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r_exc_log</span><span class="params">(sender, *args, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">template_rendered.connect(test_template_rendered) <span class="comment"># 当模板渲染完成后将触发这里的信号</span></span><br><span class="line">before_render_template.connect(test_before_render)<span class="comment"># 当模板渲染之前触发</span></span><br><span class="line">got_request_exception.connect(r_exc_log)<span class="comment"># 在请求过程中抛出异常触发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/render')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_render</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/error')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_error</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">raise</span> TypeError</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>signal</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中的csrf原理</title>
    <url>/2020/08/21/flask%E4%B8%AD%E7%9A%84csrf%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask中的csrf防御"><a href="#Flask中的csrf防御" class="headerlink" title=" Flask中的csrf防御"></a><center> Flask中的csrf防御</center></h1><a id="more"></a>

<p><strong>三种方式来实现csrf中的防御</strong></p>
<p><strong>为了应对CSRF攻击，当需要创建，修改，删除数据时，需要将这类请求通过<code>post</code>方法提交，同时在提交请求的表单中添加<code>CSRF令牌</code>。</strong></p>
<h3 id="1-通过原生wtfroms-构造的表单，借助flask-wtf提供的CSRFProtect"><a href="#1-通过原生wtfroms-构造的表单，借助flask-wtf提供的CSRFProtect" class="headerlink" title="1. 通过原生wtfroms 构造的表单，借助flask_wtf提供的CSRFProtect"></a>1. 通过原生wtfroms 构造的表单，借助flask_wtf提供的<code>CSRFProtect</code></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = StringField(<span class="string">'name'</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">'提交'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化    </span></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> CSRFProtect</span><br><span class="line">csrf = CSRFProtect()</span><br><span class="line">csrf.init_app(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在表单中使用它提供的生成csrf_token函数</span></span><br><span class="line">&lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"csrf_token"</span> value=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;名称:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="text" name="name"&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;提交：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="submit" value="提交"&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用Flask-wtf-构造的表单"><a href="#2-使用Flask-wtf-构造的表单" class="headerlink" title="2. 使用Flask_wtf 构造的表单"></a>2. 使用Flask_wtf 构造的表单</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskFrom</span><br><span class="line"><span class="comment"># 默认提供了csrf生成的支持</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    dis_account = StringField(<span class="string">'end'</span>, validators=[DataRequired()])</span><br><span class="line">    mount = StringField(<span class="string">'money'</span>, validators=[DataRequired()])</span><br><span class="line">    sumbit = SubmitField(<span class="string">u'转账'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 模板渲染，将生成csrf_token</span></span><br><span class="line"> &lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">     &#123;&#123; <span class="keyword">from</span>.csrf_token &#125;&#125;</span><br><span class="line">     &#123;&#123; form_field(form.email) &#125;&#125;</span><br><span class="line">     &#123;&#123; form_field(form.pwd) &#125;&#125;</span><br><span class="line">     &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"> &lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-当前端使用ajax发送请求时，实现csrf-token保护"><a href="#3-当前端使用ajax发送请求时，实现csrf-token保护" class="headerlink" title="3. 当前端使用ajax发送请求时，实现csrf_token保护"></a>3. 当前端使用ajax发送请求时，实现csrf_token保护</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 针对当前页面的html当发送 ajax请求时，如何构造csrf_token令牌</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"csrf-token"</span> content=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;邮箱:<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;密码：&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;&lt;input type="submit" name="登录" id="submit"&gt;&lt;/</span>td&gt;</span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tbody&gt;</span><br><span class="line">    &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line"># 实现发送ajax请求的同时，构造csrf_token令牌</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#submit'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 阻止默认的发送请求行为</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> email = $(<span class="string">'input[name=email]'</span>).val();</span><br><span class="line">        <span class="keyword">var</span> pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">        <span class="comment">// var csrftoken = $('input[name=csrf_token]').val();</span></span><br><span class="line">        <span class="keyword">var</span> csrf_token = $(<span class="string">'meta[name=csrf_token]'</span>).attr(<span class="string">'content'</span>)</span><br><span class="line"></span><br><span class="line">        $.ajaxSetup(&#123;</span><br><span class="line">            beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/i</span>.test(settings.type) &amp;&amp; !<span class="keyword">this</span>.crossDomain) &#123;</span><br><span class="line">                xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrf_token);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        $.post(&#123;</span><br><span class="line">            <span class="string">'url'</span>: <span class="string">'/login/'</span>,</span><br><span class="line">            <span class="string">'data'</span>: &#123;</span><br><span class="line">                <span class="string">'email'</span>: email,</span><br><span class="line">                <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                <span class="comment">// 'csrf_token': csrftoken,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'fail'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="4-flask中的csrf-token令牌的防御原理"><a href="#4-flask中的csrf-token令牌的防御原理" class="headerlink" title="4.flask中的csrf_token令牌的防御原理"></a>4.flask中的csrf_token令牌的防御原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> safe_str_cmp(session[field_name], token):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'The CSRF tokens do not match.'</span>)</span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 模板中的csrf_token 一旦被调用，将同时生成一段随机字符串作为字段的data和将这个值加密存放到session[csrf_token]中，</span></span><br><span class="line"><span class="comment"># 当调用validate()函数进行验证字段时，将比较字段中的数据和session[csrf_token]中的数据是否一致。</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>python 属性访问顺序</title>
    <url>/2020/07/20/python-%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="Python-属性访问顺序"><a href="#Python-属性访问顺序" class="headerlink" title=" Python - 属性访问顺序 "></a><center> Python - 属性访问顺序 </center></h1><a id="more"></a>

<p>属性访问优先级的顺序如下：</p>
<ul>
<li>类属性</li>
<li>数据描述符 (实现了<code>__get__</code> 和<code>__set__</code>方法的描述符)</li>
<li>实例属性</li>
<li>非数据描述符(仅仅实现了<code>__get__</code>方法的描述符)</li>
<li>默认为<code>__getattr__</code></li>
</ul>
<p>针对描述符，注意事项如下：</p>
<ul>
<li>描述符本身应定义成新式类，被代理的类也应该是新式类</li>
<li>把描述符定义为被代理类的类属性</li>
<li>访问属性优先级先后顺序如上</li>
</ul>
<p>实例如下：</p>
<ol>
<li>利用描述符实现类在初始化进行类型检查</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckInit</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, expected_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get--&gt;'</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set--&gt;'</span>, instance)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected %s'</span> % str(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'delete--&gt;'</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typecheck</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name, expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            setattr(cls, name, CheckInit(name, expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck(name=str, age=int, salary=float)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = Test(<span class="string">'hello'</span>, <span class="number">23</span>, <span class="number">23423.0</span>)</span><br></pre></td></tr></table></figure>

<p>在看flask源码时，也可以看到这样的用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用描述符可以自己实现 <code>@property</code> , <code>@classmethod</code>, <code>@staticmethod</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">		self.func = func</span><br><span class="line">        </span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        setattr(instance, self.func.__name__, value)  <span class="comment">#第一次调用执行__get__,第二次调用实例已经有属性了，不会调用这个方法</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @Myproperty   # 等价于 area = Myproperty(area)   相当于类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">    </span><br><span class="line">t1 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t1.area)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想每次都要调用__get__ 获取值可以使用数据描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty2</span><span class="params">(Myproperty)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        instance.__dict__[self.func.__name__] = value</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'this is a data-descriptor'</span>)</span><br><span class="line">        </span><br><span class="line">t2 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t2.area)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实现<code>@classmethod</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclassmethod</span><span class="params">(object)</span>:</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(owner)</span>：</span></span><br><span class="line"><span class="function">        	<span class="title">print</span><span class="params">(<span class="string">'这里可以添加功能！！！'</span>)</span></span></span><br><span class="line"><span class="function">        	<span class="title">return</span> <span class="title">self</span>.<span class="title">func</span><span class="params">(owner)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">decorator</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"><span class="meta">    @Myclassmethod    # area = Myclassmethod(area)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">   </span><br><span class="line">Test.area()</span><br><span class="line">t = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">t.area()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 信号机制</title>
    <url>/2020/07/20/Flask-%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Flask-信号机制"><a href="#Flask-信号机制" class="headerlink" title=" Flask 信号机制 "></a><center> Flask 信号机制 </center></h1><a id="more"></a>
<ol>
<li><p>Flask内置的核心信号:  <a href="http://docs.jinkan.org/docs/flask/signals.html" target="_blank" rel="noopener">flask信号</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模板成功渲染后，信号发出</span></span><br><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)</span><br><span class="line"><span class="comment"># 模板渲染之前，信号发出</span></span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>)</span><br><span class="line"><span class="comment"># request_started: 建立请求下上文之后在任何请求处理之前发送此信号</span></span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line"><span class="comment"># request_finished 请求发送给客户端之前发送此信号</span></span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)</span><br><span class="line"><span class="comment"># request_tearing_down 在请求销毁时发送（总是被调用，即使发生异常）</span></span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)</span><br><span class="line"><span class="comment"># 请求处理中抛出异常时发送</span></span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)</span><br><span class="line"><span class="comment"># 应用上下文销毁时发送（总是被调用，即使发生异常）</span></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)</span><br><span class="line"><span class="comment"># 应用上下文压入栈时发送</span></span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)</span><br><span class="line"><span class="comment"># 应用上下万弹出栈时发送</span></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)</span><br><span class="line"><span class="comment"># 闪现消息时发送</span></span><br><span class="line">message_flashed = _signals.signal(<span class="string">"message-flashed"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求过程中的执行顺序如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用上下文压入栈后发送</span></span><br><span class="line">appcontext_pushed.send(self.app)</span><br><span class="line"><span class="comment"># 请求上下文建立之后执行的</span></span><br><span class="line">a. @before_first_request</span><br><span class="line">b. request_started.send(self)</span><br><span class="line">c. @before_request</span><br><span class="line">d. @after_request</span><br><span class="line">e. request_finished.send(self, response=response)</span><br><span class="line">f. got_request_exception.send(self, exception=e)</span><br><span class="line">g. @teardown_request</span><br><span class="line">h. request_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>使用Flask中信号三步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义一个信号</span></span><br><span class="line"> request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line"> <span class="comment"># 2.发送端</span></span><br><span class="line"> request_started.send(self)  <span class="comment">#第一个必要参数表示发送端 ，其他参数是推送到信号订阅者的可选关键字参数</span></span><br><span class="line"> <span class="comment"># 3.订阅</span></span><br><span class="line"> request_started.connect(func) <span class="comment">#第一个参数表示信号发出时要执行的函数，第二个参数可选，用于确定信号发送端</span></span><br><span class="line"> <span class="comment"># 4.退订</span></span><br><span class="line"> disconnect()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用范例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered</span><br><span class="line"><span class="meta">   @template_rendered.connect_via(app)</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">when_template_rendered</span><span class="params">(sender, template, context, **extra)</span>:</span></span><br><span class="line">   	print(<span class="string">'Template %s is rendered with %s'</span> % (template.name, context))</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
  </entry>
  <entry>
    <title>Flask上下文管理</title>
    <url>/2020/07/20/Flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask上下文管理"><a href="#Flask上下文管理" class="headerlink" title=" Flask上下文管理"></a><center> Flask上下文管理</center></h1><a id="more"></a>

<h2 id="1-WSGI-协议"><a href="#1-WSGI-协议" class="headerlink" title="1. WSGI 协议"></a>1. WSGI 协议</h2><p>WSGI(Web Server Gateway Interface)是开发Python Web程序的标准，所有的Python Web框架都需要按照WSGI规范来编写程序，Flask框架也不例外。</p>
<p>WSGI规定如下：</p>
<p>   1.1 web程序必须是一个可调用对象，这个可调用对象接收两个参数：<code>environ</code> 和 <code>start_response</code></p>
<p>   1.2 这个可调用对象返回值是一个可迭代对象</p>
<ol start="3">
<li>3 WSGI服务器调用这个可调用对象时传入这两个参数。</li>
</ol>
<p>使用一个函数作为可调用对象来实现WSGI程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">	status = <span class="string">'200 OK'</span></span><br><span class="line">	response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)]</span><br><span class="line">	start_response(status, response_headers)</span><br><span class="line">	<span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, Web&lt;/h1&gt;'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用WSGI服务器启动这个程序</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line">server = make_server(<span class="string">'localhost'</span>, <span class="number">5000</span>, hello)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>



<p>Flask的上下文有程序上下文和请求上下文，原理实现类似于<code>threading.local()</code> ，通过定义了<code>LocalStack</code> 和<code>Local</code> 类，实现了根据线程id来获取每个请求相关的数据。当请求到来时，把请求相关的数据封装到<code>RequestContext</code> 类中，然后通过<code>push</code>方法将封装的请求数据根据线程id 存储到<code>Local</code>对象中；在处理请求的视图函数中，通过调用<code>print(request)</code> 将调用<code>LocalProxy</code> 的<code>__str__</code> 方法，然后调用<code>_get_current_object()</code> 去找到请求上下文栈顶元素存储的request对象；请求结束后，通过<code>pop()</code>删除这次请求的所有数据。</p>
<h2 id="2-Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的-call-方法。"><a href="#2-Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的-call-方法。" class="headerlink" title="2. Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的__call__ 方法。"></a>2. Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的<code>__call__</code> 方法。</h2><ol>
<li>请求到来后</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">"""The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">    wrapped to applying middleware."""</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment"># 将请求相关的数据封装到ctx对象中</span></span><br><span class="line">    ctx = self.request_context(environ)</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行push方法，将封装的请求相关数据存储到Local对象中</span></span><br><span class="line">            ctx.push()</span><br><span class="line">            response = self.full_dispatch_request()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            error = e</span><br><span class="line">            response = self.handle_exception(e)</span><br><span class="line">        <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">            error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">            error = <span class="literal">None</span></span><br><span class="line">        ctx.auto_pop(error)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ)</span><br><span class="line">        <span class="comment">#解析environ 封装到Request对象中</span></span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line">        <span class="keyword">except</span> HTTPException <span class="keyword">as</span> e:</span><br><span class="line">            self.request.routing_exception = e</span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line">        self.session = session</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">      top = _request_ctx_stack.top</span><br><span class="line">      <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved:</span><br><span class="line">          top.pop(top._preserved_exc)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Before we push the request context we have to ensure that there</span></span><br><span class="line">      <span class="comment"># is an application context.</span></span><br><span class="line">      app_ctx = _app_ctx_stack.top</span><br><span class="line">      <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">          <span class="comment"># 产生一个AppContext对象</span></span><br><span class="line">          app_ctx = self.app.app_context()</span><br><span class="line">          app_ctx.push()</span><br><span class="line">          self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          self._implicit_app_ctx_stack.append(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">          sys.exc_clear()</span><br><span class="line"><span class="comment">#将请求上下文对象存储到Local对象中</span></span><br><span class="line">      _request_ctx_stack.p                                                                                                                                                     ush(self)</span><br><span class="line">      <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          session_interface = self.app.session_interface</span><br><span class="line">          self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">              self.session = session_interface.make_null_session(self.app)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> self.url_adapter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          self.match_request()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        self.url_adapter = app.create_url_adapter(<span class="literal">None</span>)</span><br><span class="line">        self.g = app.app_ctx_globals_class()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Like request context, app contexts can be pushed multiple times</span></span><br><span class="line">        <span class="comment"># but there a basic "refcount" is enough to track them.</span></span><br><span class="line">        self._refcnt = <span class="number">0</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Binds the app context to the current context."""</span></span><br><span class="line">        self._refcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">            sys.exc_clear()</span><br><span class="line">         <span class="comment"># 将AppContext对象也存储到Local中</span></span><br><span class="line">        _app_ctx_stack.push(self)</span><br><span class="line">        appcontext_pushed.send(self.app)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        	<span class="comment"># 这时候Local对象中就存储了这样的数据</span></span><br><span class="line">        	<span class="comment"># &#123; </span></span><br><span class="line">        	<span class="comment">#    get_indent(): &#123;</span></span><br><span class="line">            <span class="comment">#          'stack': [RequestContxt()]</span></span><br><span class="line">        	<span class="comment"># &#125;</span></span><br><span class="line">        	<span class="comment"># &#125;</span></span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>



<h2 id="3-在视图函数中处理请求"><a href="#3-在视图函数中处理请求" class="headerlink" title="3. 在视图函数中处理请求"></a>3. 在视图函数中处理请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 这时候将调用 LocalProxy的__str__方法</span></span><br><span class="line">	print(request)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"hello， web"</span></span><br></pre></td></tr></table></figure>

<p>分析导入的全局变量<code>request</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"_LocalProxy__local"</span>, local)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__name__"</span>, name)</span><br><span class="line">        <span class="keyword">if</span> callable(local) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(local, <span class="string">"__release_local__"</span>):</span><br><span class="line">            <span class="comment"># "local" is a callable that is not an instance of Local or</span></span><br><span class="line">            <span class="comment"># LocalManager: mark it as a wrapped function.</span></span><br><span class="line">            object.__setattr__(self, <span class="string">"__wrapped__"</span>, local)</span><br><span class="line">            </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the current object.  This is useful if you want the real</span></span><br><span class="line"><span class="string">        object behind the proxy at a time for performance reasons or because</span></span><br><span class="line"><span class="string">        you want to pass the object into a different context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.__local, <span class="string">"__release_local__"</span>):</span><br><span class="line">            <span class="keyword">return</span> self.__local()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__local, self.__name__)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"no object bound to %s"</span> % self.__name__)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">     __str__ = <span class="keyword">lambda</span> x: str(x._get_current_object())</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用web访问多app应用时，依然是一样的流程，Local对象中存储依然的一个请求上下文对象的列表；</p>
</li>
<li><p>对于使用离线脚本来操作上下文时候</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    print(_app_ctx_stack._local.__storage__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> app2.app_context():</span><br><span class="line">        print(_app_ctx_stack._local.__storage__)</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出如下：这时候才会出现'stack'中的值有两个的情况</span></span><br><span class="line">&#123;<span class="number">6916</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1BE0</span>&gt;]&#125;&#125;</span><br><span class="line">&#123;<span class="number">6916</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1BE0</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1EB8</span>&gt;]&#125;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-请求结束后-执行pop-请求上下文和应用上下文都将pop"><a href="#4-请求结束后-执行pop-请求上下文和应用上下文都将pop" class="headerlink" title="4. 请求结束后,执行pop() ,请求上下文和应用上下文都将pop"></a>4. 请求结束后,执行<code>pop()</code> ,请求上下文和应用上下文都将<code>pop</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">      app_ctx = self._implicit_app_ctx_stack.pop()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          clear_request = <span class="literal">False</span></span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> self._implicit_app_ctx_stack:</span><br><span class="line">              self.preserved = <span class="literal">False</span></span><br><span class="line">              self._preserved_exc = <span class="literal">None</span></span><br><span class="line">              <span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel:</span><br><span class="line">                  exc = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">              self.app.do_teardown_request(exc)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">                  sys.exc_clear()</span><br><span class="line"></span><br><span class="line">              request_close = getattr(self.request, <span class="string">"close"</span>, <span class="literal">None</span>)</span><br><span class="line">              <span class="keyword">if</span> request_close <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                  request_close()</span><br><span class="line">              clear_request = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">finally</span>:</span><br><span class="line">          rv = _request_ctx_stack.pop()</span><br><span class="line"></span><br><span class="line">          <span class="comment"># get rid of circular dependencies at the end of the request</span></span><br><span class="line">          <span class="comment"># so that we don't require the GC to be active.</span></span><br><span class="line">          <span class="keyword">if</span> clear_request:</span><br><span class="line">              rv.request.environ[<span class="string">"werkzeug.request"</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># Get rid of the app as well if necessary.</span></span><br><span class="line">          <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">              app_ctx.pop(exc)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">"Popped wrong request context. (%r instead of %r)"</span> % (</span><br><span class="line">              rv,</span><br><span class="line">              self,</span><br><span class="line">          )</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask session原理</title>
    <url>/2020/07/20/Flask-session%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask-session原理"><a href="#Flask-session原理" class="headerlink" title=" Flask session原理 "></a><center> Flask session原理 </center></h1><a id="more"></a>
<h2 id="1-当请求上下文被push-之后，接下来就开始操作session"><a href="#1-当请求上下文被push-之后，接下来就开始操作session" class="headerlink" title="1. 当请求上下文被push 之后，接下来就开始操作session"></a>1. 当请求上下文被<code>push</code> 之后，接下来就开始操作<code>session</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            session_interface = self.app.session_interface</span><br><span class="line">            self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 用来处理 app.secret_key 未设置的情况，这时候初始化一个NullSession对象</span></span><br><span class="line">                self.session = session_interface.make_null_session(self.app)</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span>              </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">        s = self.get_signing_serializer(app)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 如果没有设置app.secret_key, 将返回None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 从cookie中取出键名为session的值</span></span><br><span class="line">        val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">        <span class="comment"># 值不存在，返回一个 SecureCookieSession对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br><span class="line">        max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 值存在，通过loads方法将随机字符串 解密成一个python对象，也就是一个字典</span></span><br><span class="line">            data = s.loads(val, max_age=max_age)</span><br><span class="line">            <span class="keyword">return</span> self.session_class(data)</span><br><span class="line">        <span class="keyword">except</span> BadSignature:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<h2 id="2-在视图函数中处理session"><a href="#2-在视图函数中处理session" class="headerlink" title="2. 在视图函数中处理session"></a>2. 在视图函数中处理<code>session</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从flask 导入全局代理对象</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session, Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(session)  <span class="comment"># 最终将调用 CallbackDict类的__repr__()</span></span><br><span class="line">    session[<span class="string">'test'</span>] = <span class="string">'hello'</span> <span class="comment"># 最终调用的是 UpdateDictMixin 类中的__setitem__()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello test sessionk"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSession</span><span class="params">(CallbackDict, SessionMixin)</span>:</span></span><br><span class="line">    </span><br><span class="line">    modified = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    accessed = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial=None)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_update</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.modified = <span class="literal">True</span></span><br><span class="line">            self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># print(self.__class__)</span></span><br><span class="line">        <span class="comment"># print(self.__class__.mro())</span></span><br><span class="line">        <span class="comment"># 对于多继承来说，super() 返回的是要寻找的哪个父类</span></span><br><span class="line">        <span class="string">'''[&lt;class 'flask.sessions.SecureCookieSession'&gt;, &lt;class 'werkzeug.datastructures.CallbackDict'&gt;, &lt;class 'werkzeug.datastructures.UpdateDictMixin'&gt;, &lt;class 'dict'&gt;, &lt;class 'flask.sessions.SessionMixin'&gt;, &lt;class 'collections.abc.MutableMapping'&gt;, &lt;class 'collections.abc.Mapping'&gt;, &lt;class 'collections.abc.Collection'&gt;, &lt;class 'collections.abc.Sized'&gt;, &lt;class 'collections.abc.Iterable'&gt;, &lt;class 'collections.abc.Container'&gt;, &lt;class 'object'&gt;]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        super(SecureCookieSession, self).__init__(initial, on_update)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).__getitem__(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).get(key, default)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).setdefault(key, default)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackDict</span><span class="params">(UpdateDictMixin, dict)</span>:</span></span><br><span class="line">    <span class="string">"""A dict that calls a function passed every time something is changed.</span></span><br><span class="line"><span class="string">    The function is passed the dict instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial=None, on_update=None)</span>:</span></span><br><span class="line">        dict.__init__(self, initial <span class="keyword">or</span> ())</span><br><span class="line">        self.on_update = on_update</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print('print session')</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;%s %s&gt;"</span> % (self.__class__.__name__, dict.__repr__(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateDictMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes dicts call `self.on_update` on modifications.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :private:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    on_update = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calls_update</span><span class="params">(name)</span>:</span>  <span class="comment"># noqa: B902</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">oncall</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">            rv = getattr(super(UpdateDictMixin, self), name)(*args, **kw)</span><br><span class="line">            <span class="keyword">if</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.on_update(self)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        oncall.__name__ = name</span><br><span class="line">        <span class="keyword">return</span> oncall</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        modified = key <span class="keyword">not</span> <span class="keyword">in</span> self</span><br><span class="line">        rv = super(UpdateDictMixin, self).setdefault(key, default)</span><br><span class="line">        <span class="keyword">if</span> modified <span class="keyword">and</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.on_update(self)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, key, default=_missing)</span>:</span></span><br><span class="line">        modified = key <span class="keyword">in</span> self</span><br><span class="line">        <span class="keyword">if</span> default <span class="keyword">is</span> _missing:</span><br><span class="line">            rv = super(UpdateDictMixin, self).pop(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = super(UpdateDictMixin, self).pop(key, default)</span><br><span class="line">        <span class="keyword">if</span> modified <span class="keyword">and</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.on_update(self)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    __setitem__ = calls_update(<span class="string">"__setitem__"</span>)</span><br><span class="line">    __delitem__ = calls_update(<span class="string">"__delitem__"</span>)</span><br><span class="line">    clear = calls_update(<span class="string">"clear"</span>)</span><br><span class="line">    popitem = calls_update(<span class="string">"popitem"</span>)</span><br><span class="line">    update = calls_update(<span class="string">"update"</span>)</span><br><span class="line">    <span class="keyword">del</span> calls_update</span><br></pre></td></tr></table></figure>

<h2 id="3-在请求处理完成，返回响应时候，对于session处理"><a href="#3-在请求处理完成，返回响应时候，对于session处理" class="headerlink" title="3. 在请求处理完成，返回响应时候，对于session处理"></a>3. 在请求处理完成，返回响应时候，对于session处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">      <span class="string">"""Can be overridden in order to modify the response object</span></span><br><span class="line"><span class="string">      before it's sent to the WSGI server.  By default this will</span></span><br><span class="line"><span class="string">      call all the :meth:`after_request` decorated functions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      .. versionchanged:: 0.5</span></span><br><span class="line"><span class="string">         As of Flask 0.5 the functions registered for after request</span></span><br><span class="line"><span class="string">         execution are called in reverse order of registration.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      :param response: a :attr:`response_class` object.</span></span><br><span class="line"><span class="string">      :return: a new response object or the same, has to be an</span></span><br><span class="line"><span class="string">               instance of :attr:`response_class`.</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      ctx = _request_ctx_stack.top</span><br><span class="line">      bp = ctx.request.blueprint</span><br><span class="line">      funcs = ctx._after_request_functions</span><br><span class="line">      <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">          funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">      <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">          funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">      <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">          response = handler(response)</span><br><span class="line">      <span class="comment"># 判断是否是 NullSession对象(也就是是否设置secret_key)</span></span><br><span class="line">      <span class="comment"># 如果没有设置secret_key 直接跳过</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">          self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">      domain = self.get_cookie_domain(app)</span><br><span class="line">      path = self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># If the session is modified to be empty, remove the cookie.</span></span><br><span class="line">      <span class="comment"># If the session is empty, return without setting the cookie.</span></span><br><span class="line">      <span class="comment"># 删除 session时候</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">          <span class="keyword">if</span> session.modified:</span><br><span class="line">              response.delete_cookie(</span><br><span class="line">                  app.session_cookie_name, domain=domain, path=path</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Add a "Vary: Cookie" header if the session was accessed at all.</span></span><br><span class="line">      <span class="keyword">if</span> session.accessed:</span><br><span class="line">          response.vary.add(<span class="string">"Cookie"</span>)</span><br><span class="line"><span class="comment"># 这个条件表示 当session没有修改过，一旦设置session.permanent为True,那么也要重新set_cookie</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.should_set_cookie(app, session):</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      httponly = self.get_cookie_httponly(app)</span><br><span class="line">      secure = self.get_cookie_secure(app)</span><br><span class="line">      samesite = self.get_cookie_samesite(app)</span><br><span class="line">      expires = self.get_expiration_time(app, session)</span><br><span class="line">      print(<span class="string">'expires is '</span>, expires)</span><br><span class="line">      val = self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">      response.set_cookie(</span><br><span class="line">          app.session_cookie_name,</span><br><span class="line">          val,</span><br><span class="line">          expires=expires,</span><br><span class="line">          httponly=httponly,</span><br><span class="line">          domain=domain,</span><br><span class="line">          path=path,</span><br><span class="line">          secure=secure,</span><br><span class="line">          samesite=samesite,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

<p>至此，<code>flask</code>中的<code>session</code> 完成。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>flask框架内置的<code>session</code>  通过<code>cookie</code> 进行设置的。</p>
<ul>
<li><p><code>session</code> 的过期时间，默认情况下，当浏览器关闭时，<code>session</code> 过期；但是当设置了<code>session.permanent = True</code>后，默认的过期时间根据<code>PERMANENT_SESSION_LEFETIME</code>  来计算，默认情况下是 <code>timedelta(days=31)</code> ; 这里再来提一下，对于chrome浏览器，有时候浏览器关闭后，<code>session</code> 并没有被清除的解释 <a href="http://blog.petersondave.com/cookies/Session-Cookies-in-Chrome-Firefox-and-Sitecore/" target="_blank" rel="noopener">Session Cookies in Chrome, Firefox, and Sitecore</a> ;中间有关于chrome浏览器的介绍:</p>
<ul>
<li><p>Since version 19, Chrome has altered how it runs in the background which has an immediate impact on how you expect Chrome to handle session cookies when you close your browser. Under <em>advanced settings &gt; System</em>, the option “Continue running background apps when Google Chrome is closed” is checked by default. In other words, if you close your browser, it will continue to run in the background (to support Chrome applications and extensions). Allowing Google Chrome to run in the background keeps the Chrome application session alive and prevents session cookies from being cleared.</p>
</li>
<li><p>The issue has been entered and marked as “won’t fix”, recognized as <a href="https://code.google.com/p/chromium/issues/detail?id=128513" target="_blank" rel="noopener">expected behavior by the development team</a>.</p>
</li>
</ul>
</li>
<li><p>flask 这种将<code>session</code> 存储在客户端的默认方式，并不安全，即使不知道密钥的情况下也可以轻易的解析出数据来，因此，不能用来存储敏感数据，或者存储到其他地方</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line">s = <span class="string">'eyJ0ZXN0IjoiaGVsbG8ifQ.XxUYlQ.2J3BtV8aACUDCaddD-ZxFlIEtRI'</span></span><br><span class="line">data, timestamp, secret = s.split(<span class="string">'.'</span>)</span><br><span class="line">base64_decode(data)</span><br><span class="line"><span class="comment"># 就可以解析出 '&#123;"test":"hello"&#125;'</span></span><br></pre></td></tr></table></figure>



<h2 id="5-使用第三方插件，将session-存放到redis-中如何操作"><a href="#5-使用第三方插件，将session-存放到redis-中如何操作" class="headerlink" title="5. 使用第三方插件，将session 存放到redis 中如何操作"></a>5. 使用第三方插件，将<code>session</code> 存放到<code>redis</code> 中如何操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'test'</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">app.config[<span class="string">'SESSION_REDIS'</span>] = Redis(password=<span class="string">'studyredis'</span>)</span><br><span class="line"></span><br><span class="line">sess = Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(session)</span><br><span class="line">    session[<span class="string">'test'</span>] = <span class="string">'hello'</span> <span class="comment">#此时就能在redis数据库中找到session: 开头的key；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-restful扩展使用</title>
    <url>/2020/02/29/flask-restful%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="flask-restful扩展使用"><a href="#flask-restful扩展使用" class="headerlink" title="flask-restful扩展使用"></a><center>flask-restful扩展使用</center></h2><a id="more"></a>

<h3 id="1-flask-restful基本使用"><a href="#1-flask-restful基本使用" class="headerlink" title="1. flask-restful基本使用"></a>1. flask-restful基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource, reqparse</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 验证传入的参数</span></span><br><span class="line">        <span class="comment"># type值还可以是url, regex, date</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str, help=<span class="string">"用户名验证错误"</span>, default=<span class="string">'cgn'</span>， trim=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'password'</span>, type=str, help=<span class="string">'密码验证错误'</span>, required=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'sex'</span>, type=str, help=<span class="string">'性别验证错误'</span>, choices=[<span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'secret'</span>])</span><br><span class="line">         parser.add_argument(<span class="string">'birthday'</span>, type=inputs.date)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        print(args)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">api.add_resource(LoginView, <span class="string">'/login'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-返回指定的参数"><a href="#2-返回指定的参数" class="headerlink" title="2. 返回指定的参数"></a>2. 返回指定的参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="comment"># 必须返回的键值对，如果没有提供，将使用默认值</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'content'</span>: fields.String</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="comment"># 返回给客户端的键值对</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, article_id)</span>:</span></span><br><span class="line">        article = Article.query.get(article_id)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line">api.add_resource(ArticleView, <span class="string">'/article/&lt;int:article_id&gt;'</span>, endpoint=<span class="string">'article'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resource_fields = &#123;</span><br><span class="line">        <span class="string">'article_title'</span>: fields.String(attribute=<span class="string">'title'</span>), <span class="comment">#对字段title重命名</span></span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;)),</span><br><span class="line"></span><br><span class="line">        <span class="string">'test'</span>:fields.String(default=<span class="string">'test'</span>) <span class="comment"># 字段不存在时的默认值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 结果如下	</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"article_title"</span>: <span class="string">"hello"</span>,</span><br><span class="line"><span class="attr">"content"</span>: <span class="string">"this is  a test"</span>,</span><br><span class="line"><span class="attr">"tags"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"flask"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"test"</span>,</span><br><span class="line"><span class="attr">"user"</span>: &#123;</span><br><span class="line"><span class="attr">"email"</span>: <span class="string">"xxx@qq.com"</span>,</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"cgn"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-在蓝本中使用api"><a href="#3-在蓝本中使用api" class="headerlink" title="3. 在蓝本中使用api"></a>3. 在蓝本中使用api</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">'user_bp'</span>, __name__, url_prefix=<span class="string">'/user'</span>)</span><br><span class="line"></span><br><span class="line">api = Api(user_bp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.representation('text/html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output_html</span><span class="params">(data, code, headers)</span>:</span></span><br><span class="line">    print(data)</span><br><span class="line">    response = make_response(data)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'article_title'</span>: fields.String(attribute=<span class="string">'title'</span>),</span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;)),</span><br><span class="line"></span><br><span class="line">        <span class="string">'test'</span>:fields.String(default=<span class="string">'test'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, article_id)</span>:</span></span><br><span class="line">        article = Article.query.get(article_id)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line">api.add_resource(ArticleView, <span class="string">'/article/&lt;int:article_id&gt;'</span>, endpoint=<span class="string">'article'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">api.add_resource(TestView, <span class="string">'/test'</span>, endpoint=<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-sqlalchemy与alembic学习</title>
    <url>/2020/02/27/flask-sqlalchemy%E4%B8%8Ealembic%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="flask-sqlalchemy-与alembic-学习"><a href="#flask-sqlalchemy-与alembic-学习" class="headerlink" title="flask-sqlalchemy 与alembic 学习"></a><center>flask-sqlalchemy 与alembic 学习</center></h2><a id="more"></a>

<h3 id="1-flask-sqlalchemy"><a href="#1-flask-sqlalchemy" class="headerlink" title="1. flask-sqlalchemy"></a>1. flask-sqlalchemy</h3><ul>
<li>安装flask-sqlalchemy ,这是flask与sqlalchemy的集成，简化了sqlalchemy的使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install flask-sqlalchemy</span><br></pre></td></tr></table></figure>

<ul>
<li>首先定义数据库模型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql+pymysql://root:123456@localhost:3306/flask_sqlalchemy_demo'</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">   id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">   username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">'&lt;User username:%s&gt;'</span> % self.username</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = db.Column(db.DateTime, default=datetime.now)</span><br><span class="line">    uid = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">    author = db.relationship(<span class="string">'User'</span>, backref=<span class="string">'articles'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>增删改查操作如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(username=<span class="string">'cgn'</span>)</span><br><span class="line">    article1 = Article(title=<span class="string">'hello world'</span>)</span><br><span class="line">    article2 = Article(title=<span class="string">'生命不能承受之轻'</span>)</span><br><span class="line">    user.articles.extend((article1, article2))</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/check')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">    user = User.query.filter_by(id=<span class="number">1</span>).first()</span><br><span class="line">    print(user) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'check success'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/update')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    user = User.query.get(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        user.username = <span class="string">'声明'</span></span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'update success'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    article = Article.query.get(<span class="number">1</span>)</span><br><span class="line">    db.session.delete(article)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"delete success"</span></span><br></pre></td></tr></table></figure>

<h3 id="2-alembic-是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；"><a href="#2-alembic-是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；" class="headerlink" title="2. alembic 是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；"></a>2. alembic 是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；</h3><ul>
<li><p>原理:将ORM模型先生成迁移脚本文件，然后按照迁移文件中的操作映射到数据库中；</p>
</li>
<li><p>常常使用的命令：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步</span></span><br><span class="line">alembic init self_dir</span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line"><span class="comment"># 修改alembic.ini文件</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"> <span class="number">38</span> sqlalchemy.url = mysql+pymysql://root:<span class="number">123456</span>@localhost:<span class="number">3306</span>/hello_alembic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步</span></span><br><span class="line"><span class="comment"># 进入 self_dir/env.py 修改</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">import</span> sys                             </span><br><span class="line">  <span class="number">2</span> <span class="keyword">import</span> os                              </span><br><span class="line">  <span class="number">3</span> sys.path.append(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line">  <span class="number">4</span> <span class="keyword">import</span> use_alembic </span><br><span class="line">    target_metadata = alembic.Base.metadata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步 生成迁移文件</span></span><br><span class="line">  alembic revision --autogenerate -m <span class="string">"create table user"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步 映射数据库</span></span><br><span class="line">  alembic upgrade head</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 其他命令</span></span><br><span class="line">alembic heads  <span class="comment">#查看head 指向的位置， 类似于 git中的head</span></span><br><span class="line">alembic current <span class="comment"># 查看当前指向的位置， 只有当current 与head 指向的位置相同，才能执行 alembic revision</span></span><br><span class="line">alembic history <span class="comment"># 可以查看执行的操作</span></span><br><span class="line">alembic downgrade 某个位置  <span class="comment"># 执行以前的某个操作</span></span><br></pre></td></tr></table></figure>

<h3 id="3-使用flask-migrate-简化alembic的操作"><a href="#3-使用flask-migrate-简化alembic的操作" class="headerlink" title="3. 使用flask-migrate 简化alembic的操作"></a>3. 使用flask-migrate 简化alembic的操作</h3><ul>
<li>第一步使用：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">migrate = Migrate(app, db)</span><br></pre></td></tr></table></figure>

<ul>
<li>生成仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask db init  <span class="comment"># 在当前目录生成 migrations目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成迁移文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flask db migrate -m &quot;first use&quot;  # 因为之前已经创建过数据库表，所以没有任何变化，没有任何输出</span><br></pre></td></tr></table></figure>

<ul>
<li>执行映射到数据库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask db upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlalchemy学习</title>
    <url>/2020/02/25/sqlalchemy%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="sqlalchemy学习"><a href="#sqlalchemy学习" class="headerlink" title="sqlalchemy学习"></a><center>sqlalchemy学习</center></h3><a id="more"></a>

<h3 id="1-session与scoped-session"><a href="#1-session与scoped-session" class="headerlink" title="1. session与scoped_session"></a>1. session与scoped_session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scoped_session用在多线程环境下，内部通过threading.local()对象存储session,是线程隔离的,在同一线程中，多次创建的session对象是相同的，也就是可以同时操作同一个数据对象；</span><br><span class="line">而原生的session，多次创建都不同，而数据对象只能add到一个session对象中，不能同时被多个不同的session 操作，只有当一个session.close()之后，这个数据对象才能被其他session使用；</span><br><span class="line">而且同一个数据对象多次add,多次提交，在数据库中也只有一条记录；</span><br></pre></td></tr></table></figure>



<h3 id="2-session中authflash-autocommit参数默认值是什么？意义是什么？"><a href="#2-session中authflash-autocommit参数默认值是什么？意义是什么？" class="headerlink" title="2. session中authflash, autocommit参数默认值是什么？意义是什么？"></a>2. session中authflash, autocommit参数默认值是什么？意义是什么？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个参数用来表示在执行查询之前，自动将session中累计的状态改变发送到数据库</span></span><br><span class="line"><span class="comment"># 就是执行session.query()之前，会自动执行session.flush(),将session中累计的改变通过sql语句的形式</span></span><br><span class="line"><span class="comment"># 发送到数据库，</span></span><br><span class="line">autoflash = <span class="literal">True</span> <span class="comment">#默认值，</span></span><br><span class="line"><span class="comment"># 因此执行sesion.add()后，在执行session.commit()之前，使用session.query()就能查询到这次的改变；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对事务，不会自动提交，需要手动 session.commit()提交到数据库，</span></span><br><span class="line">autocommit = <span class="literal">False</span> <span class="comment">#默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="3-常用数据类型："><a href="#3-常用数据类型：" class="headerlink" title="3.常用数据类型："></a>3.常用数据类型：</h3><ul>
<li>Integer</li>
<li>Float (默认总共6位)</li>
<li>Boolean — tinyint</li>
<li>DECIMAL(10, 6)  —  总共10位，有6位是小数位，超过截取，没超过补0；</li>
<li>Enum(“python”, “flask”, “django”) 只能取这三个值；</li>
<li>Date :  使用 datetime.date.today()</li>
<li>DateTime: 使用 datetime.datetime.now()</li>
<li>Time: datetime.time(2, 3, 5)</li>
<li>Text</li>
<li>LONGTEXT</li>
</ul>
<h3 id="4-Column-的常用参数"><a href="#4-Column-的常用参数" class="headerlink" title="4. Column 的常用参数"></a>4. Column 的常用参数</h3><ul>
<li>primary_key</li>
<li>autoincrement   # 对于主键自动为True</li>
<li>nullable 默认为True</li>
<li>default 设置默认值</li>
<li>onupdate=datetime.now :当修改带这个参数的字段时，这个字段的此属性将自动更新时间；</li>
<li>name 参数自定义设置字段名</li>
</ul>
<h3 id="5-query参数"><a href="#5-query参数" class="headerlink" title="5. query参数"></a>5. query参数</h3><ul>
<li>表格类 query(Article)</li>
<li>表格类对象 query(Article.id, Article.price)</li>
<li>聚合函数 func.avg(Ariticle.price)</li>
</ul>
<h3 id="6-filter-参数"><a href="#6-filter-参数" class="headerlink" title="6. filter 参数"></a>6. filter 参数</h3><ul>
<li>filter( == )</li>
<li>filter(!=)</li>
<li>filter(Article.title.like=’%’)  ilike (大小写无关)</li>
<li>in_([])  在这里面， 不在这里面是 <code>~ in_([])</code></li>
<li><code>and_()</code>  </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(and_(Note.body == <span class="string">'foo'</span>, Note.title == <span class="string">'Foo'</span>))</span><br><span class="line">filter(Note.body == <span class="string">'foo'</span>, Note.title == <span class="string">'Foo'</span>)</span><br><span class="line">filter(Note.body == <span class="string">'foo'</span>).filter(Note.title == <span class="string">'Foo'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>or_()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(or_(Note.body == <span class="string">'foo'</span>, Note.body == <span class="string">'bar'</span>))</span><br></pre></td></tr></table></figure>

<h3 id="7-外键约束的ondelete参数有哪些"><a href="#7-外键约束的ondelete参数有哪些" class="headerlink" title="7.外键约束的ondelete参数有哪些"></a>7.外键约束的ondelete参数有哪些</h3><ul>
<li><pre><code class="python">uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>), nullable=<span class="literal">False</span>) <span class="comment"># 下面的功能通过原生的sql得出的，在通过ORM操作时，不一样；</span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ondelete&#x3D;&quot;RESTRICT&quot; ,默认值，当删除父表中的对象时，与它有关的子表中的对象因为这个约束不能删除，报错；</span><br><span class="line">- ondelete&#x3D;&quot;NO ACTION&quot;, 行为与&quot;RESTRICT&quot;一致；</span><br><span class="line">- ondelete&#x3D;&quot;CASCADE&quot;  ,当删除父类的对象，与它有关的子表记录也被删除；</span><br><span class="line">- ondelete&#x3D;&quot;SET NULL&quot;, 当删除父类的对象，与它有关的子表记录设置为NULL, 如果此时还设置nullable&#x3D;False,那么不能创建这样的外键；</span><br><span class="line"></span><br><span class="line">### 8. 通过relationship 这个关系属性来获取对应的对象</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;user&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(20))</span><br><span class="line">    # articles &#x3D; relationship(&#39;Article&#39;, backref&#x3D;&#39;user&#39;)</span><br><span class="line">    # 这是关系属性，不会添加到数据库中，可以任意修改它，而不用修改数据库</span><br><span class="line">    # 查看用户的所有文章</span><br><span class="line">    # 可以省略 back_populates&#x3D;&#39;user&#39;这个属性；</span><br><span class="line">    # 一旦使用backref&#x3D;&#39;user&#39;，那么另一侧一定不能再定义user属性，否则报错；</span><br><span class="line">    </span><br><span class="line">    articles &#x3D; relationship(&#39;Article&#39;)  </span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;User&lt;name:%s&gt;&quot; % self.name</span><br><span class="line"></span><br><span class="line">class Article(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;article&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    title &#x3D; Column(String(20), nullable&#x3D;False)</span><br><span class="line">    price &#x3D; Column(Float, nullable&#x3D;False)</span><br><span class="line">    # ondelete&#x3D;&quot;RESTRICT&quot;, &quot;NO ACTION&quot;</span><br><span class="line">    # ondelete&#x3D;&quot;CASCADE&quot;</span><br><span class="line">    # ondelete&#x3D;&quot;SET NULL&quot;</span><br><span class="line">    uid &#x3D; Column(Integer, ForeignKey(&#39;user.id&#39;))</span><br><span class="line">    # user &#x3D; relationship(&#39;User&#39;, back_populates&#x3D;&#39;articles&#39;)</span><br><span class="line">    # 查看文章对应的用户</span><br><span class="line">    user &#x3D; relationship(&#39;User&#39;)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;Article(title:%s&gt;&quot; % self.title</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面的两个表建立联系，除了使用uid的方式</span></span><br><span class="line">article = Article(title=<span class="string">'test'</span>, price=<span class="number">23.42</span>, uid=<span class="number">1</span>) </span><br><span class="line"><span class="comment"># 通过relationship来建立关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以为作者的文章赋值：</span></span><br><span class="line">user = User(name=<span class="string">'cgn'</span>)</span><br><span class="line">article1 = Article(title=<span class="string">'三国演义'</span>, price=<span class="number">234.23</span>)</span><br><span class="line">article2 = Article(title=<span class="string">'水浒传'</span>, price=<span class="number">232.10</span>)</span><br><span class="line"></span><br><span class="line">user.articles.append(article1)</span><br><span class="line">user.articles.append(article2)</span><br><span class="line"></span><br><span class="line">session.add(user)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过为文章的作者赋值</span></span><br><span class="line">article = Article(title=<span class="string">'红楼梦'</span>, price=<span class="number">23.234</span>)</span><br><span class="line"></span><br><span class="line">user = session.query(User).filter_by(id=<span class="number">1</span>).first()</span><br><span class="line">article.author = user</span><br><span class="line">session.add(article)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<ul>
<li>如何定义一对一关系：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>))</span><br><span class="line">    articles = relationship(<span class="string">'Article'</span>)</span><br><span class="line">    <span class="comment"># 定义User与UserExtend的一对一关系，通过在没有ForeignKey的这一侧，定义relationship时</span></span><br><span class="line">    <span class="comment"># 使用userlist=False来说明；这时候 user.u_extend没有append方法，只能</span></span><br><span class="line">    <span class="comment"># 通过user.u_extend = userextend_obj 来进行赋值</span></span><br><span class="line">    u_extend = relationship(<span class="string">'UserExtend'</span>, uselist=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User&lt;name:%s&gt;"</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtend</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'userextend'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    school = Column(String(<span class="number">20</span>))</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">    ue_user = relationship(<span class="string">'User'</span>) <span class="comment"># 默认不能使用 append方法，可以认为默认就是uselist=False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>简化一对一关系的书写：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在有外键的表中定义关系属性时，使用</span><br><span class="line">ue_user = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'u_extend'</span>, uselist=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>使用sql语句删除时，将参考外键的参数进行删除；</li>
<li><strong>当使用<code>orm</code> 进行删除时，情况有变化：</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果外键的字段可以为NULL，那么将设置NULL, 同时user删除</span></span><br><span class="line"><span class="comment"># 如果外键的字段不可以为NULL, 那么删除时将报错；行为和执行sql语句一样；</span></span><br><span class="line">session.delete(user)  </span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<ul>
<li>还可以使用<code>cascade</code> 参数，定义删除一个父对象时(使用cascade的一侧)，子对象如何操作？</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cascade： 默认取值， save-update, merge</span><br><span class="line">save-update: 作用是，当为父对象执行 session.add()操作时，子对象也同时被添加到session中；</span><br><span class="line">其他参数：</span><br><span class="line">delete: 当父对象执行删除操作时，子对象也将被删除(而在一对多关系时，默认的删除行为是父对象删除时，子对象设置为NULL)</span><br><span class="line">delete-orphan: 参数表示当父对象和子对象关系解除后，子对象也删除(而默认的行为是设置为NULL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge的作用就是可以插入并更新数据，当执行merge时候，子对象也将执行merge操作；</span></span><br><span class="line">user = User(name=<span class="string">'testmerge'</span>, id=<span class="number">10</span>)</span><br><span class="line">article1 = Article(title=<span class="string">'test1'</span>, id=<span class="number">32</span>)</span><br><span class="line">article2 = Article(title=<span class="string">'test2'</span>, id=<span class="number">80</span>)</span><br><span class="line">user.articles.append(article1)</span><br><span class="line">user.articles.append(article2)</span><br><span class="line">session.merge(user)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>



<h3 id="9-定义多对多关系"><a href="#9-定义多对多关系" class="headerlink" title="9. 定义多对多关系"></a>9. 定义多对多关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article_tag = Table(</span><br><span class="line">    <span class="string">'article_tag'</span>, </span><br><span class="line">    Base.metadata,</span><br><span class="line">    <span class="comment"># 定义联合主键</span></span><br><span class="line">    Column(<span class="string">'article_id'</span>, Integer, ForeignKey(<span class="string">'article.id'</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    Column(<span class="string">'tag_id'</span>, Integer, ForeignKey(<span class="string">'tag.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    tags = relationship(<span class="string">'Tag'</span>, secondary=article_tag, backref=<span class="string">'articles'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Article: title:%s"</span> % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tag'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Tag: name:%s&gt;"</span> % self.name</span><br></pre></td></tr></table></figure>

<h3 id="10-排序方式"><a href="#10-排序方式" class="headerlink" title="10. 排序方式"></a>10. 排序方式</h3><ul>
<li>默认升序(asc)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(Article.create_time.desc()).all() <span class="comment"># 倒序</span></span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(text(<span class="string">"create_time"</span>)).all() <span class="comment"># 升序</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(text(<span class="string">"-create_time"</span>)).all() <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = Column(DateTime, default=datetime.now)</span><br><span class="line"></span><br><span class="line">    __mapper_args__ = &#123;</span><br><span class="line">        <span class="string">"order_by"</span>: -create_time   <span class="comment"># 倒序  create_time.desc()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    articles = session.query(<span class="string">'Article'</span>).all()</span><br><span class="line">    print(articles)  <span class="comment"># 按照 __mapper_args__ 的排序方式输出；</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用如下方式：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = Column(DateTime, default=datetime.now)</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line"></span><br><span class="line">    author = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'articles'</span>, order_by=create_time.desc()))</span><br></pre></td></tr></table></figure>

<h3 id="11-limit-offset"><a href="#11-limit-offset" class="headerlink" title="11. limit, offset"></a>11. limit, offset</h3><ul>
<li>取前10篇文章：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">articles = session.query(Article).offset(<span class="number">10</span>).limit(<span class="number">10</span>).all()</span><br><span class="line">articles = session.query(Article).slice(<span class="number">0</span>, <span class="number">10</span>).all()</span><br></pre></td></tr></table></figure>

<h3 id="12-使用-lazy-’dynamic’"><a href="#12-使用-lazy-’dynamic’" class="headerlink" title="12. 使用 lazy=’dynamic’"></a>12. 使用 lazy=’dynamic’</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当调用关系属性会返回大量的数据记录，并且总是需要对关系属性返回的结果附加额外的查询时才需要使用动态加载：</span><br><span class="line">lazy=<span class="string">'dynamic'</span>;</span><br><span class="line">author = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'articles'</span>, lazy=<span class="string">'dynamic'</span>))</span><br></pre></td></tr></table></figure>

<h3 id="13-group-by-与having"><a href="#13-group-by-与having" class="headerlink" title="13. group_by  与having"></a>13. group_by  与having</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询每个年龄段中年龄小于18的人数；</span></span><br><span class="line">session.query(User.age, func.count(User.id)).group_by(User.age).having(User.age &lt; <span class="number">18</span>).all()</span><br></pre></td></tr></table></figure>

<h3 id="14-join"><a href="#14-join" class="headerlink" title="14. join"></a>14. join</h3><ul>
<li>join是内连接</li>
<li>按照用户发表的文章数量进行排序，如果文章数量相同，按照id的降序排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.query(User).join(Article, User.id == Article.uid).group_by(User.id).order_by(func.count(Article.id).desc(), User.id.desc()).all()</span><br></pre></td></tr></table></figure>

<h3 id="15-子查询"><a href="#15-子查询" class="headerlink" title="15. 子查询"></a>15. 子查询</h3><ul>
<li>一次查询的条件依赖于另一个查询的结果时，就是子查询</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用两次查询，传统上</span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">'李四'</span>).first()</span><br><span class="line">result = session.query(User).filter_by(city=user.city, age=user.age).all()</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用子查询， 只查找一次</span></span><br><span class="line">stmt = session.query(User.city.label(<span class="string">'city'</span>), User.age.label(<span class="string">'age'</span>)).filter_by(username=<span class="string">'李四'</span>).subquery()</span><br><span class="line"></span><br><span class="line">result = session.query(User).filter(User.city == stmt.c.city, User.age == stmt.c.age).all()</span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>flask wtfroms 组件源码分析</title>
    <url>/2020/02/22/flask-wtforms-%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="flask-wtforms-源码分析"><a href="#flask-wtforms-源码分析" class="headerlink" title=" flask wtforms 源码分析"></a><center> flask wtforms 源码分析</center></h2><a id="more"></a>

<h3 id="1-WTForms-组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示-默认没有开启CSRF保护"><a href="#1-WTForms-组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示-默认没有开启CSRF保护" class="headerlink" title="1. WTForms 组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示(默认没有开启CSRF保护)"></a>1. WTForms 组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示(默认没有开启CSRF保护)</h3><ul>
<li>安装组件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install flask-wtf</span><br><span class="line"><span class="comment"># flask-wtf 默认开启CSRF保护，文件上传功能与Flask集成</span></span><br><span class="line"><span class="comment"># 同时也按照了依赖包 wtforms;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从定义表单类开始分析流程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = StringField(</span><br><span class="line">        label=<span class="string">'用户名'</span>,  <span class="comment"># &lt;label for="name"&gt;用户名&lt;/label&gt;</span></span><br><span class="line">        validators=[validators.DataRequired()],</span><br><span class="line">        widget=widgets.TextInput(), <span class="comment"># 可以不用，有默认值</span></span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;, <span class="comment"># 为生成的&lt;input type="text" class="from-control"&gt;设置class</span></span><br><span class="line">        default=<span class="string">'alex'</span> <span class="comment"># 默认值</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=<span class="string">'密码'</span>,</span><br><span class="line">        validators=[validators.DataRequired(message=<span class="string">'密码不能为空.'</span>)],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd_confirm = PasswordField(</span><br><span class="line">        label=<span class="string">'重复密码'</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">'重复密码不能为空.'</span>),</span><br><span class="line">            validators.EqualTo(<span class="string">'pwd'</span>, message=<span class="string">'两次密码不一致.'</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<ul>
<li>Form类继承了元类的子类，所以它的子类都要调用元类的<code>__init__</code> 方法；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form继承了一个使用元类创建的类，那么类定义的时候就会执行元类的__init__方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span><span class="params">(with_metaclass<span class="params">(FormMeta, BaseForm)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="comment"># class NewBase(metaclass=FormMeta, BaseForm):  # python3写法</span></span><br><span class="line"><span class="comment">#		pass</span></span><br><span class="line"><span class="comment"># class NewBase(BaseForm):   # python2 写法</span></span><br><span class="line"><span class="comment">#		__metaclass__ = FormMeta</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_metaclass</span><span class="params">(meta, base=object)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> meta(<span class="string">"NewBase"</span>, (base,), &#123;&#125;) <span class="comment">#等价于创建一个名字是NewBase的类，同时指定了base为父类，没有传入任何类属性</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里就是元类的定义，就是为子类增加了两条属性；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># cls就是一个类对象，就是子类对象</span></span><br><span class="line">        <span class="comment"># name 就是类名</span></span><br><span class="line">        <span class="comment"># bases 就是cls的父类</span></span><br><span class="line">        <span class="comment"># attrs 就是类中定义的属性</span></span><br><span class="line">        type.__init__(cls, name, bases, attrs)</span><br><span class="line">        cls._unbound_fields = <span class="literal">None</span></span><br><span class="line">        cls._wtforms_meta = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这些所做的工作就是找出定义的所有字段，然后给类添加一个_unbound_fields的属性，属性值就是</span></span><br><span class="line">        <span class="comment"># [(字段名字， 字段的值)]  并且这个列表是按照你定义字段的上下顺序排过序的；</span></span><br><span class="line">        <span class="keyword">if</span> cls._unbound_fields <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            fields = []</span><br><span class="line">            <span class="comment"># dir(cls) 获取cls 以及它的父类，祖先类中定义的所有属性，除了元类中定义的类属性；</span></span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> dir(cls):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">                    unbound_field = getattr(cls, name)</span><br><span class="line">                    <span class="keyword">if</span> hasattr(unbound_field, <span class="string">'_formfield'</span>):</span><br><span class="line">                        fields.append((name, unbound_field))</span><br><span class="line">			<span class="comment"># 根据fields中的每个元素，对下标为1的子元素的creation_counter值进行排序，如果相同，则</span></span><br><span class="line">            <span class="comment"># 根据下标为0的元素排序</span></span><br><span class="line">            fields.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>].creation_counter, x[<span class="number">0</span>]))</span><br><span class="line">            cls._unbound_fields = fields</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls._wtforms_meta <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bases = []</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> mro_class <span class="keyword">in</span> cls.__mro__:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Meta'</span> <span class="keyword">in</span> mro_class.__dict__:</span><br><span class="line">                    bases.append(mro_class.Meta)</span><br><span class="line">            <span class="comment"># 为cls添加一个属性，属性值是一个类，这个类是Meta,Meta的父类为bases,没有任何类属性</span></span><br><span class="line">            <span class="comment"># 等价于</span></span><br><span class="line">            <span class="comment"># class Meta(bases):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            <span class="comment"># 这里如果定义的LoginForm没有Meta 属性的话，那么这里就只有一个类</span></span><br><span class="line">            <span class="comment"># class Meta(DefaultMeta):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            <span class="comment"># 如果定义的LoginForm添加了Meta类，用于修改Meta类的行为的话，那么这时候就会变成</span></span><br><span class="line">            <span class="comment"># class Meta(Meta, DefaultMeta):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            cls._wtforms_meta = type(<span class="string">'Meta'</span>, tuple(bases), &#123;&#125;)</span><br><span class="line">        <span class="comment">#   cls._wtforms_meta = Meta(bases)</span></span><br><span class="line">        <span class="keyword">return</span> type.__call__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h3 id="2-执行初始化如何做的"><a href="#2-执行初始化如何做的" class="headerlink" title="2.执行初始化如何做的"></a>2.执行初始化如何做的</h3><ul>
<li>当调用<code>form = LoginForm()</code>  发生了什么?</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># 这里的调用顺序为</span></span><br><span class="line">        <span class="comment"># 如果这个类或者它的父类是由元类创建，那么先调用元类的__call__ 方法</span></span><br><span class="line">        <span class="comment"># 类或者父类中是否有__new__,有的话将调用__new__方法；</span></span><br><span class="line">        <span class="comment"># 接下来根据__new__的返回值调用响应的__init__方法；</span></span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">"用户提交数据通过格式验证,提交的值为:"</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, form=form)</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行Form类的<code>__init__</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span><span class="params">(with_metaclass<span class="params">(FormMeta, BaseForm)</span>)</span>:</span></span><br><span class="line">    Meta = DefaultMeta</span><br><span class="line">	<span class="comment"># 可以传递formdata , obj, data 这三个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, formdata=None, obj=None, prefix=<span class="string">''</span>, data=None, meta=None, **kwargs)</span>:</span></span><br><span class="line"> 		<span class="comment"># 生成一个DefaultMet对象,与CSRF有关，默认没有开启</span></span><br><span class="line">        meta_obj = self._wtforms_meta() </span><br><span class="line">        <span class="keyword">if</span> meta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> isinstance(meta, dict):</span><br><span class="line">            meta_obj.update_values(meta)</span><br><span class="line">        <span class="comment"># 根据我们定义的LoginForm的__mro__属性值作为查找列表，从Form开始，找到它的下一个类，执行</span></span><br><span class="line">        <span class="comment"># __init__方法</span></span><br><span class="line">        super(Form, self).__init__(self._unbound_fields, meta=meta_obj, prefix=prefix)</span><br><span class="line">		<span class="comment"># 根据上面的结果，此时form._fields已经存储了&#123;'name': StringField_obj, 'pwd':PasswordField_obj&#125; 这样的信息</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">            <span class="comment"># 为form对象设置属性，如果定义了name字段，pwd字段，那么</span></span><br><span class="line">            <span class="comment"># form.name = StringField()</span></span><br><span class="line">            <span class="comment"># form.pwd = StringField()</span></span><br><span class="line">            setattr(self, name, field)</span><br></pre></td></tr></table></figure>

<ul>
<li><span style="color:red">self.process(formdata, obj, data=data, **kwargs) </span> 接下来将执行后面的<a id="return"><a href="#process">process</a> </a></li>
<li>根据上一步找到的父类，执行这里的<code>__init__</code> 方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseForm</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="comment"># 传过来的是 </span></span><br><span class="line">    <span class="comment"># fields = [('name', unbound_obj), ('pwd', unbound_obj)]</span></span><br><span class="line">    <span class="comment"># meta = DefaultMeta()</span></span><br><span class="line">    <span class="comment"># prefix = ''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fields, prefix=<span class="string">''</span>, meta=DefaultMeta<span class="params">()</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prefix <span class="keyword">and</span> prefix[<span class="number">-1</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'-_;:/.'</span>:</span><br><span class="line">            prefix += <span class="string">'-'</span></span><br><span class="line"></span><br><span class="line">        self.meta = meta</span><br><span class="line">        self._prefix = prefix</span><br><span class="line">        self._errors = <span class="literal">None</span></span><br><span class="line">        self._fields = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hasattr(fields, <span class="string">'items'</span>):</span><br><span class="line">            fields = fields.items()</span><br><span class="line"></span><br><span class="line">        translations = self._get_translations()</span><br><span class="line">        extra_fields = []</span><br><span class="line">        <span class="comment"># 如果为True的话，那么 extra_fields = [('csrf_token', unbound_obj)]</span></span><br><span class="line">        <span class="keyword">if</span> meta.csrf:</span><br><span class="line">            self._csrf = meta.build_csrf(self)</span><br><span class="line">            extra_fields.extend(self._csrf.setup_form(self))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, unbound_field <span class="keyword">in</span> itertools.chain(fields, extra_fields):</span><br><span class="line">            options = dict(name=name, prefix=prefix, translations=translations)</span><br><span class="line">            field = meta.bind_field(self, unbound_field, options)</span><br><span class="line">            <span class="comment"># 给form对象的_fields属性赋值为 &#123;'name': StringField(), 'pwd': PasswordField()&#125;</span></span><br><span class="line">            <span class="comment"># 至此初始化完成</span></span><br><span class="line">            self._fields[name] = field</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行<code>class DefaultMeta(object):</code> 的<code>bind_field</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind_field</span><span class="params">(self, form, unbound_field, options)</span>:</span></span><br><span class="line">	<span class="comment"># 这里就是执行定义的StringField, PassworldField的bind 方法</span></span><br><span class="line">       <span class="comment"># options=&#123;'name': name, 'prefix': prefix, 'translations': translations&#125;</span></span><br><span class="line">       <span class="keyword">return</span> unbound_field.bind(form=form, **options)</span><br></pre></td></tr></table></figure>

<ul>
<li>接着调用<code>class UnboundField(object):</code> 的<code>bind</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的参数名必须与 options的键名一致</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, form, name, prefix=<span class="string">''</span>, translations=None, **kwargs)</span>:</span></span><br><span class="line">      kw = dict(</span><br><span class="line">          self.kwargs,  <span class="comment"># 这里的就是定义字段的各个参数值，如valiations,label ...</span></span><br><span class="line">          _form=form,</span><br><span class="line">          _prefix=prefix,</span><br><span class="line">          _name=name,</span><br><span class="line">          _translations=translations,</span><br><span class="line">          **kwargs <span class="comment"># 目前为&#123;&#125;</span></span><br><span class="line">      )</span><br><span class="line">      <span class="comment"># 接下来再次调用各自field_class类的初始化函数</span></span><br><span class="line">      <span class="comment"># 比如: 调用StringField()的初始化函数，在自己定义关键字参数的基础上添加了</span></span><br><span class="line">      <span class="comment"># _from,_prefix,_name, _translations参数</span></span><br><span class="line">      <span class="keyword">return</span> self.field_class(*self.args, **kw)</span><br></pre></td></tr></table></figure>

<ul>
<li>接着调用这里的<code>__new__</code> 函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Field base class</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    errors = tuple()</span><br><span class="line">    process_errors = tuple()</span><br><span class="line">    raw_data = <span class="literal">None</span></span><br><span class="line">    validators = tuple()</span><br><span class="line">    widget = <span class="literal">None</span></span><br><span class="line">    _formfield = <span class="literal">True</span></span><br><span class="line">    _translations = DummyTranslations()</span><br><span class="line">    do_not_call_in_templates = <span class="literal">True</span>  <span class="comment"># Allow Django 1.4 traversal</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'_form'</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'_name'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="comment"># 这时候执行这个条件，也就是执行各自的__init__方法</span></span><br><span class="line">            <span class="keyword">return</span> super(Field, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># label='用户名',</span></span><br><span class="line">        <span class="comment"># validators=[</span></span><br><span class="line">        <span class="comment">#     validators.DataRequired('用户名不能为空.'),</span></span><br><span class="line">        <span class="comment">#     validators.Length(min=6, max=18, message='用户名长度必须大于%(min)d且小于%(max)d')</span></span><br><span class="line">        <span class="comment"># ],</span></span><br><span class="line">        <span class="comment"># widget=widgets.TextInput(),</span></span><br><span class="line">        <span class="comment"># render_kw=&#123;'class': 'form-control'&#125;</span></span><br><span class="line">            <span class="keyword">return</span> UnboundField(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>__init__</code> 方法终于可以执行了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, label=None, validators=None, filters=tuple<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              description=<span class="string">''</span>, id=None, default=None, widget=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              render_kw=None, _form=None, _name=None, _prefix=<span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _translations=None, _meta=None)</span>:</span></span><br><span class="line">   </span><br><span class="line">     <span class="keyword">if</span> _translations <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self._translations = _translations</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> _meta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.meta = _meta</span><br><span class="line">     <span class="keyword">elif</span> _form <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.meta = _form.meta</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">raise</span> TypeError(<span class="string">"Must provide one of _form or _meta"</span>)</span><br><span class="line"></span><br><span class="line">     self.default = default</span><br><span class="line">     self.description = description</span><br><span class="line">     self.render_kw = render_kw</span><br><span class="line">     self.filters = filters</span><br><span class="line">     self.flags = Flags()</span><br><span class="line">     self.name = _prefix + _name</span><br><span class="line">     self.short_name = _name</span><br><span class="line">     self.type = type(self).__name__</span><br><span class="line">     self.validators = validators <span class="keyword">or</span> list(self.validators)</span><br><span class="line"></span><br><span class="line">     self.id = id <span class="keyword">or</span> self.name</span><br><span class="line">     self.label = Label(self.id, label <span class="keyword">if</span> label <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> self.gettext(_name.replace(<span class="string">'_'</span>, <span class="string">' '</span>).title()))</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> widget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.widget = widget</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> v <span class="keyword">in</span> itertools.chain(self.validators, [self.widget]):</span><br><span class="line">         flags = getattr(v, <span class="string">'field_flags'</span>, ())</span><br><span class="line">         <span class="keyword">for</span> f <span class="keyword">in</span> flags:</span><br><span class="line">             <span class="comment"># 为 self.flags 设置 required = True</span></span><br><span class="line">             setattr(self.flags, f, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><a id="process">这里就是处理process的逻辑</a> , <a href="#return">返回上面调用的process</a> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self, formdata=None, obj=None, data=None, **kwargs)</span>:</span></span><br><span class="line">      formdata = self.meta.wrap_formdata(self, formdata)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="comment"># XXX we want to eventually process 'data' as a new entity.</span></span><br><span class="line">          <span class="comment">#     Temporarily, this can simply be merged with kwargs.</span></span><br><span class="line">          kwargs = dict(data, **kwargs)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> name, field, <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">          <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> hasattr(obj, name):</span><br><span class="line">              field.process(formdata, getattr(obj, name))</span><br><span class="line">          <span class="keyword">elif</span> name <span class="keyword">in</span> kwargs:</span><br><span class="line">              field.process(formdata, kwargs[name])</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              field.process(formdata)</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def process(self, formdata, data&#x3D;unset_value):</span><br><span class="line"></span><br><span class="line">      self.process_errors &#x3D; []</span><br><span class="line">      if data is unset_value:</span><br><span class="line">          try:</span><br><span class="line">              data &#x3D; self.default()</span><br><span class="line">          except TypeError:</span><br><span class="line">              data &#x3D; self.default</span><br><span class="line"></span><br><span class="line">      self.object_data &#x3D; data</span><br><span class="line"></span><br><span class="line">      try:</span><br><span class="line">          self.process_data(data)</span><br><span class="line">      except ValueError as e:</span><br><span class="line">          self.process_errors.append(e.args[0])</span><br><span class="line"></span><br><span class="line">      if formdata is not None:</span><br><span class="line">          if self.name in formdata:</span><br><span class="line">              self.raw_data &#x3D; formdata.getlist(self.name)</span><br><span class="line">          else:</span><br><span class="line">              self.raw_data &#x3D; []</span><br><span class="line"></span><br><span class="line">          try:</span><br><span class="line">              self.process_formdata(self.raw_data)</span><br><span class="line">          except ValueError as e:</span><br><span class="line">              self.process_errors.append(e.args[0])</span><br><span class="line"></span><br><span class="line">      try:</span><br><span class="line">          for filter in self.filters:</span><br><span class="line">              self.data &#x3D; filter(self.data)</span><br><span class="line">      except ValueError as e:</span><br><span class="line">          self.process_errors.append(e.args[0])</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="3-如何使用它？"><a href="#3-如何使用它？" class="headerlink" title="3. 如何使用它？"></a>3. 如何使用它？</h3><ul>
<li><code>print(form.name)</code> 将执行<code>StringField</code> 的<code>__str__</code> 方法 </li>
<li>同时在模板文件中使用 <code></code> 也将自动调用 <code>__str__</code> 方法，将转化为<code>HTML</code> 代码；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self()  <span class="comment"># 执行__call__</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, **kwargs)</span>:</span> <span class="comment"># 这里也可以直接 form.name() 可以传入关键字参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.meta.render_field(self, kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>DefaultMeta</code> 的<code>render_field</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_field</span><span class="params">(self, field, render_kw)</span>:</span></span><br><span class="line"></span><br><span class="line">    other_kw = getattr(field, <span class="string">'render_kw'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> other_kw <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        render_kw = dict(other_kw, **render_kw)</span><br><span class="line">    <span class="keyword">return</span> field.widget(field, **render_kw)  </span><br><span class="line"></span><br><span class="line"> widget = widgets.TextInput()  <span class="comment"># 对于 StringField类来说就是它</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>TextInput</code> 的<code>__call__()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, field, **kwargs)</span>:</span></span><br><span class="line">     <span class="comment"># 这里可以传入自定义'id' 和'type'</span></span><br><span class="line">     kwargs.setdefault(<span class="string">'id'</span>, field.id)  </span><br><span class="line">     kwargs.setdefault(<span class="string">'type'</span>, self.input_type)</span><br><span class="line">     <span class="keyword">if</span> <span class="string">'value'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">         kwargs[<span class="string">'value'</span>] = field._value()</span><br><span class="line">     <span class="keyword">if</span> <span class="string">'required'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'required'</span> <span class="keyword">in</span> getattr(field, <span class="string">'flags'</span>, []):</span><br><span class="line">         kwargs[<span class="string">'required'</span>] = <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> HTMLString(<span class="string">'&lt;input %s&gt;'</span> % self.html_params(name=field.name, **kwargs))</span><br></pre></td></tr></table></figure>

<ul>
<li>当执行<code>form.validate()</code> 函数时，执行字段的验证功能；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用就是查找类中是否自定义了 validate_字段名 这样的方法；</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self)</span>:</span></span><br><span class="line">     extra = &#123;&#125;</span><br><span class="line">     <span class="comment"># self._fields = &#123;'name': StingField(), 'pwd': PasswordField()&#125;</span></span><br><span class="line">     <span class="keyword">for</span> name <span class="keyword">in</span> self._fields: </span><br><span class="line">         inline = getattr(self.__class__, <span class="string">'validate_%s'</span> % name, <span class="literal">None</span>)</span><br><span class="line">         <span class="keyword">if</span> inline <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             extra[name] = [inline]</span><br><span class="line">     <span class="keyword">return</span> super(Form, self).validate(extra)</span><br></pre></td></tr></table></figure>

<ul>
<li>最终会调用 <code>BaseForm</code> 中的<code>validate</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, extra_validators=None)</span>:</span></span><br><span class="line"></span><br><span class="line">     self._errors = <span class="literal">None</span></span><br><span class="line">     success = <span class="literal">True</span></span><br><span class="line">     <span class="keyword">for</span> name, field <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">         <span class="keyword">if</span> extra_validators <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> name <span class="keyword">in</span> extra_validators:</span><br><span class="line">             extra = extra_validators[name]</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             extra = tuple()</span><br><span class="line">         <span class="comment"># 这里会最终去每个StringField, PasswordField中调用 validate(form, extra)</span></span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> field.validate(self, extra):</span><br><span class="line">             success = <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> success</span><br></pre></td></tr></table></figure>

<ul>
<li>最终调用validate(), 将错误存放在errors 这个列表中；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, form, extra_validators=tuple<span class="params">()</span>)</span>:</span></span><br><span class="line"> </span><br><span class="line">      self.errors = list(self.process_errors)</span><br><span class="line">      stop_validation = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Call pre_validate</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          self.pre_validate(form)</span><br><span class="line">      <span class="keyword">except</span> StopValidation <span class="keyword">as</span> e:</span><br><span class="line">          <span class="keyword">if</span> e.args <span class="keyword">and</span> e.args[<span class="number">0</span>]:</span><br><span class="line">              self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line">          stop_validation = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">          self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Run validators</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> stop_validation:</span><br><span class="line">          chain = itertools.chain(self.validators, extra_validators)</span><br><span class="line">          stop_validation = self._run_validation_chain(form, chain)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Call post_validate</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          self.post_validate(form, stop_validation)</span><br><span class="line">      <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">          self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> len(self.errors) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="4-对于获取表单中的数据方式"><a href="#4-对于获取表单中的数据方式" class="headerlink" title="4. 对于获取表单中的数据方式:"></a>4. 对于获取表单中的数据方式:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果使用formdata 参数传递，需要用request.form来进行赋值</span><br><span class="line"><span class="number">2.</span> 如果使用data参数传递，需要使用字典来进行赋值；</span><br><span class="line"><span class="number">3.</span> 获取表单中各个字段的数据通过 form.name.data来获取</span><br></pre></td></tr></table></figure>

<h3 id="5-使用flask-wtf扩展开启CSRF"><a href="#5-使用flask-wtf扩展开启CSRF" class="headerlink" title="5. 使用flask-wtf扩展开启CSRF"></a>5. 使用<code>flask-wtf</code>扩展开启CSRF</h3><p>总结：看源码学到的关于函数传递变参的知识：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, **kwargs)</span>:</span></span><br><span class="line">	print(a, kwargs)</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 这时候传参数的时候，不能仅仅认为kwargs就是一个字典，而直接传过去一个字典</span></span><br><span class="line"><span class="comment"># func(10, &#123;'hello': 'world'&#125;) # 这时候就会报错，它会说传递了两个参数，但是只能接收一个；</span></span><br><span class="line"><span class="comment"># 注意一定要是关键字参数的形式: kwargs=&#123;'hello': 'world'&#125;</span></span><br><span class="line"><span class="comment"># 或者func(a, **&#123;'hello': 'world'&#125;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二点就是在传递多个参数的时候可以这样做：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcA</span><span class="params">(a, b)</span>:</span></span><br><span class="line">	bdict = dict(name=<span class="string">'name'</span>, world=<span class="string">'w'</span>, translations=<span class="string">'trans'</span>)</span><br><span class="line">	funcB(**bdict) <span class="comment"># funcB 必须要有name, world，translations参数，或者其他的关键字参数也可以</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcB</span><span class="params">(name, world, translations, **kwargs)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>wtforms</tag>
      </tags>
  </entry>
  <entry>
    <title>python 多重继承与MRO</title>
    <url>/2020/02/21/python-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E4%B8%8EMRO/</url>
    <content><![CDATA[<h2 id="python多重继承-混入-Mixin-以及MRO"><a href="#python多重继承-混入-Mixin-以及MRO" class="headerlink" title="python多重继承,混入(Mixin),以及MRO"></a><center>python多重继承,混入(Mixin),以及MRO</center></h2><a id="more"></a>

<h3 id="1-不同python版本对Class-不同的解释"><a href="#1-不同python版本对Class-不同的解释" class="headerlink" title="1. 不同python版本对Class 不同的解释"></a>1. 不同python版本对<code>Class</code> 不同的解释</h3><ul>
<li>python2.7 中存在有经典类和新式类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span>  <span class="comment"># 经典类</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: len(dir(A))</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span><span class="keyword">pass</span>　<span class="comment"># 新式类</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: len(dir(B))</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">18</span></span><br></pre></td></tr></table></figure>

<ul>
<li>python3.x版本中,所有定义的类都是新式类，即便写法不一样；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span>      <span class="comment"># 新式类                                                                                                      </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: len(dir(A))                                                                                                              </span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">26</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span><span class="keyword">pass</span>   <span class="comment"># 新式类                                                                                                  </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: len(dir(B))                                                                                                              </span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">26</span></span><br></pre></td></tr></table></figure>

<ul>
<li>判断一个实例是否是一个类的对象时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(obj, Class) # 用来判断obj是否是class或者其父类的一个实例；</span><br><span class="line">type(obj) is Class  # 可以用来判断obj是否是Class创建，不能用来判断有继承关系的父类</span><br></pre></td></tr></table></figure>

<ul>
<li>与继承有关的特殊类方法，实例对象没有此方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__base__  <span class="comment"># 第一个父类</span></span><br><span class="line">__bases__  <span class="comment"># 父类组成的元祖</span></span><br><span class="line">__mro__ <span class="comment"># 方法解析顺序组成的元祖</span></span><br><span class="line">mro()   <span class="comment"># 返回方法解析顺序组成的列表</span></span><br><span class="line">__subclasses__() <span class="comment"># 类的子类组成的列表</span></span><br></pre></td></tr></table></figure>

<ul>
<li>私有属性在定义时，就会自动转变为<code>_class__attr</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">	__COUNT = <span class="number">100</span>   <span class="comment"># 内部已经转化为 _Animal__COUNT = 100</span></span><br><span class="line">    HEIGHT = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ini__</span><span class="params">(self, age, weight, height)</span>:</span></span><br><span class="line">            self.__COUNT += <span class="number">1</span>  <span class="comment"># 内部转化为self._Animal__COUNT = self._Animal__COUNT + 1</span></span><br><span class="line"> <span class="number">10</span>         self.age = age</span><br><span class="line"> <span class="number">11</span>         self.__weight = weight <span class="comment"># 内部转化为　self._Animal__weight = weight</span></span><br><span class="line"> <span class="number">12</span>         self.HEIGHT = height</span><br><span class="line"> <span class="number">13</span>  </span><br><span class="line"> <span class="number">14</span>     <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">15</span>         print(<span class="string">'&#123;&#125; eat'</span>.format(self.__class__.__name__))</span><br><span class="line"> <span class="number">16</span>  </span><br><span class="line"> <span class="number">17</span>     <span class="function"><span class="keyword">def</span> <span class="title">__getweight</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">18</span>         print(self.__weight) <span class="comment"># self._Animal__weight</span></span><br><span class="line"> <span class="number">19</span>  </span><br><span class="line"> <span class="number">20</span>     @classmethod</span><br><span class="line"> <span class="number">21</span>     <span class="function"><span class="keyword">def</span> <span class="title">showcount1</span><span class="params">(cls)</span>:</span>  </span><br><span class="line"> <span class="number">22</span>         print(cls)</span><br><span class="line"> <span class="number">23</span>         print(cls.__dict__) </span><br><span class="line"> <span class="number">24</span>         print(cls.__COUNT)  <span class="comment"># cls._Animal__COUNT</span></span><br><span class="line"> <span class="number">25</span>  </span><br><span class="line"> <span class="number">26</span>     @classmethod</span><br><span class="line"> <span class="number">27</span>     <span class="function"><span class="keyword">def</span> <span class="title">__showcount2</span><span class="params">(cls)</span>:</span>  <span class="comment"># self._Animal__showcount2(cls)</span></span><br><span class="line"> <span class="number">28</span>         print(cls.__COUNT)</span><br><span class="line"> <span class="number">29</span>  </span><br><span class="line"> <span class="number">30</span>     <span class="function"><span class="keyword">def</span> <span class="title">showcount3</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">31</span>         print(self.__COUNT) <span class="comment"># self._Animal__COUNT</span></span><br><span class="line"> <span class="number">32</span>  </span><br><span class="line"> <span class="number">33</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"> <span class="number">34</span>     NAME = <span class="string">'CAT'</span>   </span><br><span class="line"> <span class="number">35</span>     __COUNT = <span class="number">200</span>  <span class="comment"># self._Cat__COUNT</span></span><br><span class="line"> c = Cat(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c.__dict__</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">'HEIGHT'</span>: <span class="number">5</span>, <span class="string">'_Animal__COUNT'</span>: <span class="number">101</span>, <span class="string">'_Animal__weight'</span>: <span class="number">4</span>, <span class="string">'age'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Cat.__dict__</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">dict_proxy(&#123;<span class="string">'NAME'</span>: <span class="string">'CAT'</span>,</span><br><span class="line">            <span class="string">'_Cat__COUNT'</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">'__doc__'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'__module__'</span>: <span class="string">'study_subclass'</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: Animal.__dict__</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">dict_proxy(&#123;<span class="string">'HEIGHT'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'_Animal__COUNT'</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">'_Animal__getweight'</span>: &lt;function study_subclass.__getweight&gt;,</span><br><span class="line">            <span class="string">'_Animal__showcount2'</span>: &lt;classmethod at <span class="number">0x7ff0ae878f30</span>&gt;,</span><br><span class="line">            <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Animal'</span> objects&gt;,</span><br><span class="line">            <span class="string">'__doc__'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'__init__'</span>: &lt;function study_subclass.__init__&gt;,</span><br><span class="line">            <span class="string">'__module__'</span>: <span class="string">'study_subclass'</span>,</span><br><span class="line">            <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Animal'</span> objects&gt;,</span><br><span class="line">            <span class="string">'eat'</span>: &lt;function study_subclass.eat&gt;,</span><br><span class="line">            <span class="string">'showcount1'</span>: &lt;classmethod at <span class="number">0x7ff0ae878280</span>&gt;,</span><br><span class="line">            <span class="string">'showcount3'</span>: &lt;function study_subclass.showcount3&gt;&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: c.showcount1()  <span class="comment"># 把c的类传入cls中去</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">study_subclass</span>.<span class="title">Cat</span>'&gt;</span></span><br><span class="line">&#123;'__module__': 'study_subclass', '__doc__': None, 'NAME': 'CAT', '_Cat__COUNT': 200&#125;</span><br><span class="line"><span class="number">100</span>　<span class="comment"># 因为Cat.__dict__中没有_Animal__COUNT,所以到父类中找，找到了父类;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="2-多重继承问题"><a href="#2-多重继承问题" class="headerlink" title="2. 多重继承问题"></a>2. 多重继承问题</h3><ul>
<li><p>python支持多继承，但同时也带来了二义性(如何调用哪个父类中的方法)，提供了深度优先（经典类)和广度优先(新式类）策略来解决这样的问题</p>
</li>
<li><p>python2.７版本中的经典类中，类没有<code>mro()</code> 方法和<code>__mro__</code>属性，它的MRO执行顺序是这样的</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/mul.png" alt="经典类MRO执行策略"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">上面的执行顺序就是　F--&gt;E---&gt;B--&gt;A--&gt;D，然后Ｃ无法访问到（不知道原因）</span><br></pre></td></tr></table></figure>

<ul>
<li><p>新式类中使用的是 <code>C3算法</code>，解决了经典类中的无法访问到的问题(使用的是<code>深度优先算法</code>)，改进了(<code>广度优先算法</code>)中存在<code>单调性</code>问题（单调性指的就是一旦F(D, E) ,那么在Ｆ的所有子类中，访问顺序都是从D到Ｅ)</p>
<p>针对上面的继承关系，新式类的MRO顺序是下面这样的：</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/new.png" alt="新式类MRO顺序"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">新式类中mro执行顺序Ｆ--&gt;E--&gt;B--&gt;D--&gt;C--&gt;A--object</span><br></pre></td></tr></table></figure>

<p><strong>这里使用了Ｃ3算法，要生成F的继续顺序时(理解为调用mro()),首先将入度为０(指向该节点的箭头数量)的节点放入列表，并将F节点及与它有关的箭头从上图删除；继续寻找入度为０的节点，找到Ｅ和Ｄ,左侧优先的原则，将E放入列表，然后删除；接下来找到B和Ｄ,将Ｂ放入列表；接下来就是Ｄ,然后C,接下来就是Ａ,最后一个元素就是object</strong> </p>
</li>
<li><p>多重继承的情况下，可能存在重复调用问题，当每个子类中都使用<code>父类.属性名</code> 调用父类的方法时，父类重复调用, 为了解决这个问题，使用super()这个类就可以解决这个问题；</p>
</li>
</ul>
<h3 id="3-super与MRO"><a href="#3-super与MRO" class="headerlink" title="3.super与MRO"></a>3.super与MRO</h3><ul>
<li>新式类，都会自带<code>__mro__</code> 属性，当使用super()调用父类的方法时，会按照<code>__mro__</code> 属性中的元素逐个查找方法，如果找到就停止查找，如果没有找到就报错；</li>
<li>super()是一个类，可以接收的参数如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">super() <span class="comment"># 只能在python3中使用，与 super(cls, self)相同</span></span><br><span class="line"><span class="comment"># 第一个参数是类名，第二个参数是一个实例化对象，这个对象可以是子类的实例化对象</span></span><br><span class="line"><span class="comment"># 第一个参数type就是从__mro__找到的那个类的位置开始</span></span><br><span class="line"><span class="comment"># 第二个参数obj,决定的就是用哪个类的__mro__</span></span><br><span class="line">super(type, obj)</span><br><span class="line">super(type1, type2) <span class="comment"># 可以都是类，如果想使用super(F, F), 必须使用super(F, F).f(F())才能使用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用super()类，之所以能够解决上面的问题，关键在于它查找类的方式等同与下面的方式:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里cls就相当于 type, ins 相当于类的实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_query</span><span class="params">(cls, ins)</span>:</span> </span><br><span class="line">	cls_list = ins.__class__.mro()</span><br><span class="line">	<span class="keyword">return</span> cls_list[cls_list.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="4-在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现"><a href="#4-在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现" class="headerlink" title="4. 在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现."></a>4. 在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现.</h3><ul>
<li>Mixin设计模式的使用原则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mixin类不应该显式出现__init__ 初始化方法；</span><br><span class="line">Mixin类通常不能独立工作，混入其他类中的功能实现；</span><br><span class="line">Mixin类的祖先类应该也是Mixin类；</span><br><span class="line">使用Mixin类通常在继承列表的第一个位置；</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>MRO</tag>
      </tags>
  </entry>
  <entry>
    <title>flask cookie使用</title>
    <url>/2020/02/20/flask-cookie%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Flask-cookie使用"><a href="#Flask-cookie使用" class="headerlink" title="Flask cookie使用"></a><center>Flask cookie使用</center></h3><a id="more"></a>

<h3 id="1-设置和删除cookie"><a href="#1-设置和删除cookie" class="headerlink" title="1.设置和删除cookie"></a>1.设置和删除cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">"设置cookie"</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'username'</span>, <span class="string">'cgn'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'删除cookie'</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="2-设置cookie的过期时间"><a href="#2-设置cookie的过期时间" class="headerlink" title="2.设置cookie的过期时间"></a>2.设置cookie的过期时间</h3><ul>
<li>第一种方式使用<code>max_age</code> 参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_max_age')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set max age'</span>)</span><br><span class="line">    <span class="comment"># max_age使用's'为单位，默认值为None,表示随着浏览器关闭过期</span></span><br><span class="line">    ＃ 这时候表示过期时间是<span class="number">10</span>s后过期</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, max_age=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式使用<code>expires</code>参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_expires</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set expire '</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires) <span class="comment">#expires接收datetime对象</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>当同时使用<code>expires</code>, <code>max_age</code> 参数，那么将使用<code>max_age</code> 参数的值作为过期值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_age_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age_expire</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set age expire'</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires, max_age=<span class="number">30</span>) <span class="comment">#过期时间为30s</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="3-在子域名中如何获取cookie"><a href="#3-在子域名中如何获取cookie" class="headerlink" title="3. 在子域名中如何获取cookie"></a>3. 在子域名中如何获取cookie</h3><ul>
<li>第一步:在开发过程中可以通过设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">"SERVER_NAME"</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"><span class="comment"># 在/etc/hosts 文件中添加映射</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> test.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> bp.test.com</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步: 通过蓝图设置子域名访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, request</span><br><span class="line"></span><br><span class="line">sub_bp = Blueprint(<span class="string">'submin'</span>, __name__, subdomain=<span class="string">'bp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@sub_bp.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    get_key = request.cookies.get(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">return</span> get_key <span class="keyword">or</span> <span class="string">"Hello  none"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">'SERVER_NAME'</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(sub_bp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">    response = Response(<span class="string">"Hello world"</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'test'</span>, <span class="string">'cookie'</span>, domain=<span class="string">'.test.com'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>然后通过访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com:5000&#x2F;index  # 设置cookie</span><br><span class="line">http:&#x2F;&#x2F;bp.test.com:5000&#x2F;index # 在子域名中访问到cookie</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>python描述符</title>
    <url>/2020/02/20/python%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="再谈python中的descriptor"><a href="#再谈python中的descriptor" class="headerlink" title="再谈python中的descriptor"></a><center>再谈python中的descriptor</center></h2><a id="more"></a>

<h3 id="1-flask使用data-descriptor"><a href="#1-flask使用data-descriptor" class="headerlink" title="1. flask使用data descriptor"></a>1. flask使用data descriptor</h3><ul>
<li>查看flask内置session源码时，发现使用了实现<code>__get__</code> 和<code>__set__</code> 方法的类，于是查看了相关的资料，记录如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">     s = self.get_signing_serializer(app)</span><br><span class="line">     <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">     val = request.cookies.get(app.session_cookie_name) <span class="comment"># 获取session_cookie_name这个属性</span></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br><span class="line">     max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         data = s.loads(val, max_age=max_age)</span><br><span class="line">         <span class="keyword">return</span> self.session_class(data)</span><br><span class="line">     <span class="keyword">except</span> BadSignature:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)　＃Flask类中的属性</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:　　＃ 通过类访问 ConfigAttribute的对象</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]  ＃将调用app.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value <span class="comment">#将调用app.config[self.__name__] = value</span></span><br></pre></td></tr></table></figure>

<h3 id="2-分析使用-get-与-set"><a href="#2-分析使用-get-与-set" class="headerlink" title="2.分析使用__get__ 与__set__"></a>2.分析使用<code>__get__</code> 与<code>__set__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">TestDescriptor</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'get'</span>, self, obj, type)</span><br><span class="line">   ...:         <span class="keyword">return</span> obj</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'set'</span>, self, obj,  val)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'delete'</span>, self, obj)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = TestDescriptor()</span><br><span class="line">   ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: t.d  <span class="comment"># 通过实例对象访问属性</span></span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[4]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Test.d　＃通过类访问属性</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [7]:</span> t.d = <span class="string">'hello'</span>　　＃通过实例对象设置属性 调用d.__set__</span><br><span class="line">(<span class="string">'set'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: t.d　＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[8]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: Test.d ＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [10]:</span> Test.d = <span class="string">'hello'</span>  <span class="comment">#直接赋值，不会调用d.__set__ </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: t.d　　　＃　可以获得值</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d　＃　可以获得值</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="3-仅仅使用-get"><a href="#3-仅仅使用-get" class="headerlink" title="3. 仅仅使用__get__"></a>3. 仅仅使用<code>__get__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">DataDesc</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         <span class="keyword">return</span> (self, obj, type)</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">5</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = DataDesc()</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">6</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: t.d <span class="comment">#调用__get__</span></span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">(&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;,</span><br><span class="line"> &lt;__main__.Test at <span class="number">0x7f55399f62d0</span>&gt;,</span><br><span class="line"> __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: Test.d  ＃调用__get__</span><br><span class="line">Out[<span class="number">8</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">n [<span class="number">9</span>]: t.d = <span class="string">'hello'</span> </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: t.d </span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: Test.d</span><br><span class="line">Out[<span class="number">11</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d = <span class="string">'world'</span>  </span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: t.d</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: Test.d</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'world'</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过obj.attr 属性查找策略(优先级)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. attr是自动产生的属性（最高) 如：__class__，__str__</span><br><span class="line">2. 查找obj.__class__.__dict__ 也就是对象obj所在类中存在data descriptor对象attr(实现了&#96;__get__&#96; 和&#96;__set__&#96;方法),找到就返回&#96;__get__&#96;的执行结果，没有找到就到父类或者祖先类中查找是否有data descirptor,</span><br><span class="line">（实际上就是查找这个类属性是不是有data descriptor对象或者父类中是否存在这个对象，如果是就执行__get__方法）</span><br><span class="line">3. 就到obj.__dict__中查找，找到就返回，找不到就进入下一步;如果obj是一个类，找到descriptor就返回</span><br><span class="line">__get__的执行结果，或者普通属性的值，没有执行下一步；</span><br><span class="line">（实际上就是先查找当前类或者父类中有无此属性)</span><br><span class="line">４．在obj.__class__.__dict__中查找是否存在non-data descriptor(仅仅实现了&#96;__get__&#96;方法)，找到就返回&#96;__get__&#96; 的结果，如果找到一个普通属性，就直接返回；找不到就报AttributeError;</span><br></pre></td></tr></table></figure>

<p>通过obj.attr = value赋值策略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查找obj.__class__.__dict__中是否有data descriptor对象，有就调用`__set__` 方法，没有就去父类或者祖先类中查找是否有data descriptor,依然没有就进入下一步；</span><br><span class="line">２．直接在obj.__dict__中加入obj.__dict__[attr] = vlaue;</span><br></pre></td></tr></table></figure>

<p>执行顺序就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特殊类属性</span><br><span class="line">数据描述符</span><br><span class="line">实例属性</span><br><span class="line">非数据描述符</span><br><span class="line">__getattr__（如果定义了的话）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>flask session机制</title>
    <url>/2020/02/19/flask-session%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="flask-session机制"><a href="#flask-session机制" class="headerlink" title="flask session机制"></a><center>flask session机制</center></h2><a id="more"></a>

<h2 id="1-对于session处理从请求上下文执行push方法开始"><a href="#1-对于session处理从请求上下文执行push方法开始" class="headerlink" title="1. 对于session处理从请求上下文执行push方法开始"></a>1. 对于session处理从请求上下文执行push方法开始</h2><ul>
<li>首先执行ctx.push()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    session_interface = self.app.session_interface</span><br><span class="line">    ＃ 为请求上下文对象中的session对象赋值为　SecureCookieSession对象</span><br><span class="line">    self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:　＃只有当没有设置secret_key时执行它</span><br><span class="line">        <span class="comment"># 为self.session 赋值为　NullSession对象</span></span><br><span class="line">        self.session = session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来进入<code>class SecureCookieSessionInterface(SessionInterface):</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">      s = self.get_signing_serializer(app)</span><br><span class="line">      <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">      <span class="comment"># 从request.cookies中获取键'session'的值</span></span><br><span class="line">      val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()　＃第一次请求到来没有这个值，返回一个对象                         <span class="comment"># SecureCookieSession()</span></span><br><span class="line">      max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          data = s.loads(val, max_age=max_age)</span><br><span class="line">          <span class="keyword">return</span> self.session_class(data)　</span><br><span class="line">      <span class="keyword">except</span> BadSignature:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSession</span><span class="params">(CallbackDict, SessionMixin)</span>:</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">ctx = _request_ctx_stack.top</span><br><span class="line">  bp = ctx.request.blueprint</span><br><span class="line">  funcs = ctx._after_request_functions</span><br><span class="line">  <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">  <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">  <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">      response = handler(response)</span><br><span class="line">  <span class="comment"># 只要app.secret_key 被设置过，这里永远不会为False</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">      <span class="comment"># 最终执行这里的save_session </span></span><br><span class="line">      self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">  <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">      domain = self.get_cookie_domain(app)</span><br><span class="line">      path = self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># If the session is modified to be empty, remove the cookie.</span></span><br><span class="line">      <span class="comment"># If the session is empty, return without setting the cookie.</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> session: <span class="comment">#</span></span><br><span class="line">          <span class="keyword">if</span> session.modified:</span><br><span class="line">              response.delete_cookie(</span><br><span class="line">                  app.session_cookie_name, domain=domain, path=path</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Add a "Vary: Cookie" header if the session was accessed at all.</span></span><br><span class="line">      <span class="keyword">if</span> session.accessed:</span><br><span class="line">          response.vary.add(<span class="string">"Cookie"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.should_set_cookie(app, session):</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      httponly = self.get_cookie_httponly(app)</span><br><span class="line">      secure = self.get_cookie_secure(app)</span><br><span class="line">      samesite = self.get_cookie_samesite(app)</span><br><span class="line">      expires = self.get_expiration_time(app, session)</span><br><span class="line">      val = self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">      response.set_cookie(</span><br><span class="line">          app.session_cookie_name,</span><br><span class="line">          val,</span><br><span class="line">          expires=expires,</span><br><span class="line">          httponly=httponly,</span><br><span class="line">          domain=domain,</span><br><span class="line">          path=path,</span><br><span class="line">          secure=secure,</span><br><span class="line">          samesite=samesite,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="２-使用session-的方式"><a href="#２-使用session-的方式" class="headerlink" title="２. 使用session  的方式"></a>２. 使用<code>session</code>  的方式</h2><ul>
<li>如何设置session</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 设置session的键为'www', 值为'world </span></span><br><span class="line">    <span class="comment"># 操作session时候</span></span><br><span class="line">    <span class="comment"># 通过LocalProxy对象找到Local栈顶存储的请求上下文对象中的session属性</span></span><br><span class="line">    <span class="comment"># 执行__setitem__方法就是执行 SecureCookieSession对象的__setitem__方法</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    <span class="comment"># 默认为False,这时session的过期时间是当浏览器关闭时过期</span></span><br><span class="line">    <span class="comment"># 当设置为True时，这时session的过期时间为默认31天。</span></span><br><span class="line">    session.permanent = <span class="literal">True</span>  </span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)  <span class="comment"># 打印出设置的过期时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"set session"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如何更改session默认过期时间31天</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上面的基础上添加此配置</span></span><br><span class="line">app.config[<span class="string">'PERMANENT_SESSION_LIFETIME'</span>] = timedelta(hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取session的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/get')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    value = session.get(<span class="string">'www'</span>)  <span class="comment"># 获取session设置的键的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"get session %s"</span> % value</span><br></pre></td></tr></table></figure>

<ul>
<li>删除session中设置的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delte</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># session.pop('www') #删除session中'www'的键值对</span></span><br><span class="line">    <span class="comment"># del session['www']　# 删除session中 'www'的键值对</span></span><br><span class="line">    session.clear()　＃清空这个类似字典的容器</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"delete session</span></span><br></pre></td></tr></table></figure>

<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask中的session 实际上使用set_cookie 方法设置名字为session的cookie,他的值是将数据通过一定的算法得出的随机数,最终是存放在客户端中，因为如果想存储在其他位置，需要自定义session;同时session中的数据不能存放敏感数据，因为可以通过其他方法解析出来</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = <span class="string">'eyJfcGVybWFuZW50Ijp0cnVlLCJ3d3ciOnsiIGIiOiJkMjl5YkdRPSJ9fQ.Xk56XQ.SlMSH-1sIZQCixZRm5fC6uG3AVs'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: data, timestamp, secret = s.split(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: base64_decode(data)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'&#123;"_permanent":true,"www":&#123;" b":"d29ybGQ="&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-使用扩展-flask-session"><a href="#4-使用扩展-flask-session" class="headerlink" title="4.使用扩展　flask-session"></a>4.使用扩展　flask-session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">"SESSION_REDIS"</span>] = Redis(password=<span class="string">'studyredis'</span>)</span><br><span class="line"><span class="comment"># app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(days=2)</span></span><br><span class="line">app.secret_key = <span class="string">'sdfasdfas'</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中的信号</title>
    <url>/2020/02/19/flask%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="flask中的信号"><a href="#flask中的信号" class="headerlink" title="flask中的信号"></a><center>flask中的信号</center></h2><a id="more"></a>

<h3 id="1-flask中使用的信号"><a href="#1-flask中使用的信号" class="headerlink" title="1. flask中使用的信号"></a>1. flask中使用的信号</h3><ul>
<li>flask中的信号基于blinker,在请求过程中定制行为</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install blinker</span><br></pre></td></tr></table></figure>

<ul>
<li>信号对象有：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)＃　模板渲染之后执行</span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>) <span class="comment">#模板渲染之前执行</span></span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)＃请求到来之前</span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)＃请求结束之后</span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)＃请求执行完毕后自动执行(无论成功与否)</span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)＃请求执行出现异常执行</span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)＃　应用上下文执行完毕后自动执行(无论成功与否)</span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)＃应用上下文push</span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)＃应用上下文pop</span><br><span class="line">message_flashed = _signals.signal(<span class="string">"message-flashed"</span>)<span class="comment"># 向flash添加数据时</span></span><br></pre></td></tr></table></figure>

<h3 id="2-信号触发的区域"><a href="#2-信号触发的区域" class="headerlink" title="2. 信号触发的区域:"></a>2. 信号触发的区域:</h3><ul>
<li>开始(1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.try_trigger_before_first_request_functions() <span class="comment"># 执行@app.before_first_request</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 触发request_started信号</span></span><br><span class="line">    request_started.send(self)</span><br><span class="line">    rv = self.preprocess_request()</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        rv = self.dispatch_request()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    rv = self.handle_user_exception(e)</span><br><span class="line"><span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来(2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kfuncs = self.before_request_funcs.get(<span class="literal">None</span>, ()) </span><br><span class="line"><span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.before_request_funcs:</span><br><span class="line">    funcs = chain(funcs, self.before_request_funcs[bp])</span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">    rv = func()  <span class="comment"># 执行@app.before_request</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<ul>
<li>(3)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    req = _request_ctx_stack.top.request</span><br><span class="line">    <span class="keyword">if</span> req.routing_exception <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.raise_routing_exception(req)</span><br><span class="line">    rule = req.url_rule</span><br><span class="line">    <span class="comment"># if we provide automatic options for this URL and the</span></span><br><span class="line">    <span class="comment"># request came with the OPTIONS method, reply automatically</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        getattr(rule, <span class="string">"provide_automatic_options"</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">and</span> req.method == <span class="string">"OPTIONS"</span></span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> self.make_default_options_response()</span><br><span class="line">    <span class="comment"># otherwise dispatch to the handler for that endpoint</span></span><br><span class="line">    <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)<span class="comment"># 执行视图函数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>(4)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    ctx = _request_ctx_stack.top</span><br><span class="line">    bp = ctx.request.blueprint</span><br><span class="line">    funcs = ctx._after_request_functions</span><br><span class="line">    <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">        response = handler(response) <span class="comment">#　执行@app.after_request</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">        self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>(5)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request_finished.send(self, response=response) <span class="comment">#触发　request_finished 信号</span></span><br></pre></td></tr></table></figure>

<h3 id="3-定义信号处理函数"><a href="#3-定义信号处理函数" class="headerlink" title="3. 定义信号处理函数"></a>3. 定义信号处理函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, signals</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'测试触发'</span>)</span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">signals.request_started.connect(func)</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义信号"><a href="#4-自定义信号" class="headerlink" title="4. 自定义信号"></a>4. 自定义信号</h3><ol>
<li>导入模块</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line"></span><br><span class="line">namesapce = Namespace()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义一个信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立一个信号</span></span><br><span class="line">login_signal = namesapce.signal(<span class="string">'login'</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>监听信号及信号处理函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(sender)</span>:</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    now = datetime.now()</span><br><span class="line">    username = g.username</span><br><span class="line">    log_txt = <span class="string">"&#123;username&#125;/&#123;ip&#125;/&#123;now&#125;"</span>.format(username=username, ip=ip, now=now)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'log.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(<span class="string">'log'</span>)</span><br><span class="line">        f.write(log_txt + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听一个信号</span></span><br><span class="line">login_signal.connect(test_login)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>发送信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        g.username = username</span><br><span class="line">        login_signal.send()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>信号</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(3)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h2 id="flask学习-3"><a href="#flask学习-3" class="headerlink" title="flask学习(3)"></a><center>flask学习(3)</center></h2><a id="more"></a>

<h3 id="1-Flask的app上下文"><a href="#1-Flask的app上下文" class="headerlink" title="1.Flask的app上下文"></a>1.Flask的app上下文</h3><p>1.1 通过ctx.push()进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved:</span><br><span class="line">        top.pop(top._preserved_exc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before we push the request context we have to ensure that there</span></span><br><span class="line">    <span class="comment"># is an application context.</span></span><br><span class="line">    app_ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">        app_ctx = self.app.app_context()  <span class="comment"># 返回AppContext()对象</span></span><br><span class="line">        app_ctx.push() <span class="comment"># 将app_ctx对象通过LocalStack添加到Local中</span></span><br><span class="line">        self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._implicit_app_ctx_stack.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>1.2 AppContext类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app  <span class="comment"># 全局代理对象current_app　代理的就是这个app</span></span><br><span class="line">        self.url_adapter = app.create_url_adapter(<span class="literal">None</span>)</span><br><span class="line">        self.g = app.app_ctx_globals_class() <span class="comment"># 全局代理对象g 代理的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Like request context, app contexts can be pushed multiple times</span></span><br><span class="line">        <span class="comment"># but there a basic "refcount" is enough to track them.</span></span><br><span class="line">        self._refcnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Binds the app context to the current context."""</span></span><br><span class="line">        self._refcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">            sys.exc_clear()</span><br><span class="line">        _app_ctx_stack.push(self)</span><br><span class="line">        appcontext_pushed.send(self.app)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">        <span class="string">"""Pops the app context."""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._refcnt -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._refcnt &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel:</span><br><span class="line">                    exc = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                self.app.do_teardown_appcontext(exc)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            rv = _app_ctx_stack.pop()</span><br><span class="line">        <span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">"Popped wrong app context.  (%r instead of %r)"</span> % (rv, self)</span><br><span class="line">        appcontext_popped.send(self.app)</span><br><span class="line">＃　支持　<span class="keyword">with</span> 语法：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.push()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></span><br><span class="line">        self.pop(exc_value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> BROKEN_PYPY_CTXMGR_EXIT <span class="keyword">and</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            reraise(exc_type, exc_value, tb)</span><br></pre></td></tr></table></figure>

<p>1.3  应用上下文对象中的具体属性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_ctx_globals_class = _AppCtxGlobals  <span class="comment">#  g----&gt; 对应的类对象</span></span><br><span class="line"><span class="comment"># current_app 对应的就是　Flask()实例app</span></span><br></pre></td></tr></table></figure>

<p>1.4 </p>
<p>总结：程序上下文的生命周期：随着请求上下文的生命周期产生和销毁；每个请求都会创建新的请求上下文堆栈，因为也会创建新的程序上下文堆栈，所以g 会在每个请求中重设；</p>
<p>程序上下文可以在不需要请求存在的情况下使用(测试)，这时候只需要单独推送程序上下文，可以看到不同的程序运行状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, g, session, request</span><br><span class="line"><span class="comment"># 这时候所有的全局上下文对象都没有被绑定，处于程序设置状态</span></span><br><span class="line">In [<span class="number">2</span>]: app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: current_app, g, session, request</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">(&lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: app_ctx = app.app_context()</span><br><span class="line"><span class="comment"># 推送程序上下文后，程序上下文对象都绑定了各自的对象，　－－程序运行状态</span></span><br><span class="line">In [<span class="number">5</span>]: app_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: req_ctx = app.test_request_context()</span><br><span class="line"><span class="comment"># 推送请求上下文后，四个对象都绑定了各自的对象　－－－　请求运行态</span></span><br><span class="line">In [<span class="number">8</span>]: req_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;Request <span class="string">'http://localhost/'</span> [GET]&gt;,</span><br><span class="line"> &lt;NullSession &#123;&#125;&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="2-多app应用"><a href="#2-多app应用" class="headerlink" title="2.多app应用"></a>2.多app应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.middleware.dispatcher <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, globals</span><br><span class="line"><span class="keyword">from</span> flask.globals <span class="keyword">import</span> _app_ctx_stack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app1 = Flask(<span class="string">'app01'</span>)</span><br><span class="line">app2 = Flask(<span class="string">'app02'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route('/index1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"wwww"</span></span><br><span class="line"></span><br><span class="line">app = DispatcherMiddleware(app1, &#123;<span class="string">'/test'</span>: app2&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为脚本执行时，这时候就会出现同一个　'stack':对应多个值的情况，所有使用列表存储</span></span><br><span class="line"><span class="keyword">with</span> app1.app_context():</span><br><span class="line">    print(_app_ctx_stack._local.__storage__)</span><br><span class="line">    <span class="keyword">with</span> app2.app_context():</span><br><span class="line">        print(_app_ctx_stack._local.__storage__)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;]&#125;&#125;</span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x7f4712923c50</span>&gt;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">5000</span>, app, )</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>pymysql 与数据库连接池</title>
    <url>/2020/02/19/pymysql-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="pymysql以及DButils"><a href="#pymysql以及DButils" class="headerlink" title="pymysql以及DButils"></a><center>pymysql以及DButils</center></h2><a id="more"></a>

<ol>
<li>使用原生sql连接数据库(pymysql)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> ＃ 在下面的情况下，会出现问题，多线程并发执行，不能正确的获取打算的结果。</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span>      </span><br><span class="line"> <span class="number">7</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">8</span>                        database=<span class="string">'Tutorial'</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line"> <span class="number">9</span>      </span><br><span class="line"><span class="number">10</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">11</span>     cursor = CONN.cursor()</span><br><span class="line"><span class="number">12</span>     cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">13</span>     result = cursor.fetchall()</span><br><span class="line"><span class="number">14</span>     cursor.close()</span><br><span class="line"><span class="number">15</span>     print(result)</span><br><span class="line"><span class="number">16</span>      </span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">19</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">20</span>     t.start()</span><br></pre></td></tr></table></figure>

<p>２．解决方案之一，使用锁机制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span>      </span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span> <span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"> <span class="number">7</span>      </span><br><span class="line"> <span class="number">8</span> LOCK = RLock()</span><br><span class="line"> <span class="number">9</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, database=<span class="string">'Tutorial'</span>,            charset=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="number">10</span>      </span><br><span class="line"><span class="number">11</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">12</span>     <span class="keyword">with</span> LOCK:                                                                                                  </span><br><span class="line"><span class="number">13</span>         cursor = CONN.cursor()</span><br><span class="line"><span class="number">14</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">15</span>         result = cursor.fetchall()</span><br><span class="line"><span class="number">16</span>         cursor.close()</span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span>         print(result)</span><br><span class="line"><span class="number">19</span>      </span><br><span class="line"><span class="number">20</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">21</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">22</span>     t.start()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解决方案二, 使用DBUtils 模块创建线程池:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line">  <span class="number">3</span> <span class="keyword">import</span> threading</span><br><span class="line">  <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line">  <span class="number">5</span> <span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">  <span class="number">6</span>      </span><br><span class="line">  <span class="number">7</span> POOL = PooledDB(</span><br><span class="line">  <span class="number">8</span>         creator=pymysql, <span class="comment"># 使用的哪个模块连接数据库</span></span><br><span class="line">  <span class="number">9</span>         maxconnections=<span class="number">6</span>, <span class="comment">#连接池允许的最大连接数，０或者None表示不限制数量</span></span><br><span class="line"> <span class="number">10</span>         mincached=<span class="number">2</span>, <span class="comment"># 初始化时连接池最少创建的空闲连接，　０表示不创建</span></span><br><span class="line"> <span class="number">11</span>         maxcached=<span class="number">5</span>, <span class="comment"># 连接池中最多空闲的连接，　０或者None 表示不限制</span></span><br><span class="line"> <span class="number">12</span>        ＃ maxshared=<span class="number">3</span>,                                                                                                <span class="comment">#连接池中最多共享的连接数量，０或者None表示全部共享，因为pymysql和MySQLdb等模块的threadsafety都为１,                所以值无论设置为多少，_maxshared都是０,</span></span><br><span class="line"> <span class="number">13</span>         <span class="comment"># 所以所有连接都是共享连接,这个值不用设置就行</span></span><br><span class="line"> <span class="number">14</span>         blocking=<span class="literal">True</span>, <span class="comment"># 连接池如果没有可用连接后，是否阻塞等待，True:等待;False:不等待报错</span></span><br><span class="line"> <span class="number">15</span>         maxusage=<span class="literal">None</span>, <span class="comment"># 一个连接最多被重复使用的次数，None表示没有限制</span></span><br><span class="line"> <span class="number">16</span>         setsession=[], <span class="comment"># 开始回话前执行的命令列表　如["set time_zone ..."]</span></span><br><span class="line"> <span class="number">17</span>         ping=<span class="number">0</span>, <span class="comment">#ping MySQL服务器，检查服务是否可用，０或者None 表示Never, 1,默认（ｗhenever it is requested);      2(when a cursor is created)                                                                                     </span></span><br><span class="line"> <span class="number">18</span>         <span class="comment"># 4 (when a query is executed常用) ;7 (always常用）</span></span><br><span class="line"> <span class="number">19</span>         host=<span class="string">'localhost'</span>,</span><br><span class="line"> <span class="number">20</span>         port=<span class="number">3306</span>,</span><br><span class="line"> <span class="number">21</span>         user=<span class="string">'root'</span>,</span><br><span class="line"> <span class="number">22</span>         password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">23</span>         database=<span class="string">'Tutorial'</span></span><br><span class="line"> <span class="number">24</span>         )</span><br><span class="line"> <span class="number">25</span>      </span><br><span class="line"> <span class="number">26</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line"> <span class="number">27</span>         <span class="string">"""</span></span><br><span class="line"><span class="string"> 28         检查当前运行的连接数量是否小于最大连接数，如果大于，等待或者　raise TooManyConnections</span></span><br><span class="line"><span class="string">29         一旦关闭连接，连接就返回到连接池让后续线程使用</span></span><br><span class="line"><span class="string"> 30         :return:</span></span><br><span class="line"><span class="string"> 31         """</span></span><br><span class="line"> <span class="number">32</span>         conn = POOL.connection()</span><br><span class="line"> <span class="number">33</span>         cursor = conn.cursor()</span><br><span class="line"> <span class="number">34</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"> <span class="number">35</span>         result = cursor.fetchall()</span><br><span class="line"> <span class="number">36</span>         print(<span class="string">"线程&#123;&#125;: &#123;&#125;"</span>.format(arg, result))</span><br><span class="line"> <span class="number">37</span>         conn.close()</span><br><span class="line"> <span class="number">38</span>      </span><br><span class="line"> <span class="number">39</span>      </span><br><span class="line"> <span class="number">40</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> <span class="number">41</span>     t = threading.Thread(target=func, args=(i,))</span><br><span class="line"> <span class="number">42</span>     t.start()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(2)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h2 id="Flask-学习-2"><a href="#Flask-学习-2" class="headerlink" title="Flask 学习(2)"></a><center>Flask 学习(2)</center></h2><a id="more"></a>

<h3 id="1-flask请求上下文"><a href="#1-flask请求上下文" class="headerlink" title="1.flask请求上下文"></a>1.flask请求上下文</h3><p>１．从app.run()开始调用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    run_simple(host, port, self, **options) <span class="comment">#当请求进来时将调用self的__call__方法</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># reset the first request information if the development server</span></span><br><span class="line">    <span class="comment"># reset normally.  This makes it possible to restart the server</span></span><br><span class="line">    <span class="comment"># without reloader and that stuff from an interactive shell.</span></span><br><span class="line">    self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">    <span class="string">"""The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">    wrapped to applying middleware."""</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)　＃利用这个函数可以做中间件</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">       <span class="comment"># ctx 就是RequestContext(self, environ)的对象</span></span><br><span class="line">       ＃　ctx就封装了app,request,session</span><br><span class="line">       ctx = self.request_context(environ)  </span><br><span class="line">       error = <span class="literal">None</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               ＃　ctx入栈</span><br><span class="line">               ＃　 _request_ctx_stack.push(self)　请求上下文入栈</span><br><span class="line">               ctx.push() </span><br><span class="line">               response = self.full_dispatch_request()</span><br><span class="line">           <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">               error = e</span><br><span class="line">               response = self.handle_exception(e)</span><br><span class="line">           <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">               error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">               <span class="keyword">raise</span></span><br><span class="line">           <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">       <span class="keyword">finally</span>:</span><br><span class="line">           <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">               error = <span class="literal">None</span></span><br><span class="line">           ctx.auto_pop(error) 　<span class="comment"># 删除请求上下文对象（里面有app上下文对象的pop)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app  </span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ)　＃将请求相关的数据封装在Request中</span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line">        <span class="keyword">except</span> HTTPException <span class="keyword">as</span> e:</span><br><span class="line">            self.request.routing_exception = e</span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line">        self.session = session</span><br></pre></td></tr></table></figure>



<p>使用多线程处理请求时，如何保证直接导入的request对象就是当前请求的request对象？</p>
<p>Flask解决方案就是使用Werkzeug提供的Local类实现的(类似threading.local()),存放数据的同时记录下对应线程的ID,获取数据时根据所在线程的ID获取到对应的数据；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_app_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> top.app</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()  <span class="comment">#请求上下文堆栈</span></span><br><span class="line">_app_ctx_stack = LocalStack()　＃程序上下文堆栈</span><br><span class="line">＃　全局上下文代理对象(使用代理)</span><br><span class="line">current_app = LocalProxy(_find_app)　＃app上下文代理对象</span><br><span class="line"><span class="comment"># partial()返回一个新的函数对象　obj = partial(_lookup_req_object, "request")</span></span><br><span class="line"><span class="comment"># obj() 将调用_lookup_req_object("request")这个函数</span></span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))　＃请求上下文代理对象</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">"session"</span>))　＃请求上下文代理对象</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">"g"</span>))　＃app上下文代理对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implements_bool</span><br><span class="line">class LocalProxy(object):</span><br><span class="line">    __slots__ &#x3D; (&quot;__local&quot;, &quot;__dict__&quot;, &quot;__name__&quot;, &quot;__wrapped__&quot;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, local, name&#x3D;None):</span><br><span class="line">    	＃对私有变量的赋值通过_LoclaProxy__local实现</span><br><span class="line">        object.__setattr__(self, &quot;_LocalProxy__local&quot;, local)</span><br><span class="line">        object.__setattr__(self, &quot;__name__&quot;, name)</span><br><span class="line">        if callable(local) and not hasattr(local, &quot;__release_local__&quot;):</span><br><span class="line">            # &quot;local&quot; is a callable that is not an instance of Local or</span><br><span class="line">            # LocalManager: mark it as a wrapped function.</span><br><span class="line">            object.__setattr__(self, &quot;__wrapped__&quot;, local)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    def _get_current_object(self):</span><br><span class="line">        &quot;&quot;&quot;Return the current object.  This is useful if you want the real</span><br><span class="line">        object behind the proxy at a time for performance reasons or because</span><br><span class="line">        you want to pass the object into a different context.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not hasattr(self.__local, &quot;__release_local__&quot;):</span><br><span class="line">        	#通过self.__local()函数获取</span><br><span class="line">            return self.__local()</span><br><span class="line">        try:</span><br><span class="line">            return getattr(self.__local, self.__name__)</span><br><span class="line">        except AttributeError:</span><br><span class="line">            raise RuntimeError(&quot;no object bound to %s&quot; % self.__name__)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理Local()对象的一个栈</span></span><br><span class="line">＃这里使用LocalStack而不是直接使用Local，主要原因时为了支持多app共存</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local = Local() <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local.__release_local__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._local.__ident_func__</span><br><span class="line"></span><br><span class="line"><span class="meta">    @__ident_func__.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        object.__setattr__(self._local, <span class="string">"__ident_func__"</span>, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_lookup</span><span class="params">()</span>:</span></span><br><span class="line">            rv = self.top</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"object unbound"</span>)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(_lookup)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv　＃使用列表存储请求上文或者app上下文对象</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Removes the topmost item from the stack, will return the</span></span><br><span class="line"><span class="string">        old value or `None` if the stack was already empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            release_local(self._local)</span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">"__storage__"</span>, <span class="string">"__ident_func__"</span>) <span class="comment"># 对外能够被访问的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"__storage__"</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__ident_func__"</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        <span class="string">"""Create a proxy for a name."""</span></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br></pre></td></tr></table></figure>

<p>总结:</p>
<p>视图函数获取请求对象的方式:</p>
<p>Django使用传递request参数的方式来实现；</p>
<p>Flask使用上下文管理的方式来实现：</p>
<p>请求进来，将请求的所有数据封装在RequestContext对象中，然后将这个对象通过LocalStack放到Local中；</p>
<p>在视图中使用的时候，调用request的属性时，实际上调用的是LocalProxy的方法，获取真实的request对象的属性；</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(-)</title>
    <url>/2020/02/17/flask%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="flask学习"><a href="#flask学习" class="headerlink" title="flask学习(-)"></a><center>flask学习(-)</center></h2><a id="more"></a>

<p>flask作为轻量级，易于扩展的微型python web框架。Flask有两个依赖：一个是ＷSGI工具集(Werkzeug),一个是Jinja2模板引擎。Flask只保留web开发的核心功能，其他功能全靠外部扩展来实现(比如数据库集成，表单认证，文件上传)。WSGI是python中用来规定Web服务器如何与Python Web程序进行沟通的标准，与WSGI完全兼容的Flask能够配置到各种大型网络服务器中。</p>
<p>１．配置文件</p>
<ul>
<li><code>app.config[&#39;ADMIN_NAME&#39;] = &#39;cgn&#39; 单个配置</code></li>
<li><code>app.config.update(TESTING=True, SECRET_KEY=&#39;dsfsdfs&#39;) 多个配置</code></li>
<li><code>大型配置app.config.from_object(&#39;settings.DevelopmentConfig&#39;)</code></li>
</ul>
<p>２．路由器</p>
<ul>
<li>route()的常见参数有methods, endpoint,其他参数有</li>
<li>defaults: url没有参数，但是视图函数有参数的情况下，这里可以使用它</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/test', defaults=&#123;'id': 1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teset</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id is %s"</span> % id</span><br></pre></td></tr></table></figure>

<ul>
<li>redirect_to: 重定向到另一个位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/redirect', redirect_to='/test')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello redirect"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>​    subdomain:支持子域名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/www', subdomain='www')  # 访问　www.test.com:5000/www</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">www</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"www"</span></span><br><span class="line"><span class="comment"># 设置的前提：　app.config["SERVER_NAME"] = 'test.com:5000'</span></span><br><span class="line"><span class="comment"># 同时还需要修改 hosts文件，添加　127.0.0.1　www.test.com</span></span><br></pre></td></tr></table></figure>

<ul>
<li>strict_slashes: 是否严格的’/‘结尾</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/strict', strict_slashes=False) # strict_slashes=True, 严格url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strict</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"strict visit"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>基于装饰器实现，本质是通过　app.add_url_rule(rule, endpoint, view_func, **options)实现</li>
<li>除了基本的FBV,还可以实现CBV</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>]</span><br><span class="line">    decorators = [auth,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Index.GET"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index.POST"</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, view_func=IndexView.as_view(name=<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>内置的URL变量转换器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string: (默认值)不包括斜线的字符串 &lt;val&gt;</span><br><span class="line">int: &lt;int:year&gt; 整型</span><br><span class="line">float: &lt;flaot:val&gt; 浮点数</span><br><span class="line">path: &lt;path:path&gt; 包含斜线的字符串</span><br><span class="line">any: &lt;any(blue, white, red):color&gt; 匹配一系列给定值中的元素</span><br><span class="line">uuid: UUID字符串</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展URL变量转换器支持正则表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegerConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, regex)</span>:</span></span><br><span class="line">        super(RegerConverter, self).__init__(map)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 匹配成功时，传递给视图函数的参数的值</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        ＃使用url_for 反向生成url调用的函数</span><br><span class="line">        val = super(RegerConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegerConverter</span><br><span class="line">＃使用&lt;reger:test&gt; 这个转换器</span><br><span class="line"><span class="meta">@app.route('/index/&lt;reger("\d+"):test&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_test</span><span class="params">(test)</span>:</span></span><br><span class="line">    print(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello %s'</span> % test</span><br></pre></td></tr></table></figure>

<p>常见的错误:</p>
<ul>
<li>自定义装饰器，当给视图函数使用多个装饰器时，装饰器的顺序很重要，如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/detail/&lt;int:id&gt;', methods=['GET'], endpoint='detail_id')</span></span><br><span class="line"><span class="meta">@LoginRequired   # 访问之前要确认是否已经登录</span></span><br><span class="line">＃这个装饰器要放在@app.route的下面，如果放在上面，那么将不起任何作用，这时的理解是当请求到来的时候，执行的＃　视图处理函数就是＠app.route下面的函数，而在它上面的装饰器(如果有的话)的处理逻辑没有执行；</span><br><span class="line">＃同时这时候还需要给每个使用这个装饰器的函数添加endpoint参数，因为如果不添加，可能导致下面的错误</span><br><span class="line">＃因为视图函数的名字不能相同，这时候视图函数的名字都是wrapper</span><br><span class="line"><span class="comment"># AssertionError: View function mapping is overwriting an existing endpoint function: #wrapper</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_id</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> id <span class="keyword">in</span> data_dict:</span><br><span class="line">        info = data_dict[id]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'detail_id.html'</span>, info=info)</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的也可以通过修改装饰器函数(不添加endpoint)也可以实现,被装饰的视图函数的名字不同</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">	@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>３．模板语言</p>
<ul>
<li>向模板中传递html格式的字符串，如何标记为safe,使用　,或者通过Markup()</li>
<li>支持宏定义</li>
<li>其他语法与Django模板相似</li>
</ul>
<p>４．请求与响应</p>
<ul>
<li>请求的属性</li>
<li>返回值</li>
<li>如何定制响应相关的属性</li>
</ul>
<p>５．请求扩展</p>
<ul>
<li>@app.before_request 在每个请求之前都要执行被这个装饰器装饰的函数，可以有返回值，一旦返回值不是None,将拦截请求，或者重定向</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现每个请求之前检查用户是否登录，除了`/login`</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求之前'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/login'</span> == request.path:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<ul>
<li>@app.before_first_request,第一个请求到来的时候执行，不管是否有返回值都不会拦截</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_first_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是第一个请求'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>@app.after_request, 每个请求完成后都要执行的响应处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'bye bye'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p><strong>可以使用多个请求和多个响应处理函数，它们的执行顺序是，请求处理从上到下，而响应是从下到上,,如果第一个请求被拦截后，那么后面的请求不会执行，但是响应都会执行</strong> </p>
<ul>
<li>＠app.errorhandler定制错误处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Page not found'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>给模板自定义全局函数或者过滤器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_global</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  a1 + a2</span><br><span class="line"><span class="comment"># &#123;&#123; use_global(1, 2) &#125;&#125;</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment"># &#123;&#123; 3|use_filter(3, 4) &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>６．中间件</p>
<p>当请求到来的时候，实际上执行的是app.wsgi_app(environ, start_response)这个方法，利用这一点，我们可以在处理请求之前做一些事情，下面就是中间件的处理，仅仅打印一些信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之前'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        result = self.app(environ, start_response)</span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之后'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">app.wsgi_app = MyMiddleware(app.wsgi_app)</span><br></pre></td></tr></table></figure>



<p>７．闪现</p>
<ul>
<li>基于session实现的对临时数据的存取，主要应用显示消息</li>
<li>flash(‘message’)  —&gt;存消息</li>
<li>get_flashed_messages() —&gt;取出某个请求的所有消息，返回值是列表[(‘message’, ‘category’)],然后清空；</li>
</ul>
<p>８．蓝图</p>
<p>利用蓝图可以将应用分模块安排，可以按照功能模块化程序，同时蓝图可以有自己的静态文件夹和模板文件夹，另外蓝图也可以完成请求的扩展(注册路由，错误处理函数，上下文处理函数，请求处理函数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> views.admin <span class="keyword">import</span> admin_bp</span><br><span class="line"><span class="keyword">from</span> views.auth <span class="keyword">import</span> auth_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.register_blueprint(auth_bp, url_prefix=<span class="string">'/auth'</span>)</span><br><span class="line">app.register_blueprint(admin_bp, url_prefix=<span class="string">'/admin'</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Django with celery使用</title>
    <url>/2020/02/15/django-with-celery%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Django-with-celery使用"><a href="#Django-with-celery使用" class="headerlink" title=" Django with celery使用"></a><center> Django with celery使用</center></h2><a id="more"></a>

<ol>
<li>当前使用的环境:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">------------------------- -------</span><br><span class="line">amqp                      <span class="number">2.5</span><span class="number">.2</span>  </span><br><span class="line">asgiref                   <span class="number">3.2</span><span class="number">.3</span>  </span><br><span class="line">Babel                     <span class="number">2.8</span><span class="number">.0</span>  </span><br><span class="line">billiard                  <span class="number">3.6</span><span class="number">.2</span><span class="number">.0</span></span><br><span class="line">celery                    <span class="number">4.4</span><span class="number">.0</span>  </span><br><span class="line">Django                    <span class="number">3.0</span><span class="number">.3</span>  </span><br><span class="line">django-crispy-forms       <span class="number">1.8</span><span class="number">.1</span>  </span><br><span class="line">django-registration-redux <span class="number">2.7</span>    </span><br><span class="line">flower                    <span class="number">0.9</span><span class="number">.3</span>  </span><br><span class="line">importlib-metadata        <span class="number">1.5</span><span class="number">.0</span>  </span><br><span class="line">kombu                     <span class="number">4.6</span><span class="number">.7</span>  </span><br><span class="line">numpy                     <span class="number">1.18</span><span class="number">.1</span> </span><br><span class="line">pip                       <span class="number">20.0</span><span class="number">.2</span> </span><br><span class="line">pytz                      <span class="number">2019.3</span> </span><br><span class="line">redis                     <span class="number">3.4</span><span class="number">.1</span>  </span><br><span class="line">scipy                     <span class="number">1.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>项目目录结构</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DjangoCelery/</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── demoapp</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   ├── <span class="number">0001</span>_initial.py</span><br><span class="line">│   │   ├── <span class="number">0002</span>_jobmodel.py</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tasks.py  <span class="comment"># celery 任务模块</span></span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── DjangoCelery</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── celery.py　　　＃ celery实例模块</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── kill_celery.sh</span><br><span class="line">├── manage.py</span><br><span class="line">├── start_celery.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>与celery有关的文件</li>
</ol>
<ul>
<li><code>DjangoCelery/celery.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'DjangoCelery.settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'DjangoCelery'</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/__init__.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/settings.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># celery setting</span></span><br><span class="line"></span><br><span class="line">CELERY_BROKER_URL = <span class="string">'amqp://guest:guest@localhost'</span></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>]</span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:studyredis@localhost:6379/1'</span></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/tasks.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task, current_task</span><br><span class="line"><span class="keyword">from</span> demoapp.models <span class="keyword">import</span> Widget</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers)</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_widgets</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Widget.objects.count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_widget</span><span class="params">(wdiget_id, name)</span>:</span></span><br><span class="line">    w = Widget.objects.get(id=wdiget_id)</span><br><span class="line">    w.name = name</span><br><span class="line">    w.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用track_started=True 改变任务状态变化</span></span><br><span class="line"><span class="meta">@shared_task(track_started=True) # 任务状态从PEDDING--SUCCESS变化为PEDDING-STARTED-SUCCESS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fft_random</span><span class="params">(n)</span>:</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        x = random.normal(<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">2000</span>)</span><br><span class="line">        y = fft(x)</span><br><span class="line">        <span class="keyword">if</span> i == int(j * n / <span class="number">50</span>):</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"j=&#123;&#125;"</span>.format(j))</span><br><span class="line">            current_task.update_state(state=<span class="string">'PROGRESS'</span>, meta=&#123;<span class="string">'current'</span>: i, <span class="string">'total'</span>: n&#125;)</span><br><span class="line">    <span class="keyword">return</span> random.random()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/views.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, username)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'ffts'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           count = int(request.POST.get(<span class="string">'ffts'</span>))</span><br><span class="line">           print(count)</span><br><span class="line">           task = fft_random.delay(count)　＃开启任务</span><br><span class="line">           job = JobModel(user=request.user, task_id=task.task_id)</span><br><span class="line">           job.save()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'cancel_computation'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           task = get_active_task(request.user)</span><br><span class="line">           <span class="keyword">if</span> task:</span><br><span class="line">               celery_app.control.revoke(task.task_id, terminate=<span class="literal">True</span>) <span class="comment">#取消耗时任务</span></span><br><span class="line">               print(<span class="string">"About to cancel"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               print(<span class="string">'No active task to cancel.'</span>)</span><br><span class="line">       <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'demoapp:Profile'</span>, args=[request.user.username]))</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>启动worker,关闭worker方式</p>
<p>4.1 使用后台作业方式</p>
<ul>
<li>`celery worker -A DjangoCelery -l info &amp;``</li>
<li>``ps -ef |grep celery| grep -v grep |awk ‘{print $2}’ |xargs kill -9` </li>
</ul>
<p>4.2 使用<code>sudo systemctl start celery.service</code> 方式开启</p>
<p>  官网文档:<a href="https://docs.celeryproject.org/en/stable/userguide/daemonizing.html" target="_blank" rel="noopener">设置守护进程</a> </p>
<ul>
<li><p>首先要增加<code>celery.service</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> [Unit]</span><br><span class="line"> <span class="number">2</span> Description=Celery Service</span><br><span class="line"> <span class="number">3</span> After=network.target</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> [Service]</span><br><span class="line"> <span class="number">6</span> Type=forking</span><br><span class="line"> <span class="number">7</span> User=cgn</span><br><span class="line"> <span class="number">8</span> Group=cgn</span><br><span class="line"> <span class="number">9</span> EnvironmentFile=/etc/conf.d/celery</span><br><span class="line"><span class="number">10</span> WorkingDirectory=/home/cgn/study_celery_with_django/DjangoCelery</span><br><span class="line"><span class="number">11</span> ExecStart=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi start $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">12 &gt;---&gt;---  -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">13 &gt;---&gt;---  --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> ExecStop=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi stopwait $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">16 &gt;---&gt;--- --pidfile=$&#123;CELERYD_PID_FILE&#125;'</span></span><br><span class="line"><span class="number">17</span>  </span><br><span class="line"><span class="number">18</span> ExecReload=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi restart $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">19 &gt;---&gt;---   -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">20 &gt;---&gt;---   --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">21</span>  </span><br><span class="line"><span class="number">22</span> [Install]</span><br><span class="line"><span class="number">23</span> WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>sudo systemctl daemon-reload</code> ,每次修改之后都要先执行它</p>
</li>
<li><p>增加配置文件<code>/etc/conf.d/celery</code> </p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> CELERYD_NODES=<span class="string">"celery"</span></span><br><span class="line">  <span class="number">2</span>  </span><br><span class="line">  <span class="number">3</span>  </span><br><span class="line">  <span class="number">4</span> <span class="comment">#CELERY_BIN="/usr/local/bin/celery"</span></span><br><span class="line">  <span class="number">5</span> <span class="comment"># CELERY_BIN="/virtualenvs/bin/celery"</span></span><br><span class="line">  <span class="number">6</span> CELERY_BIN=<span class="string">"/home/cgn/.local/share/virtualenvs/study_celery_with_django-qMMGxLEz/bin/celery"</span></span><br><span class="line">  <span class="number">7</span>  </span><br><span class="line">  <span class="number">8</span> CELERY_APP=<span class="string">"DjangoCelery"</span></span><br><span class="line">  <span class="number">9</span> CELERYD_MULTI=<span class="string">"multi"</span></span><br><span class="line"> <span class="number">10</span>  </span><br><span class="line"> <span class="number">11</span> CELERYD_OPTS=<span class="string">"--time-limit=300 --concurrency=4"</span></span><br><span class="line"> <span class="number">12</span>  </span><br><span class="line"> <span class="number">13</span> CELERYD_PID_FILE=<span class="string">"/var/run/celery/%n.pid"</span></span><br><span class="line"> <span class="number">14</span> CELERYD_LOG_FILE=<span class="string">"/var/log/celery/%n%I.log"</span></span><br><span class="line"> <span class="number">15</span> CELERYD_LOG_LEVEL=<span class="string">"INFO"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过这个命令<code>systemd-tmpfiles --create /etc/tmpfiles.d/xxx.conf</code> 快速创建目录</p>
<p>例如　<code>/etc/tmpfiles.d/celery.conf</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d /var/run/celery <span class="number">0755</span> cgn cgn </span><br><span class="line">d /var/log/celery <span class="number">0755</span> cgn cgn</span><br></pre></td></tr></table></figure>

<p>命令解释如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--create</span><br><span class="line"> 	创建或者写入所有f,F,w,d,D,v,p,L,c,b,m标记的文件与目录</span><br><span class="line">--remove</span><br><span class="line">	删除D,R标记的目录中的内容，以及r,R标记的目录与文件本身</span><br><span class="line">--clean</span><br><span class="line">	清理所有过期的文件与目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置完成之后可以通过如下命令进行开启和停止</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo systemctl start celery.service</span><br><span class="line">sudo systemctl stop celery.service</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq初学习</title>
    <url>/2020/02/15/rabbitmq%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="rabbitmq初学习"><a href="#rabbitmq初学习" class="headerlink" title=" rabbitmq初学习"></a><center> rabbitmq初学习</center></h2><a id="more"></a>
<p>学习地址: <a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">rabbitmq在python中的使用</a> </p>
<p>AMQP消息路由必须有三部分:交换器，队列和绑定；</p>
<p>生产者将消息发布到交换器上，消息最终到达队列，并被消费者接收；绑定决定了消息如何从交换器路由到特定的队列。</p>
<p>1.目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study_rabbitmq/</span><br><span class="line">├── receive_message.py</span><br><span class="line">└── send_message.py</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>receive_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">6</span>  </span><br><span class="line"> <span class="number">7</span> channel = connection.channel()　＃发送消息都要通过信道</span><br><span class="line"> <span class="number">8</span> <span class="comment"># 这个code不必重复使用，如果我们已经确定这个hello队列已经存在的话，如果不确定，那么就需要写上(可重复使用，只在第一次被创建)</span></span><br><span class="line"> <span class="number">9</span> channel.queue_declare(queue=<span class="string">'hello'</span>)　＃创建队列</span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="number">11</span>  </span><br><span class="line"><span class="number">12</span> <span class="comment"># 无论何时接收到消息，回调函数都将被调用</span></span><br><span class="line"><span class="number">13</span> <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line"><span class="number">14</span>     print(<span class="string">"[x] Received %r"</span> % body)</span><br><span class="line"><span class="number">15</span>  </span><br><span class="line"><span class="number">16</span> <span class="comment"># 从'hello'这个队列中接收消息，同时对于接收到的消息都要确认(通过auto_ack=True自动确认)</span></span><br><span class="line">＃ 确认之后rabbitmq 才会把这条消息从队列中删除掉；</span><br><span class="line"><span class="number">17</span> channel.basic_consume(queue=<span class="string">'hello'</span>, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"><span class="number">18</span>  </span><br><span class="line"><span class="number">19</span> print(<span class="string">"[*] Waiting for messages.To exit press CTRL+C"</span>)</span><br><span class="line"><span class="number">20</span> <span class="comment"># 开启循环等待消息到来,调用回调函数</span></span><br><span class="line"><span class="number">21</span> channel.start_consuming()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>send_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> time</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">5</span>  </span><br><span class="line"> <span class="number">6</span> <span class="comment"># 建立与rabbitmq server的连接</span></span><br><span class="line"> <span class="number">7</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">8</span> channel = connection.channel()</span><br><span class="line"> <span class="number">9</span> <span class="comment"># 创建一个接收我们消息的queue</span></span><br><span class="line"><span class="number">10</span> channel.queue_declare(queue=<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">11</span> <span class="comment"># rabbitmq 不能直接发送消息到队列中，必须通过exchange,这里使用默认exchange(一个空字符串)</span></span><br><span class="line"><span class="number">12</span> <span class="comment"># routing_key 指定队列的名字，使用这个交换器根据routing_key决定将消息发送到哪个队列中</span></span><br><span class="line"><span class="number">13</span> channel.basic_publish(exchange=<span class="string">''</span>, routing_key=<span class="string">'hello'</span>, body=<span class="string">'hello world!'</span>)</span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> print(<span class="string">"[x] Sent 'hello world!'"</span>)</span><br><span class="line"><span class="number">16</span> connection.close()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行过程</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.启动 consumer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python receive_message.py </span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages.To exit press CTRL+C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打开另一个终端启动　producer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python send_message.py </span><br><span class="line">[x] Sent <span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看队列情况</span></span><br><span class="line"> sudo rabbitmqctl list_queues</span><br><span class="line"> hello	<span class="number">0</span></span><br><span class="line"></span><br><span class="line">＃４．查看消息是否被接收，消息被处理后是否发送确认标志</span><br><span class="line">~/study_rabbitmq$ sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br><span class="line">hello	<span class="number">0</span>	<span class="number">0</span></span><br><span class="line">＃ <span class="number">5.</span> 可以使用如下命令删除这个没有意义的队列</span><br><span class="line">sudo rabbitmqctl stop_app</span><br><span class="line">sudo rabbitmqctl reset</span><br><span class="line">sudo rabbitmqctl start_app</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>celery初认识</title>
    <url>/2020/02/08/celery%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h3 id="celery初认识"><a href="#celery初认识" class="headerlink" title="celery初认识"></a><center>celery初认识</center></h3><a id="more"></a>

<h4 id="1-在python2-7环境下使用"><a href="#1-在python2-7环境下使用" class="headerlink" title="1. 在python2.7环境下使用"></a>1. 在python2.7环境下使用</h4><p>1.1 单个任务执行</p>
<ul>
<li>准备环境</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install --python <span class="number">2.7</span></span><br><span class="line">pipenv install celery</span><br><span class="line">pipenv install redis</span><br></pre></td></tr></table></figure>

<ul>
<li><p>celery_app_task.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line">backend = <span class="string">'redis://:studyredis@127.0.0.1:6379/1'</span></span><br><span class="line">broker = <span class="string">'redis://:studyredis@127.0.0.1:6379/2'</span></span><br><span class="line"></span><br><span class="line">cel = celery.Celery(<span class="string">'test'</span>, backend=backend, broker=broker)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
</li>
<li><p>add_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>check_result.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">''</span>, app=cel)  <span class="comment"># 这里的 id为result.id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.gete()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始执行'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始执行：</p>
<ul>
<li><code>celery  worker -A celery_app_task -l info</code> 启动工作队列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40-70 v4.4.0 (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-4.4.0-173-generic-x86_64-with-Ubuntu-16.04-xenial 2020-02-08 17:13:07</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         test:0x7f3f8bbdc5d0</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;1</span><br><span class="line">- *** --- * --- .&gt; concurrency: 4 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_app_task.add</span><br><span class="line"></span><br><span class="line">[2020-02-08 17:13:07,576: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">[2020-02-08 17:13:07,581: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-02-08 17:13:08,597: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2020-02-08 17:13:08,615: INFO&#x2F;MainProcess] celery@cgn-Lenovo-S40-70 ready.</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>向任务队列中添加任务</p>
<p><code>python add_task.py</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-02-08 17:13:55,164: INFO&#x2F;MainProcess] Received task: celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce]  </span><br><span class="line">[2020-02-08 17:13:55,170: INFO&#x2F;ForkPoolWorker-1] Task celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce] succeeded in 0.00431576301344s: 7</span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<p>  1.2 多任务添加到消息中间件中</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>├── celery_task<br>│   ├── celery_app.py<br>│   ├── <strong>init</strong>.py<br>│   ├── task_one.py<br>│   └── task_two.py<br>├── my_celery.py<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- celery_app.py</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding&#x3D;utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">celery_task &#x3D; Celery(&quot;task&quot;,</span><br><span class="line">                     broker&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;1&quot;,</span><br><span class="line">                     backend&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;2&quot;,</span><br><span class="line">                     include&#x3D;[&quot;celery_task.task_one&quot;, &quot;celery_task.task_two&quot;])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">two.delay(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启ｗorker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task.celery_app -l info</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9c486e9d0</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">411</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">417</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">433</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">443</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">771</span>: INFO/MainProcess] Received task: celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">773</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">782</span>: INFO/ForkPoolWorker<span class="number">-1</span>] Task celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a] succeeded <span class="keyword">in</span> <span class="number">5.00957920798</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">789</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7] succeeded <span class="keyword">in</span> <span class="number">5.01353460201</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-在python3-6-环境下如何使用？"><a href="#2-在python3-6-环境下如何使用？" class="headerlink" title="2. 在python3.6 环境下如何使用？"></a>2. 在python3.6 环境下如何使用？</h3><p>２.1  添加多个任务到任务队列中</p>
</li>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py   <span class="comment"># 必须使用这个名字</span></span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br><span class="line"></span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9fc743eb8</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">819</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">828</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">847</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">857</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务到消息中间件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">251</span>: INFO/MainProcess] Received task: celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">253</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-2</span>] Task celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1] succeeded <span class="keyword">in</span> <span class="number">5.015381631994387</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">50</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8] succeeded <span class="keyword">in</span> <span class="number">5.016119522973895</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3. 定时任务"></a>3. 定时任务</h3><p>3.1 在python3.6环境下实现定时10s后执行，使用如下：</p>
<ul>
<li><p>目录结构如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc_time = datetime.utcfromtimestamp(time.time()) <span class="comment">#这里必须使用utc时间</span></span><br><span class="line">add_time = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">action_time = utc_time + add_time</span><br><span class="line"></span><br><span class="line">res = one.apply_async(args=(<span class="number">10</span>, <span class="number">10</span>), eta=action_time) <span class="comment">#　定时10s后执行</span></span><br><span class="line">print(res.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7f5c2b12de80</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">726</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">736</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">757</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">772</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>将定时任务添加到任务队列中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">34</span>,<span class="number">567</span>: INFO/MainProcess] Received task: celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965]  ETA:[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">44.447419</span>+<span class="number">00</span>:<span class="number">00</span>] </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">49</span>,<span class="number">652</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965] succeeded <span class="keyword">in</span> <span class="number">5.012816867005313</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.2 实现周期性定时任务</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每10s执行一次celery_task.task_one,参数是(10, 10)</span></span><br><span class="line">celery_task.conf.beat_schedule = &#123;</span><br><span class="line">        <span class="string">"each10s_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>, <span class="comment"># 任务函数</span></span><br><span class="line">            <span class="string">"schedule"</span>: <span class="number">10</span>, <span class="comment"># 每10s执行一次　＃频率</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each1m_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(minute=<span class="number">1</span>),  <span class="comment"># 每一分钟执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each24hours_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(hour=<span class="string">'*/24'</span>),  <span class="comment"># 每24小时执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>task_one.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开始生产出周期性任务,需要一个生产者beat</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">celery beat -A celery_task</span><br><span class="line"></span><br><span class="line">celery beat v4<span class="number">.4</span><span class="number">.0</span> (cliffs) <span class="keyword">is</span> starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-02-08 20:47:44</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; redis://:**@127.0.0.1:6379/1</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%WARNING</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br></pre></td></tr></table></figure>

<ul>
<li>开启worker </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>分析中间件CsrfViewMiddleware源码</title>
    <url>/2020/01/28/%E5%88%86%E6%9E%90%E4%B8%AD%E9%97%B4%E4%BB%B6CsrfViewMiddleware%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="CsrfViewMiddleware-源码分析"><a href="#CsrfViewMiddleware-源码分析" class="headerlink" title=" ＣsrfViewMiddleware 源码分析"></a><center> <code>ＣsrfViewMiddleware</code> 源码分析</center></h3><a id="more"></a>

<ol>
<li><p>流程图</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/CsrfViewMiddleware.jpg" alt="avatar"></p>
</li>
</ol>
<ol start="2">
<li>源码分析</li>
</ol>
<ul>
<li>在工程的配置文件要有中间件 <code>CsrfViewMiddleware</code> 才能使用<code>csrf</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>请求进来，首先通过各个中间件的<code>process_requst</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="comment"># 第一次请求，返回None</span></span><br><span class="line">       csrf_token = self._get_token(request)</span><br><span class="line">       <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="comment"># Use same token next time.</span></span><br><span class="line">           request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_get_token</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               <span class="keyword">return</span> request.session.get(CSRF_SESSION_KEY)</span><br><span class="line">           <span class="keyword">except</span> AttributeError:</span><br><span class="line">               <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                   <span class="string">'CSRF_USE_SESSIONS is enabled, but request.session is not '</span></span><br><span class="line">                   <span class="string">'set. SessionMiddleware must appear before CsrfViewMiddleware '</span></span><br><span class="line">                   <span class="string">'in MIDDLEWARE%s.'</span> % (<span class="string">'_CLASSES'</span> <span class="keyword">if</span> settings.MIDDLEWARE <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">               )</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           ＃ 默认配置中，CSRF_USE_SESSIONS 为<span class="literal">False</span>，总不会执行</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">           ＃　第一次请求，没有cookie，返回<span class="literal">None</span></span><br><span class="line">               cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]</span><br><span class="line">           <span class="keyword">except</span> KeyError:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">           csrf_token = _sanitize_token(cookie_token)</span><br><span class="line">           <span class="keyword">if</span> csrf_token != cookie_token:</span><br><span class="line">               <span class="comment"># Cookie token needed to be replaced;</span></span><br><span class="line">               <span class="comment"># the cookie needs to be reset.</span></span><br><span class="line">               request.csrf_cookie_needs_reset = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> csrf_token</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后找到路由系统，根据请求的URL,找到对应的视图处理函数，然后再在各个中间件中找寻process_view</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> getattr(request, <span class="string">'csrf_processing_done'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">       <span class="keyword">if</span> getattr(callback, <span class="string">'csrf_exempt'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span>	</span><br><span class="line">       <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>):</span><br><span class="line">           <span class="keyword">if</span> request.is_secure():  <span class="comment"># 如果是　https请求</span></span><br><span class="line">                   referer = force_text(</span><br><span class="line">                   request.META.get(<span class="string">'HTTP_REFERER'</span>),</span><br><span class="line">                   strings_only=<span class="literal">True</span>,</span><br><span class="line">                   errors=<span class="string">'replace'</span></span><br><span class="line">               )</span><br><span class="line">               <span class="keyword">if</span> referer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_REFERER)</span><br><span class="line">          　　　....</span><br><span class="line">            csrf_token = request.META.get(<span class="string">'CSRF_COOKIE'</span>)</span><br><span class="line">            <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 为空，直接拒绝</span></span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_CSRF_COOKIE)</span><br><span class="line">  　　　　　　　　request_csrf_token = <span class="string">""</span></span><br><span class="line">           　<span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   request_csrf_token = request.POST.get(<span class="string">'csrfmiddlewaretoken'</span>, <span class="string">''</span>)</span><br><span class="line">               <span class="keyword">except</span> IOError:</span><br><span class="line">                   <span class="keyword">pass</span></span><br><span class="line">             <span class="keyword">if</span> request_csrf_token == <span class="string">""</span>:</span><br><span class="line">                   request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, <span class="string">''</span>)</span><br><span class="line">             request_csrf_token = _sanitize_token(request_csrf_token)</span><br><span class="line">             <span class="comment"># 比较请求头中的csrf_token 与从表单提交数据中获取的 request_csrf_token是否符合规则</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> _compare_salted_tokens(request_csrf_token, csrf_token):</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_BAD_TOKEN)</span><br><span class="line">        </span><br><span class="line">       <span class="comment"># 对于get, head, options, trace请求方法，直接跳过检查</span></span><br><span class="line">  　　　　　<span class="keyword">return</span> self._accept(request)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行真正的视图处理函数，如果返回的是渲染后的表单，同时表单中有标签  ,那么在渲染这个标签的时候，将调用get_token() 函数，这个函数的作用有两方面</p>
<ul>
<li>为请求头添加<code>CSRF_COOKIE</code> 属性，值为随机生成的64位<code>ascii</code>值</li>
<li>为表单隐藏的字段<code>csrfmiddlewaretoken</code> 赋值</li>
<li>设置请求头<code>CSRF_COOKIE_USED</code> 为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"CSRF_COOKIE"</span> <span class="keyword">not</span> <span class="keyword">in</span> request.META:</span><br><span class="line">               csrf_secret = _get_new_csrf_string()</span><br><span class="line">               request.META[<span class="string">"CSRF_COOKIE"</span>] = _salt_cipher_secret(csrf_secret)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               csrf_secret = _unsalt_cipher_token(request.META[<span class="string">"CSRF_COOKIE"</span>])</span><br><span class="line">           request.META[<span class="string">"CSRF_COOKIE_USED"</span>] = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> _salt_cipher_secret(csrf_secret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行<code>process_response</code> 响应，根据上面<code>get_token</code> 被调用，将执行<code>_set_token()</code> 函数，为响应设置<code>cookie</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">          <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">              <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 执行过 get_token后，这个条件不成立</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>): </span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">      ＃　为返回的响应设置cookie</span><br><span class="line">      self._set_token(request, response)</span><br><span class="line">      response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_set_token</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">          request.session[CSRF_SESSION_KEY] = request.META[<span class="string">'CSRF_COOKIE'</span>]</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          response.set_cookie(</span><br><span class="line">              settings.CSRF_COOKIE_NAME,　＃　cookie键为　csrftoken</span><br><span class="line">              request.META[<span class="string">'CSRF_COOKIE'</span>], <span class="comment"># 对应的值为　get_token函数生成的值</span></span><br><span class="line">              max_age=settings.CSRF_COOKIE_AGE,</span><br><span class="line">              domain=settings.CSRF_COOKIE_DOMAIN,</span><br><span class="line">              path=settings.CSRF_COOKIE_PATH,</span><br><span class="line">              secure=settings.CSRF_COOKIE_SECURE,</span><br><span class="line">              httponly=settings.CSRF_COOKIE_HTTPONLY,</span><br><span class="line">          )</span><br><span class="line">          <span class="comment"># Set the Vary header since content varies with the CSRF cookie.</span></span><br><span class="line">          patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>对get,head, options, trace这样的方法，不做<code>csrf</code>认证</p>
</li>
<li><p>只有当表单中使用了 这样的标签后，调用<code>get_token</code> 方法，为表单中与<code>csrf</code> 有关的字段赋值，同时这个值会随着每次请求而发生变化；</p>
</li>
<li><p>对于post,put, patch, delete 这样的请求，都会做出验证，如果想要不对这些做出认证，方法可以有</p>
<ul>
<li><p>不使用这个中间件</p>
</li>
<li><p>使用<code>csrf_exempt</code> 这个装饰器</p>
</li>
<li><p>如果是类视图中的函数，可以为类添加<code>@method_decorator(csrf_exempt, name=&#39;dispatch&#39;)</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>study-心理路线</title>
    <url>/2020/01/28/study-%E5%BF%83%E7%90%86%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="自觉持续的勤奋"><a href="#自觉持续的勤奋" class="headerlink" title=" 自觉持续的勤奋"></a><center> 自觉持续的勤奋</center></h2><a id="more"></a>

<p>​    如果身在职场，人微言轻，家境平平，那么持续性的自律和勤奋就是我的出路。我也曾经这样考虑过，我跑步的速度赶不上别人，我唯一能够做的就是持续性的跑步，我的速度不如人家，那就训练坚持跑的意志，这是我觉得是唯一一件主观上要发挥自己能力需要锻炼自己的事情。第一份工作就是自己没有好好考虑好，没有危机感，总感觉自己生活还行，从不知要修炼自己的能力，最近两年都处在恍恍惚惚中，好像又回到了学校里的焦虑时光，好像从来不知道自己到底热爱什么，可是我喜欢这种按键盘的感觉，在昏黄的午后，余晖照在我旁边的茶杯上，我坐在笔记本面前，迅速的在敲代码。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>django template 使用</title>
    <url>/2020/01/27/django-template-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="django-中的template使用"><a href="#django-中的template使用" class="headerlink" title=" django 中的template使用 "></a><center> django 中的template使用 </center></h2><a id="more"></a>

<h3 id="1-可以使用python-manage-py-shell-来快速测试模板语法是否正确"><a href="#1-可以使用python-manage-py-shell-来快速测试模板语法是否正确" class="headerlink" title="1. 可以使用python manage.py shell 来快速测试模板语法是否正确"></a>1. 可以使用<code>python manage.py shell</code> 来快速测试模板语法是否正确</h3><ul>
<li>模板中分变量和标签 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量的表示方法 &#123;&#123; var &#125;&#125;</span></span><br><span class="line">   <span class="comment"># 标签的表示方法  &#123;% if　%&#125;&#125; &#123;% else %&#125; &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>测试前的准备工作：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Context, Template</span><br><span class="line">   <span class="comment"># 生成一个模板对象</span></span><br><span class="line">   t = Template(<span class="string">'My name is &#123;&#123; name &#125;&#125;'</span>)</span><br><span class="line">   <span class="comment"># 创建给模板传递数据的对象,使用字典映射变量和他们的值</span></span><br><span class="line">   c = Context(&#123;<span class="string">'name'</span>: <span class="string">'Test'</span>&#125;) <span class="comment"># 给变量name 传递一个字符串 'Test'</span></span><br><span class="line">   <span class="comment"># 使用模板对象的render方法进行填充</span></span><br><span class="line">   t.render(c) <span class="comment"># 输出是一个unicode对象</span></span><br><span class="line">   <span class="comment"># u'My name is Test'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>向模板传递字典，或者类对象，如何访问他们的数据, 都是通过<code>.</code> 进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'Sally'</span>, <span class="string">'age'</span>: <span class="number">32</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old.'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 访问对象的属性</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.now()</span><br><span class="line">t = Template(<span class="string">'The month is &#123;&#123; date.month &#125;&#125; and the year is &#123;&#123; date.year &#125;&#125;'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'date'</span>: d&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 也可以访问对象的方法，但是只能调用不带参数的方法，同时不能带()</span></span><br><span class="line">t = Template(<span class="string">'&#123;&#123; var &#125;&#125;--- &#123;&#123; var.upper &#125;&#125;----&#123;&#123; var.isdigit &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'var'</span>: <span class="string">'hello'</span>&#125;))</span><br><span class="line"><span class="comment"># 也可以通过索引访问列表中的元素，但是不能使用负索引</span></span><br><span class="line">alist = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">t = Template(<span class="string">'Item 1 is &#123;&#123; items.1 &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'items'</span>: alist&#125;))</span><br><span class="line"><span class="comment"># 模板系统遇到点时，会按照一下顺序进行查找：</span></span><br><span class="line"><span class="comment"># 1. 字典类型</span></span><br><span class="line"><span class="comment"># 2. 属性查找</span></span><br><span class="line"><span class="comment"># 3. 方法调用</span></span><br><span class="line"><span class="comment"># 4. 列表类型索引查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点查找可以多级嵌套使用</span></span><br><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'sally'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name.upper &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用注意点</span></span><br><span class="line"><span class="comment"># 如果方法中有抛出异常，那么在渲染过程中就会传播此异常。为了不传播此异常，只要设置该异常有</span></span><br><span class="line">silent_variable_failure = <span class="literal">True</span> 这个属性就不会传播此异常</span><br><span class="line">t = Template(<span class="string">"My name is &#123;&#123; person.first_name &#125;&#125;"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> SilentAssertionError, <span class="string">"foo"</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SilentAssertionError</span><span class="params">(AssertionError)</span>:</span></span><br><span class="line">    silent_variable_failure = <span class="literal">True</span></span><br><span class="line">t.render(Context(&#123;<span class="string">'person'</span>: Person()&#125;))</span><br><span class="line"><span class="comment"># 默认情况下，变量不存在，模板系统将展示它为空字符串；</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注释语法： </span><br><span class="line"></span><br><span class="line">  - 单行注释 &#96;&#123;#  This is a comment #&#125;&#96;</span><br><span class="line">  - 多行注释 &#96;&#123;% comment %&#125; &#123;% endcomment %&#125;&#96;</span><br><span class="line"></span><br><span class="line">- 过滤器，显示变量内容前修改它的值</span><br><span class="line"></span><br><span class="line">  - &#96;&#123;&#123; name|lower &#125;&#125;&#96; 转变为小写显示</span><br><span class="line">  - &#96;&#123;&#123; my_list|first|upper &#125;&#125;&#96; 列表的第一个元素大写显示</span><br><span class="line">  - 带参数的过滤器，通过冒号之后添加双引号作为参数的值</span><br><span class="line">  - &#96;&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125;&#96; 显示变量的前30个词</span><br><span class="line"></span><br><span class="line">### 2. MVC</span><br><span class="line"></span><br><span class="line">- MVC(Model-View-Controller)，一种软件架构模式，分别是数据存取逻辑，业务逻辑和表现逻辑相互分开并组合在一起。</span><br><span class="line">- M: 数据存取部分， 对应于Django中的models</span><br><span class="line">- V:选择显示哪些数据以及如何显示，由视图和模板处理</span><br><span class="line">- C：根据用户输入委派视图部分，也就是Django中的路由，对给定的URL调用适当的python函数</span><br><span class="line">- 由于C由框架自行处理，Django中更关注的是Model，模板（Template)和视图（Views），所以也被称为MTV框架；</span><br><span class="line">- M（代表模型Model),数据存取层，处理与数据相关的所有事务：如何存取，如何验证有效性，以及数据之间的关系</span><br><span class="line">- T( 代表模板Template),表现层，如何在页面中显示；</span><br><span class="line">- V(View):业务逻辑层，是模型与模板之间的桥梁；</span><br><span class="line"></span><br><span class="line">### 3.模型</span><br><span class="line"></span><br><span class="line">- 通过&#96;python manage.py shell&#96; 研究 存取数据的一些知识</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  	from App.models import Animal</span><br><span class="line">  	# 查找所有对象</span><br><span class="line">  	animal_list &#x3D; Animal.objects.all() #返回一个QuerySet </span><br><span class="line">  	animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;) # 返回单个对象 </span><br><span class="line">  	# 只能用于返回单个对象，当返回值多于一个或者没有找到时会报错</span><br><span class="line">  	try:</span><br><span class="line">  		animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;)</span><br><span class="line">  	except Animal.DoesNotExist:  #DoesNotExist是类的属性，可以捕获并处理</span><br><span class="line">  		print(&#39;Animal does not name is dog&#39;)</span><br><span class="line">  	# 排序,按照某个字段进行排序</span><br><span class="line">  	animal &#x3D; Animal.objects.order_by(&#39;name&#39;)</span><br><span class="line">  	# 倒序排列通过</span><br><span class="line">  	aniaml &#x3D; Animal.objects.order_by(&#39;-name&#39;)</span><br><span class="line">  	# 对应的sql语句就是</span><br><span class="line">  	# select id, name from Animal order by name DESC;</span><br><span class="line">  	# order_by(arg1, arg2) 多个字段表示arg1相同的情况下，按照arg2进行排序</span><br><span class="line">  	# 如果向对所有的查询都执行排序，就配置类属性,那么默认情况下都会执行排序</span><br><span class="line">  	class Meta:</span><br><span class="line">  		ordering &#x3D; [&#39;name&#39;]</span><br><span class="line">  		</span><br><span class="line">  	# 过滤和排序可以同时使用</span><br><span class="line">  	animal &#x3D; Animal.objects.filter(name&#x3D;&#39;dog&#39;).order_by(&#39;name&#39;)</span><br><span class="line">  	#对应的sql</span><br><span class="line">  	# select id, name from Animal where name&#x3D;&#39;dog&#39; order by name;</span><br><span class="line">  	# 返回前两条记录</span><br><span class="line">  	# animal &#x3D; Animal.objects.order_by(&#39;name&#39;)[0:2]</span><br><span class="line">  	# 对应的sql</span><br><span class="line">  	# select id, name from Animal order by name offset 0 limit 2;</span><br><span class="line">  	# 不支持负索引</span><br><span class="line">  	</span><br><span class="line">  	# save 方法将一条记录的所有数据提交到数据库</span><br><span class="line">  	# update 方法只将更新的数据提交到数据库，可以避免其他列可能被其他进程改动，引起竞态；</span><br><span class="line">  	Animal.objects.order_by(id&#x3D;1).update(name&#x3D;&#39;Dog&#39;) # 返回受影响的记录条数</span><br><span class="line">  	#对应的sql语句</span><br><span class="line">  	# select id, name from Animal set name&#x3D;&#39;Dog&#39; where id&#x3D;1;</span><br><span class="line">  	</span><br><span class="line">  	# 删除操作,删除指定的一条记录</span><br><span class="line">  	Animal.objects.filter(id&#x3D;1).delete()</span><br><span class="line">  	# 删除所有记录</span><br><span class="line">  	Animal.objects.all().delete()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>djangorestframework 组件使用</title>
    <url>/2020/01/20/djangorestframework-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="djangorestframework组件使用"><a href="#djangorestframework组件使用" class="headerlink" title=" djangorestframework组件使用"></a><center> djangorestframework组件使用</center></h2><a id="more"></a>

<p>1.根据token值进行认证</p>
<p>自定义认证器 <code>authenticators</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line">   <span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line">   <span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">       <span class="comment"># 自己实现认证过程</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">           token = request.query_parames.get(<span class="string">'token'</span>)</span><br><span class="line">           token_obj = UserToken.objects.filter(u_token=token).first()</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">               <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>) <span class="comment">#必须抛出一个异常</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> (token_obj.user, token_obj)  <span class="comment">#必须返回一个元祖赋值给request.user, request.auth</span></span><br><span class="line">           </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(APIView)</span>:</span></span><br><span class="line">       <span class="comment">#定义该类的认证，通过认证后才能访问这个类的视图函数</span></span><br><span class="line">	authentication_classes = [MyAuth,]</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 也可以定义所有视图类的认证器</span></span><br></pre></td></tr></table></figure>

<p>认证流程及返回值：</p>
<p>通过调用APIView中的dispatch方法，将原生的request对象就行包装，添加了认证类的对象属性，</p>
<p>然后执行intial方法，调用里面的perform_authentication方法，这个方法将使用request.user来执行认证的具体实现，遍历所有的认证类，然后执行认证。</p>
<p>自定义类需要实现的方法：</p>
<ul>
<li>authenticate</li>
<li>authenticate_header</li>
</ul>
<p>返回值有三种：</p>
<ul>
<li>None</li>
<li>元祖</li>
<li>raise APIException子类的异常</li>
</ul>
<p>​    2.为了给不同的视图类都实现权限的功能，实现自定义的权限，区分局部使用和全局使用的配置</p>
<p>基于用户角色的权限控制</p>
<p>实现自定义权限类的方式：</p>
<p>继承自BasePermission</p>
<ul>
<li>实现 has_permission方法</li>
</ul>
<p>返回值两种：</p>
<ul>
<li>True</li>
<li>False</li>
</ul>
<p>​    3.实现频率组件（根据用户是否认证，设置不同的键，进行频率控制）</p>
<p>​        -  匿名用户  (ip或者代理ip)</p>
<p>​        - 验证过的用户（用户名) </p>
<ol start="4">
<li><p>版本控制（BasicVersioning)  可以局部配置或者全局配置</p>
<ul>
<li><p>通过查询参数自定义版本</p>
<ul>
<li><p><a href="http://localhost:8000/api/user/?version=v1" target="_blank" rel="noopener">http://localhost:8000/api/user/?version=v1</a></p>
</li>
<li><p>可以通过在get请求中添加版本参数来获取版本</p>
</li>
<li><p>继承QueryParameterVersioning</p>
</li>
</ul>
</li>
<li><p>在url中设置版本</p>
<ul>
<li><a href="http://localhost:8000/api/v1/user/" target="_blank" rel="noopener">http://localhost:8000/api/v1/user/</a></li>
<li>使用内置的URLPathVersioning</li>
<li>通过request.version 获取url中的version</li>
<li>通过request.versioning_scheme获取版本类的对象</li>
</ul>
</li>
<li><p>可以反向生成包含版本的url</p>
<ul>
<li>通过reqeust.versioning_scheme.reverse(viewname=’user’, request=request)来得到url</li>
</ul>
</li>
</ul>
</li>
<li><p>解析器(</p>
<p>​    用来做什么？</p>
<ul>
<li><p>对请求过来的数据根据content-type选择合适的解析器解析到request.data)</p>
</li>
<li><p>入口在调用 request.data时，根据content-type选择对应的解析器</p>
</li>
<li></li>
<li><p>当请求体有数据，而请求POST没数据时，发生了什么？</p>
</li>
<li><p>指定解析器（根据不同请求头中的数据进行解析）</p>
</li>
<li><p>content-type: application/json  或者 x-www-form-urlencoded 或者form-data </p>
</li>
<li><p>可以为全局视图配置解析器，或者为单个视图配置解析器</p>
</li>
<li><p>默认支持application/json, x-www-form-urlencoded, form-data</p>
</li>
</ul>
</li>
<li><p>序列化</p>
<ul>
<li><p>请求数据进行验证</p>
<ul>
<li>可以自定义验证出错信息error_messages={‘required’: ‘字段缺失’， ‘blank’: ‘字段不能为空字符串‘}</li>
<li>可以自定义验证字段方法<ul>
<li>def validate_field_name(self, value)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Queryset</code> 进行序列化</p>
<p>基于数据库模型类定义序列化类，继承Serializer 或者ModelSerializer</p>
<ul>
<li><p>自定义显示字段名字通过  source</p>
<ul>
<li>role = serializers.CharField(source=’u_role’)</li>
</ul>
</li>
<li><p>自定义显示字段的方式</p>
<ul>
<li>roles = serializers.SerializerMethodField()</li>
<li>def get_role(self, row):</li>
</ul>
</li>
<li><p>自定序列化连表操作 depth=1  #官方建议 1-10</p>
</li>
<li><p>为某个字段反向生成url</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​    7.分页</p>
<ul>
<li><p>如果数据库有一千万条数据时，后面的分页数据响应越来越慢，如何解决这个问题？</p>
</li>
<li><p>设置每页显示多少条，显示结果</p>
</li>
<li><p>也可以设置基于索引位置，显示多少条  LimitOffPagination</p>
</li>
<li><p>将查询的页码显示为随机数，为了防止查询太对的页数</p>
</li>
</ul>
<p>​    8.路由</p>
<p>​    9.渲染器</p>
<p>​    10. 扩展APIView视图</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/01/20/interview/</url>
    <content><![CDATA[<h2 id="web开发面试题"><a href="#web开发面试题" class="headerlink" title=" web开发面试题 "></a><center> web开发面试题 </center></h2><ol>
<li><p>中间件有几种方法？</p>
<ul>
<li><p>process_request(self, request)</p>
<ul>
<li>django接收到request之后，在未解析url确定运行的view之前</li>
<li>返回值有None, HttpResponse对象</li>
<li>如果返回None,Django继续处理这个request,执行后续的中间件；</li>
<li>如果返回ＨttpResponse,Django不再执行其他的中间件以及视图，立即返回；</li>
</ul>
</li>
<li><p>process_view(self, request, view, <em>args, *</em>kwargs)</p>
<ul>
<li>调用时机是在：django执行完request预处理函数并确定待执行的view之后，但是在view函数实际执行之前</li>
<li>request,是HttpResponse对象，view是要调用的视图函数对象</li>
<li><em>args, *</em>kwargs:传入view的位置参数和关键字参数；</li>
<li>返回None 或者HttpResponse对象</li>
<li>返回None,Ｄjango继续处理这个request,执行后续的中间件，然后调用相应的ｖｉｅｗ;</li>
<li>返回HttpResponse对象，django不再执行任何其他的中间件以及对应的view, 立即返回ＨttpResponse;</li>
</ul>
</li>
<li><p>process_response(self, request, response)</p>
<ul>
<li>调用时机是在django执行ｖｉｅｗ函数并生成response 之后</li>
<li>参数：request是request对象，response是从view中返回的response对象</li>
<li>必须返回　ＨttpResponse对象；</li>
</ul>
</li>
<li><p>process_exception(self, request, exception)</p>
<ul>
<li>调用时机：view函数抛出了一个未捕获的异常调用</li>
<li>参数：exception是view函数抛出的实际的异常对象exception</li>
<li>返回值：None, django使用框架内置的异常处理机制</li>
<li>返回　HttpResponse对象，</li>
</ul>
</li>
<li><p>适用于所有请求批量操作</p>
</li>
</ul>
<p>场景:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 基于角色的权限控制</span><br><span class="line">- 用户认证</span><br><span class="line">- csrf </span><br><span class="line">- session</span><br><span class="line">- 日志记录</span><br><span class="line">- 黑名单</span><br></pre></td></tr></table></figure>
</li>
<li><p>csrf_token 如何实现的？如何避免csrf验证？</p>
</li>
<li><p>谈谈对restful 的理解？</p>
</li>
<li><p>面向对象的理解？</p>
<p>封装 ，继承，多态</p>
<p>封装: 类的封装，实例的封装</p>
<p>继承: 为什么要继承？深度优先（经典类）广度优先（新式类）</p>
</li>
<li><p>django请求的声明周期?</p>
<p>WSGI —&gt;中间件–&gt;路由匹配 —&gt;视图（FBV/CBV)—&gt;响应</p>
</li>
<li><p>常见的请求头，状态码，请求方法</p>
</li>
<li><p>源码流程</p>
</li>
<li><p>mysql 联表查询语句？ 数据量很大的时候，分页如何做？</p>
</li>
<li><p>如何实现跨域？</p>
<ul>
<li>CORS</li>
<li>jsonp</li>
<li>nginx 反向代理</li>
</ul>
</li>
<li><p>djangorestframework提供的功能或者入口在哪里？</p>
<ul>
<li>首先我们自己定义的类视图要继承APIView或者它的子类</li>
<li>APIView 重新实现了dispatch方法</li>
<li>dispatch方法中两个重要的方法：initialize_request 和initial方法</li>
<li>initialize_request()对原始的request进行封装，同时添加了解析器和认证器；</li>
<li>initial方法中实现了版本，执行认证，检查权限和频率访问；</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>restful风格规范</title>
    <url>/2020/01/20/restful%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="restful风格规范"><a href="#restful风格规范" class="headerlink" title=" restful风格规范 "></a><center> restful风格规范 </center></h2><a id="more"></a>

<ol>
<li>协议</li>
<li>域名（url中应该体现api接口)<ul>
<li>放在主域名<a href="https://example.com/api" target="_blank" rel="noopener">https://example.com/api</a></li>
<li>或者使用专有域名<a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>  存在跨域问题</li>
</ul>
</li>
<li>版本   (url中体现版本)</li>
<li>能够提供查询参数接口，过滤返回结果</li>
<li>定义资源的方式尽量使用名词()</li>
<li>响应参数使用json格式</li>
<li>状态码与code结合</li>
<li>错误信息</li>
<li>返回结果，不同的请求，返回不同的结果。</li>
<li>返回结果中最好加上一个超链接</li>
</ol>
<p>、</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>python2.x中json的操作</title>
    <url>/2020/01/20/python2-x%E4%B8%ADjson%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="python2-x中json的操作"><a href="#python2-x中json的操作" class="headerlink" title=" python2.x中json的操作 "></a><center> python2.x中json的操作 </center></h2><a id="more"></a>

<p>json的操作就是将字典转换为json格式的字符串(dump/dumps),也可以将json格式的字符串转换成字典(load/loads).</p>
<ol>
<li>dumps方法(字典转换成json格式的字符串）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   astr = json.dumps(adict)</span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment"># &#123;"a": "123", "c": "json", "b": "\u6d4b\u8bd5"&#125;</span></span><br><span class="line">   astr = json.dumps(adict, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>) <span class="comment">#indent确定缩进，ensure_ascii=False显示中文</span></span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment">#&#123;</span></span><br><span class="line">   	<span class="string">"a"</span>: <span class="string">"123"</span>, </span><br><span class="line">   	<span class="string">"c"</span>: <span class="string">"json"</span>, </span><br><span class="line">   	<span class="string">"b"</span>: <span class="string">"测试"</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">'str.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       f.write(astr.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   <span class="comment"># 可以通过 sudo apt install jq 工具来查看json文件</span></span><br><span class="line">   <span class="comment"># cat str.json|jq</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dump方法作用和上面一样</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   f = open(<span class="string">'str.json'</span>, <span class="string">'w'</span>)</span><br><span class="line">   json.dump(adict, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">   <span class="comment">#不需要write方法就可以写入文件</span></span><br></pre></td></tr></table></figure>

<p>因此，操作文件的时候，使用dump,不需要操作文件的时候，使用dumps.</p>
<ol start="3">
<li>loads方法,将json字符串转换成字典</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   content = f.read()</span><br><span class="line">   data = json.loads(content)</span><br><span class="line">   <span class="comment">###############</span></span><br><span class="line">   f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   data = json.load(f)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>可以通过codecs模块中的open方法指定编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = codecs.open(<span class="string">'str.json'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># python3 中的open方法可以使用encoding参数</span></span><br></pre></td></tr></table></figure>

<p>应用中遇到的问题: 使用Django，通过<code>session.set_expiry(timedelta(days=3))</code> 为<code>session</code> 设置过期时间时，遇到了<code>TypeError: datetime.datetime(2020, 1, 23, 11, 1, 58, 993654) is not JSON serializable</code> 这样的错误，就是因为json默认不支持对<code>datetime</code> 对象的序列化。</p>
<p>首先解决方法:在工程的配置文件 <code>settings</code> 中设置一个属性</p>
<p>`SESSION_SERIALIZER=’django.contrib.sessions.serializers.PickleSerializer’ </p>
<p>如果自定义支持对<code>datetime</code> 的序列化，可以通过下面的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">   adict = &#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'create_time'</span>: datetime.now()&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">DateEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">           <span class="keyword">if</span> isinstance(obj, datetime):</span><br><span class="line">               <span class="keyword">return</span> obj.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> super(DateEncoder, self).default(obj)</span><br><span class="line">    </span><br><span class="line">   print(json.dumps(adict, cls=DateEncoder))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的魔术方法使用</title>
    <url>/2020/01/18/python%E4%B8%AD%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Python中的魔术方法使用"><a href="#Python中的魔术方法使用" class="headerlink" title="Python中的魔术方法使用"></a><center>Python中的魔术方法使用</center></h2><a id="more"></a>
<h3 id="1-getattribute-使用"><a href="#1-getattribute-使用" class="headerlink" title="1. __getattribute__ 使用"></a>1. <code>__getattribute__</code> 使用</h3><p>1.1 新式类使用<code>__getattribute__</code> 这个方法后，无论实例访问类属性，实例属性，方法，还是访问不存在的属性时，都会调用这个方法，而通过类访问属性，方法时，不会调用这个方法</p>
<p>常用于：实现访问属性时执行一段代码的特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     gender = <span class="string">"男"</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">   ...:         self.name = name</span><br><span class="line">   ...:         self.age = age</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"拦截"</span>)</span><br><span class="line">   ...:         <span class="keyword">try</span>:</span><br><span class="line">   ...:             super(Man, self).__getattribute__(attr)</span><br><span class="line">   ...:         <span class="keyword">except</span> AttributeError:</span><br><span class="line">   ...:             print(<span class="string">"have not attribute of %s"</span> % attr)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"hello world"</span>)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: ins = Man(<span class="string">'test'</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: print(Man.gender)</span><br><span class="line">男</span><br><span class="line">＃　类访问不存在的属性不会调用</span><br><span class="line">In [<span class="number">5</span>]: print(Man.name)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-5</span><span class="number">-011</span>ae3c55855&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print(Man.name)</span><br><span class="line"></span><br><span class="line">AttributeError: type object <span class="string">'Man'</span> has no attribute <span class="string">'name'</span></span><br><span class="line">In [<span class="number">6</span>]: print(ins.name)</span><br><span class="line">拦截</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: ins.age</span><br><span class="line">拦截</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: ins.xxx</span><br><span class="line">拦截</span><br><span class="line">have <span class="keyword">not</span> attribute of xxx</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: ins.hello()</span><br><span class="line">拦截</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-6</span>af60b825039&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 ins.hello()</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'NoneType'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<p>总之，通过实例访问的属性，方法都会被拦截，包括<code>self.__dict__</code> ,使用这个方法的唯一安全方式就是覆盖父类的方法。</p>
<p>1.2 如果使用了<code>__getattr__</code> 这个方法，它的执行条件是 <code>__getattribute__</code> 触发了<code>AttributeError</code> 异常后，才会调用这个方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">           self.age = age</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">           <span class="keyword">print</span> <span class="string">'执行__getattr__'</span></span><br><span class="line">       	</span><br><span class="line">    ins = Man(<span class="string">'hello'</span>, <span class="number">20</span>)</span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#执行__getattr__  (父类的__getattribute__触发了AttributeError异常)</span></span><br><span class="line">    当添加了下面的方法后</span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    		<span class="keyword">print</span> <span class="string">'拦截'</span></span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#拦截  (将不会执行__getattr__这个方法，因为__getattribute__覆盖了父类的方法，没有触发异常)</span></span><br></pre></td></tr></table></figure>

<p>1.3 使用<code>__setattr__</code> :任何对实例属性赋值的操作都将调用这个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name <span class="comment">#执行 __setattr__</span></span><br><span class="line">           self.age = age <span class="comment">#执行__setattr__</span></span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">       	<span class="keyword">print</span> <span class="string">'执行__setattr__'</span></span><br><span class="line">       	self.__dict__[key] = val <span class="comment">#这里不能通过self.key = val这种方式进行赋值，否则会进入无限循环</span></span><br><span class="line">       	</span><br><span class="line">   ins = Man(<span class="string">'hello'</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   Man.gender = <span class="string">'女'</span>  <span class="comment">#不会执行__setattr__</span></span><br></pre></td></tr></table></figure>

<h3 id="2-get-与-set"><a href="#2-get-与-set" class="headerlink" title="2. __get__ 与__set__"></a>2. <code>__get__</code> 与<code>__set__</code></h3><p>2.1 <code>__get__</code> 使用:拥有这个方法的类，产生一个实例，同时这个实例是另一个类的类属性，实例属性与这个方法就没有关系了；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBase</span><span class="params">(object)</span>:</span> <span class="comment">#这个类可以称为non-data descriptor</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>)</span><br><span class="line">           print(instance, owner)</span><br><span class="line">     </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestBase()</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (&lt;__main__.TestMain instance at 0x7fd46ba0a200&gt;, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span>  <span class="comment">#通过实例进行赋值</span></span><br><span class="line">       print(t.tes) <span class="comment"># 获得这个值</span></span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes <span class="comment">#访问这个值，将调用__get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7f7ead5e1668&gt;)</span></span><br><span class="line">       <span class="comment"># 通过TestMain赋值</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#通过这种方式赋值，不会调用__get__</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值后，类再访问这个属性，不能获取这个值，调用了<code>__get__</code> </p>
<p>2.2 <code>__get__</code> 和<code>__set__</code> 同时存在的情况下，如何呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSet</span><span class="params">(object)</span>:</span>  <span class="comment">#这个类称为 data descriptor</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>, instance, owner)</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, val)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __set__'</span>, instance, val)</span><br><span class="line">           </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestSet()</span><br><span class="line">	</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff1acb00f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span> <span class="comment"># 调用__set__方法</span></span><br><span class="line">       <span class="comment"># ('enter __set__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, 1)</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#与__get__, __set__无关</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值时，调用<code>__set__</code> ,然后无论通过类还是实例再次获取这个属性时，都将调用<code>__get__</code> </p>
<p><code>__get__</code> 的应用在<code>Django</code> 中的体现是，可以重写<code>@classmethod</code> 实现只能通过类进行访问类方法，而不能通过实例访问类方法：（<code>from django.utils.decorators import classonlymethod</code> )</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装最新版的nodejs</title>
    <url>/2020/01/17/ubuntu16-04%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84nodejs/</url>
    <content><![CDATA[<h2 id="ubuntu16-04安装最新版的nodejs"><a href="#ubuntu16-04安装最新版的nodejs" class="headerlink" title="ubuntu16.04安装最新版的nodejs"></a><center>ubuntu16.04安装最新版的nodejs</center></h2><a id="more"></a>
<p>ubuntu16.04 默认安装了v4.2.6版本的nodejs，为了使用最新版的nodejs，使用一下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>sudo apt update -y</span><br><span class="line"><span class="number">2.</span>sudo apt install nodejs nodejs-legacy npm -y</span><br><span class="line"><span class="number">3.</span>sudo npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="number">4.</span>sudo npm install n -g</span><br><span class="line"><span class="number">5.</span>sudo n stable</span><br></pre></td></tr></table></figure>

<p>遇到的问题：</p>
<p>使用命令<code>n</code> 安装过程非常缓慢，需要修改<code>n</code> 中的 <code>N_NODE_MIRROR</code> ，更改为国内的镜像源</p>
<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> </p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
