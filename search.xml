<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>celery初认识</title>
    <url>/2020/02/08/celery%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h3 id="celery初认识"><a href="#celery初认识" class="headerlink" title="celery初认识"></a><center>celery初认识</center></h3><a id="more"></a>

<h4 id="1-在python2-7环境下使用"><a href="#1-在python2-7环境下使用" class="headerlink" title="1. 在python2.7环境下使用"></a>1. 在python2.7环境下使用</h4><p>1.1 单个任务执行</p>
<ul>
<li>准备环境</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install --python <span class="number">2.7</span></span><br><span class="line">pipenv install celery</span><br><span class="line">pipenv install redis</span><br></pre></td></tr></table></figure>

<ul>
<li><p>celery_app_task.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line">backend = <span class="string">'redis://:studyredis@127.0.0.1:6379/1'</span></span><br><span class="line">broker = <span class="string">'redis://:studyredis@127.0.0.1:6379/2'</span></span><br><span class="line"></span><br><span class="line">cel = celery.Celery(<span class="string">'test'</span>, backend=backend, broker=broker)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
</li>
<li><p>add_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>check_result.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">''</span>, app=cel)  <span class="comment"># 这里的 id为result.id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.gete()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始执行'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始执行：</p>
<ul>
<li><code>celery  worker -A celery_app_task -l info</code> 启动工作队列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40-70 v4.4.0 (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-4.4.0-173-generic-x86_64-with-Ubuntu-16.04-xenial 2020-02-08 17:13:07</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         test:0x7f3f8bbdc5d0</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;1</span><br><span class="line">- *** --- * --- .&gt; concurrency: 4 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_app_task.add</span><br><span class="line"></span><br><span class="line">[2020-02-08 17:13:07,576: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">[2020-02-08 17:13:07,581: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-02-08 17:13:08,597: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2020-02-08 17:13:08,615: INFO&#x2F;MainProcess] celery@cgn-Lenovo-S40-70 ready.</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>向任务队列中添加任务</p>
<p><code>python add_task.py</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-02-08 17:13:55,164: INFO&#x2F;MainProcess] Received task: celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce]  </span><br><span class="line">[2020-02-08 17:13:55,170: INFO&#x2F;ForkPoolWorker-1] Task celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce] succeeded in 0.00431576301344s: 7</span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<p>  1.2 多任务添加到消息中间件中</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>├── celery_task<br>│   ├── celery_app.py<br>│   ├── <strong>init</strong>.py<br>│   ├── task_one.py<br>│   └── task_two.py<br>├── my_celery.py<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- celery_app.py</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding&#x3D;utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">celery_task &#x3D; Celery(&quot;task&quot;,</span><br><span class="line">                     broker&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;1&quot;,</span><br><span class="line">                     backend&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;2&quot;,</span><br><span class="line">                     include&#x3D;[&quot;celery_task.task_one&quot;, &quot;celery_task.task_two&quot;])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">two.delay(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启ｗorker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task.celery_app -l info</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9c486e9d0</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">411</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">417</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">433</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">443</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">771</span>: INFO/MainProcess] Received task: celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">773</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">782</span>: INFO/ForkPoolWorker<span class="number">-1</span>] Task celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a] succeeded <span class="keyword">in</span> <span class="number">5.00957920798</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">789</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7] succeeded <span class="keyword">in</span> <span class="number">5.01353460201</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-在python3-6-环境下如何使用？"><a href="#2-在python3-6-环境下如何使用？" class="headerlink" title="2. 在python3.6 环境下如何使用？"></a>2. 在python3.6 环境下如何使用？</h3><p>２.1  添加多个任务到任务队列中</p>
</li>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py   <span class="comment"># 必须使用这个名字</span></span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br><span class="line"></span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9fc743eb8</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">819</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">828</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">847</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">857</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务到消息中间件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">251</span>: INFO/MainProcess] Received task: celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">253</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-2</span>] Task celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1] succeeded <span class="keyword">in</span> <span class="number">5.015381631994387</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">50</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8] succeeded <span class="keyword">in</span> <span class="number">5.016119522973895</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3. 定时任务"></a>3. 定时任务</h3><p>3.1 在python3.6环境下实现定时10s后执行，使用如下：</p>
<ul>
<li><p>目录结构如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc_time = datetime.utcfromtimestamp(time.time()) <span class="comment">#这里必须使用utc时间</span></span><br><span class="line">add_time = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">action_time = utc_time + add_time</span><br><span class="line"></span><br><span class="line">res = one.apply_async(args=(<span class="number">10</span>, <span class="number">10</span>), eta=action_time) <span class="comment">#　定时10s后执行</span></span><br><span class="line">print(res.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7f5c2b12de80</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">726</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">736</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">757</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">772</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>将定时任务添加到任务队列中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">34</span>,<span class="number">567</span>: INFO/MainProcess] Received task: celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965]  ETA:[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">44.447419</span>+<span class="number">00</span>:<span class="number">00</span>] </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">49</span>,<span class="number">652</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965] succeeded <span class="keyword">in</span> <span class="number">5.012816867005313</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.2 实现周期性定时任务</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每10s执行一次celery_task.task_one,参数是(10, 10)</span></span><br><span class="line">celery_task.conf.beat_schedule = &#123;</span><br><span class="line">        <span class="string">"each10s_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>, <span class="comment"># 任务函数</span></span><br><span class="line">            <span class="string">"schedule"</span>: <span class="number">10</span>, <span class="comment"># 每10s执行一次　＃频率</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each1m_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(minute=<span class="number">1</span>),  <span class="comment"># 每一分钟执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each24hours_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(hour=<span class="string">'*/24'</span>),  <span class="comment"># 每24小时执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>task_one.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开始生产出周期性任务,需要一个生产者beat</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">celery beat -A celery_task</span><br><span class="line"></span><br><span class="line">celery beat v4<span class="number">.4</span><span class="number">.0</span> (cliffs) <span class="keyword">is</span> starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-02-08 20:47:44</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; redis://:**@127.0.0.1:6379/1</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%WARNING</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br></pre></td></tr></table></figure>

<ul>
<li>开启worker </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>分析中间件CsrfViewMiddleware源码</title>
    <url>/2020/01/28/%E5%88%86%E6%9E%90%E4%B8%AD%E9%97%B4%E4%BB%B6CsrfViewMiddleware%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="CsrfViewMiddleware-源码分析"><a href="#CsrfViewMiddleware-源码分析" class="headerlink" title=" ＣsrfViewMiddleware 源码分析"></a><center> <code>ＣsrfViewMiddleware</code> 源码分析</center></h3><a id="more"></a>

<ol>
<li><p>流程图</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/CsrfViewMiddleware.jpg" alt="avatar"></p>
</li>
</ol>
<ol start="2">
<li>源码分析</li>
</ol>
<ul>
<li>在工程的配置文件要有中间件 <code>CsrfViewMiddleware</code> 才能使用<code>csrf</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>请求进来，首先通过各个中间件的<code>process_requst</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="comment"># 第一次请求，返回None</span></span><br><span class="line">       csrf_token = self._get_token(request)</span><br><span class="line">       <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="comment"># Use same token next time.</span></span><br><span class="line">           request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_get_token</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               <span class="keyword">return</span> request.session.get(CSRF_SESSION_KEY)</span><br><span class="line">           <span class="keyword">except</span> AttributeError:</span><br><span class="line">               <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                   <span class="string">'CSRF_USE_SESSIONS is enabled, but request.session is not '</span></span><br><span class="line">                   <span class="string">'set. SessionMiddleware must appear before CsrfViewMiddleware '</span></span><br><span class="line">                   <span class="string">'in MIDDLEWARE%s.'</span> % (<span class="string">'_CLASSES'</span> <span class="keyword">if</span> settings.MIDDLEWARE <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">               )</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           ＃ 默认配置中，CSRF_USE_SESSIONS 为<span class="literal">False</span>，总不会执行</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">           ＃　第一次请求，没有cookie，返回<span class="literal">None</span></span><br><span class="line">               cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]</span><br><span class="line">           <span class="keyword">except</span> KeyError:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">           csrf_token = _sanitize_token(cookie_token)</span><br><span class="line">           <span class="keyword">if</span> csrf_token != cookie_token:</span><br><span class="line">               <span class="comment"># Cookie token needed to be replaced;</span></span><br><span class="line">               <span class="comment"># the cookie needs to be reset.</span></span><br><span class="line">               request.csrf_cookie_needs_reset = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> csrf_token</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后找到路由系统，根据请求的URL,找到对应的视图处理函数，然后再在各个中间件中找寻process_view</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> getattr(request, <span class="string">'csrf_processing_done'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">       <span class="keyword">if</span> getattr(callback, <span class="string">'csrf_exempt'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span>	</span><br><span class="line">       <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>):</span><br><span class="line">           <span class="keyword">if</span> request.is_secure():  <span class="comment"># 如果是　https请求</span></span><br><span class="line">                   referer = force_text(</span><br><span class="line">                   request.META.get(<span class="string">'HTTP_REFERER'</span>),</span><br><span class="line">                   strings_only=<span class="literal">True</span>,</span><br><span class="line">                   errors=<span class="string">'replace'</span></span><br><span class="line">               )</span><br><span class="line">               <span class="keyword">if</span> referer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_REFERER)</span><br><span class="line">          　　　....</span><br><span class="line">            csrf_token = request.META.get(<span class="string">'CSRF_COOKIE'</span>)</span><br><span class="line">            <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 为空，直接拒绝</span></span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_CSRF_COOKIE)</span><br><span class="line">  　　　　　　　　request_csrf_token = <span class="string">""</span></span><br><span class="line">           　<span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   request_csrf_token = request.POST.get(<span class="string">'csrfmiddlewaretoken'</span>, <span class="string">''</span>)</span><br><span class="line">               <span class="keyword">except</span> IOError:</span><br><span class="line">                   <span class="keyword">pass</span></span><br><span class="line">             <span class="keyword">if</span> request_csrf_token == <span class="string">""</span>:</span><br><span class="line">                   request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, <span class="string">''</span>)</span><br><span class="line">             request_csrf_token = _sanitize_token(request_csrf_token)</span><br><span class="line">             <span class="comment"># 比较请求头中的csrf_token 与从表单提交数据中获取的 request_csrf_token是否符合规则</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> _compare_salted_tokens(request_csrf_token, csrf_token):</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_BAD_TOKEN)</span><br><span class="line">        </span><br><span class="line">       <span class="comment"># 对于get, head, options, trace请求方法，直接跳过检查</span></span><br><span class="line">  　　　　　<span class="keyword">return</span> self._accept(request)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行真正的视图处理函数，如果返回的是渲染后的表单，同时表单中有标签  ,那么在渲染这个标签的时候，将调用get_token() 函数，这个函数的作用有两方面</p>
<ul>
<li>为请求头添加<code>CSRF_COOKIE</code> 属性，值为随机生成的64位<code>ascii</code>值</li>
<li>为表单隐藏的字段<code>csrfmiddlewaretoken</code> 赋值</li>
<li>设置请求头<code>CSRF_COOKIE_USED</code> 为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"CSRF_COOKIE"</span> <span class="keyword">not</span> <span class="keyword">in</span> request.META:</span><br><span class="line">               csrf_secret = _get_new_csrf_string()</span><br><span class="line">               request.META[<span class="string">"CSRF_COOKIE"</span>] = _salt_cipher_secret(csrf_secret)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               csrf_secret = _unsalt_cipher_token(request.META[<span class="string">"CSRF_COOKIE"</span>])</span><br><span class="line">           request.META[<span class="string">"CSRF_COOKIE_USED"</span>] = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> _salt_cipher_secret(csrf_secret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行<code>process_response</code> 响应，根据上面<code>get_token</code> 被调用，将执行<code>_set_token()</code> 函数，为响应设置<code>cookie</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">          <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">              <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 执行过 get_token后，这个条件不成立</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>): </span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">      ＃　为返回的响应设置cookie</span><br><span class="line">      self._set_token(request, response)</span><br><span class="line">      response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_set_token</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">          request.session[CSRF_SESSION_KEY] = request.META[<span class="string">'CSRF_COOKIE'</span>]</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          response.set_cookie(</span><br><span class="line">              settings.CSRF_COOKIE_NAME,　＃　cookie键为　csrftoken</span><br><span class="line">              request.META[<span class="string">'CSRF_COOKIE'</span>], <span class="comment"># 对应的值为　get_token函数生成的值</span></span><br><span class="line">              max_age=settings.CSRF_COOKIE_AGE,</span><br><span class="line">              domain=settings.CSRF_COOKIE_DOMAIN,</span><br><span class="line">              path=settings.CSRF_COOKIE_PATH,</span><br><span class="line">              secure=settings.CSRF_COOKIE_SECURE,</span><br><span class="line">              httponly=settings.CSRF_COOKIE_HTTPONLY,</span><br><span class="line">          )</span><br><span class="line">          <span class="comment"># Set the Vary header since content varies with the CSRF cookie.</span></span><br><span class="line">          patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>对get,head, options, trace这样的方法，不做<code>csrf</code>认证</p>
</li>
<li><p>只有当表单中使用了 这样的标签后，调用<code>get_token</code> 方法，为表单中与<code>csrf</code> 有关的字段赋值，同时这个值会随着每次请求而发生变化；</p>
</li>
<li><p>对于post,put, patch, delete 这样的请求，都会做出验证，如果想要不对这些做出认证，方法可以有</p>
<ul>
<li><p>不使用这个中间件</p>
</li>
<li><p>使用<code>csrf_exempt</code> 这个装饰器</p>
</li>
<li><p>如果是类视图中的函数，可以为类添加<code>@method_decorator(csrf_exempt, name=&#39;dispatch&#39;)</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>study-心理路线</title>
    <url>/2020/01/28/study-%E5%BF%83%E7%90%86%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="自觉持续的勤奋"><a href="#自觉持续的勤奋" class="headerlink" title=" 自觉持续的勤奋"></a><center> 自觉持续的勤奋</center></h2><a id="more"></a>

<p>​    如果身在职场，人微言轻，家境平平，那么持续性的自律和勤奋就是我的出路。我也曾经这样考虑过，我跑步的速度赶不上别人，我唯一能够做的就是持续性的跑步，我的速度不如人家，那就训练坚持跑的意志，这是我觉得是唯一一件主观上要发挥自己能力需要锻炼自己的事情。第一份工作就是自己没有好好考虑好，没有危机感，总感觉自己生活还行，从不知要修炼自己的能力，最近两年都处在恍恍惚惚中，好像又回到了学校里的焦虑时光，好像从来不知道自己到底热爱什么，可是我喜欢这种按键盘的感觉，在昏黄的午后，余晖照在我旁边的茶杯上，我坐在笔记本面前，迅速的在敲代码。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>django template 使用</title>
    <url>/2020/01/27/django-template-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="django-中的template使用"><a href="#django-中的template使用" class="headerlink" title=" django 中的template使用 "></a><center> django 中的template使用 </center></h2><h3 id="1-可以使用python-manage-py-shell-来快速测试模板语法是否正确"><a href="#1-可以使用python-manage-py-shell-来快速测试模板语法是否正确" class="headerlink" title="1. 可以使用python manage.py shell 来快速测试模板语法是否正确"></a>1. 可以使用<code>python manage.py shell</code> 来快速测试模板语法是否正确</h3><ul>
<li>模板中分变量和标签 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量的表示方法 &#123;&#123; var &#125;&#125;</span></span><br><span class="line">   <span class="comment"># 标签的表示方法  &#123;% if　%&#125;&#125; &#123;% else %&#125; &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>测试前的准备工作：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Context, Template</span><br><span class="line">   <span class="comment"># 生成一个模板对象</span></span><br><span class="line">   t = Template(<span class="string">'My name is &#123;&#123; name &#125;&#125;'</span>)</span><br><span class="line">   <span class="comment"># 创建给模板传递数据的对象,使用字典映射变量和他们的值</span></span><br><span class="line">   c = Context(&#123;<span class="string">'name'</span>: <span class="string">'Test'</span>&#125;) <span class="comment"># 给变量name 传递一个字符串 'Test'</span></span><br><span class="line">   <span class="comment"># 使用模板对象的render方法进行填充</span></span><br><span class="line">   t.render(c) <span class="comment"># 输出是一个unicode对象</span></span><br><span class="line">   <span class="comment"># u'My name is Test'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>向模板传递字典，或者类对象，如何访问他们的数据, 都是通过<code>.</code> 进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'Sally'</span>, <span class="string">'age'</span>: <span class="number">32</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old.'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 访问对象的属性</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.now()</span><br><span class="line">t = Template(<span class="string">'The month is &#123;&#123; date.month &#125;&#125; and the year is &#123;&#123; date.year &#125;&#125;'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'date'</span>: d&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 也可以访问对象的方法，但是只能调用不带参数的方法，同时不能带()</span></span><br><span class="line">t = Template(<span class="string">'&#123;&#123; var &#125;&#125;--- &#123;&#123; var.upper &#125;&#125;----&#123;&#123; var.isdigit &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'var'</span>: <span class="string">'hello'</span>&#125;))</span><br><span class="line"><span class="comment"># 也可以通过索引访问列表中的元素，但是不能使用负索引</span></span><br><span class="line">alist = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">t = Template(<span class="string">'Item 1 is &#123;&#123; items.1 &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'items'</span>: alist&#125;))</span><br><span class="line"><span class="comment"># 模板系统遇到点时，会按照一下顺序进行查找：</span></span><br><span class="line"><span class="comment"># 1. 字典类型</span></span><br><span class="line"><span class="comment"># 2. 属性查找</span></span><br><span class="line"><span class="comment"># 3. 方法调用</span></span><br><span class="line"><span class="comment"># 4. 列表类型索引查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点查找可以多级嵌套使用</span></span><br><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'sally'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name.upper &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用注意点</span></span><br><span class="line"><span class="comment"># 如果方法中有抛出异常，那么在渲染过程中就会传播此异常。为了不传播此异常，只要设置该异常有</span></span><br><span class="line">silent_variable_failure = <span class="literal">True</span> 这个属性就不会传播此异常</span><br><span class="line">t = Template(<span class="string">"My name is &#123;&#123; person.first_name &#125;&#125;"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> SilentAssertionError, <span class="string">"foo"</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SilentAssertionError</span><span class="params">(AssertionError)</span>:</span></span><br><span class="line">    silent_variable_failure = <span class="literal">True</span></span><br><span class="line">t.render(Context(&#123;<span class="string">'person'</span>: Person()&#125;))</span><br><span class="line"><span class="comment"># 默认情况下，变量不存在，模板系统将展示它为空字符串；</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注释语法： </span><br><span class="line"></span><br><span class="line">  - 单行注释 &#96;&#123;#  This is a comment #&#125;&#96;</span><br><span class="line">  - 多行注释 &#96;&#123;% comment %&#125; &#123;% endcomment %&#125;&#96;</span><br><span class="line"></span><br><span class="line">- 过滤器，显示变量内容前修改它的值</span><br><span class="line"></span><br><span class="line">  - &#96;&#123;&#123; name|lower &#125;&#125;&#96; 转变为小写显示</span><br><span class="line">  - &#96;&#123;&#123; my_list|first|upper &#125;&#125;&#96; 列表的第一个元素大写显示</span><br><span class="line">  - 带参数的过滤器，通过冒号之后添加双引号作为参数的值</span><br><span class="line">  - &#96;&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125;&#96; 显示变量的前30个词</span><br><span class="line"></span><br><span class="line">### 2. MVC</span><br><span class="line"></span><br><span class="line">- MVC(Model-View-Controller)，一种软件架构模式，分别是数据存取逻辑，业务逻辑和表现逻辑相互分开并组合在一起。</span><br><span class="line">- M: 数据存取部分， 对应于Django中的models</span><br><span class="line">- V:选择显示哪些数据以及如何显示，由视图和模板处理</span><br><span class="line">- C：根据用户输入委派视图部分，也就是Django中的路由，对给定的URL调用适当的python函数</span><br><span class="line">- 由于C由框架自行处理，Django中更关注的是Model，模板（Template)和视图（Views），所以也被称为MTV框架；</span><br><span class="line">- M（代表模型Model),数据存取层，处理与数据相关的所有事务：如何存取，如何验证有效性，以及数据之间的关系</span><br><span class="line">- T( 代表模板Template),表现层，如何在页面中显示；</span><br><span class="line">- V(View):业务逻辑层，是模型与模板之间的桥梁；</span><br><span class="line"></span><br><span class="line">### 3.模型</span><br><span class="line"></span><br><span class="line">- 通过&#96;python manage.py shell&#96; 研究 存取数据的一些知识</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  	from App.models import Animal</span><br><span class="line">  	# 查找所有对象</span><br><span class="line">  	animal_list &#x3D; Animal.objects.all() #返回一个QuerySet </span><br><span class="line">  	animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;) # 返回单个对象 </span><br><span class="line">  	# 只能用于返回单个对象，当返回值多于一个或者没有找到时会报错</span><br><span class="line">  	try:</span><br><span class="line">  		animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;)</span><br><span class="line">  	except Animal.DoesNotExist:  #DoesNotExist是类的属性，可以捕获并处理</span><br><span class="line">  		print(&#39;Animal does not name is dog&#39;)</span><br><span class="line">  	# 排序,按照某个字段进行排序</span><br><span class="line">  	animal &#x3D; Animal.objects.order_by(&#39;name&#39;)</span><br><span class="line">  	# 倒序排列通过</span><br><span class="line">  	aniaml &#x3D; Animal.objects.order_by(&#39;-name&#39;)</span><br><span class="line">  	# 对应的sql语句就是</span><br><span class="line">  	# select id, name from Animal order by name DESC;</span><br><span class="line">  	# order_by(arg1, arg2) 多个字段表示arg1相同的情况下，按照arg2进行排序</span><br><span class="line">  	# 如果向对所有的查询都执行排序，就配置类属性,那么默认情况下都会执行排序</span><br><span class="line">  	class Meta:</span><br><span class="line">  		ordering &#x3D; [&#39;name&#39;]</span><br><span class="line">  		</span><br><span class="line">  	# 过滤和排序可以同时使用</span><br><span class="line">  	animal &#x3D; Animal.objects.filter(name&#x3D;&#39;dog&#39;).order_by(&#39;name&#39;)</span><br><span class="line">  	#对应的sql</span><br><span class="line">  	# select id, name from Animal where name&#x3D;&#39;dog&#39; order by name;</span><br><span class="line">  	# 返回前两条记录</span><br><span class="line">  	# animal &#x3D; Animal.objects.order_by(&#39;name&#39;)[0:2]</span><br><span class="line">  	# 对应的sql</span><br><span class="line">  	# select id, name from Animal order by name offset 0 limit 2;</span><br><span class="line">  	# 不支持负索引</span><br><span class="line">  	</span><br><span class="line">  	# save 方法将一条记录的所有数据提交到数据库</span><br><span class="line">  	# update 方法只将更新的数据提交到数据库，可以避免其他列可能被其他进程改动，引起竞态；</span><br><span class="line">  	Animal.objects.order_by(id&#x3D;1).update(name&#x3D;&#39;Dog&#39;) # 返回受影响的记录条数</span><br><span class="line">  	#对应的sql语句</span><br><span class="line">  	# select id, name from Animal set name&#x3D;&#39;Dog&#39; where id&#x3D;1;</span><br><span class="line">  	</span><br><span class="line">  	# 删除操作,删除指定的一条记录</span><br><span class="line">  	Animal.objects.filter(id&#x3D;1).delete()</span><br><span class="line">  	# 删除所有记录</span><br><span class="line">  	Animal.objects.all().delete()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>djangorestframework 组件使用</title>
    <url>/2020/01/20/djangorestframework-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="djangorestframework组件使用"><a href="#djangorestframework组件使用" class="headerlink" title=" djangorestframework组件使用"></a><center> djangorestframework组件使用</center></h2><a id="more"></a>

<p>1.根据token值进行认证</p>
<p>自定义认证器 <code>authenticators</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line">   <span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line">   <span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">       <span class="comment"># 自己实现认证过程</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">           token = request.query_parames.get(<span class="string">'token'</span>)</span><br><span class="line">           token_obj = UserToken.objects.filter(u_token=token).first()</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">               <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>) <span class="comment">#必须抛出一个异常</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> (token_obj.user, token_obj)  <span class="comment">#必须返回一个元祖赋值给request.user, request.auth</span></span><br><span class="line">           </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(APIView)</span>:</span></span><br><span class="line">       <span class="comment">#定义该类的认证，通过认证后才能访问这个类的视图函数</span></span><br><span class="line">	authentication_classes = [MyAuth,]</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 也可以定义所有视图类的认证器</span></span><br></pre></td></tr></table></figure>

<p>认证流程及返回值：</p>
<p>通过调用APIView中的dispatch方法，将原生的request对象就行包装，添加了认证类的对象属性，</p>
<p>然后执行intial方法，调用里面的perform_authentication方法，这个方法将使用request.user来执行认证的具体实现，遍历所有的认证类，然后执行认证。</p>
<p>自定义类需要实现的方法：</p>
<ul>
<li>authenticate</li>
<li>authenticate_header</li>
</ul>
<p>返回值有三种：</p>
<ul>
<li>None</li>
<li>元祖</li>
<li>raise APIException子类的异常</li>
</ul>
<p>​    2.为了给不同的视图类都实现权限的功能，实现自定义的权限，区分局部使用和全局使用的配置</p>
<p>基于用户角色的权限控制</p>
<p>实现自定义权限类的方式：</p>
<p>继承自BasePermission</p>
<ul>
<li>实现 has_permission方法</li>
</ul>
<p>返回值两种：</p>
<ul>
<li>True</li>
<li>False</li>
</ul>
<p>​    3.实现频率组件（根据用户是否认证，设置不同的键，进行频率控制）</p>
<p>​        -  匿名用户  (ip或者代理ip)</p>
<p>​        - 验证过的用户（用户名) </p>
<ol start="4">
<li><p>版本控制（BasicVersioning)  可以局部配置或者全局配置</p>
<ul>
<li><p>通过查询参数自定义版本</p>
<ul>
<li><p><a href="http://localhost:8000/api/user/?version=v1" target="_blank" rel="noopener">http://localhost:8000/api/user/?version=v1</a></p>
</li>
<li><p>可以通过在get请求中添加版本参数来获取版本</p>
</li>
<li><p>继承QueryParameterVersioning</p>
</li>
</ul>
</li>
<li><p>在url中设置版本</p>
<ul>
<li><a href="http://localhost:8000/api/v1/user/" target="_blank" rel="noopener">http://localhost:8000/api/v1/user/</a></li>
<li>使用内置的URLPathVersioning</li>
<li>通过request.version 获取url中的version</li>
<li>通过request.versioning_scheme获取版本类的对象</li>
</ul>
</li>
<li><p>可以反向生成包含版本的url</p>
<ul>
<li>通过reqeust.versioning_scheme.reverse(viewname=’user’, request=request)来得到url</li>
</ul>
</li>
</ul>
</li>
<li><p>解析器(</p>
<p>​    用来做什么？</p>
<ul>
<li><p>对请求过来的数据根据content-type选择合适的解析器解析到request.data)</p>
</li>
<li><p>入口在调用 request.data时，根据content-type选择对应的解析器</p>
</li>
<li></li>
<li><p>当请求体有数据，而请求POST没数据时，发生了什么？</p>
</li>
<li><p>指定解析器（根据不同请求头中的数据进行解析）</p>
</li>
<li><p>content-type: application/json  或者 x-www-form-urlencoded 或者form-data </p>
</li>
<li><p>可以为全局视图配置解析器，或者为单个视图配置解析器</p>
</li>
<li><p>默认支持application/json, x-www-form-urlencoded, form-data</p>
</li>
</ul>
</li>
<li><p>序列化</p>
<ul>
<li><p>请求数据进行验证</p>
<ul>
<li>可以自定义验证出错信息error_messages={‘required’: ‘字段缺失’， ‘blank’: ‘字段不能为空字符串‘}</li>
<li>可以自定义验证字段方法<ul>
<li>def validate_field_name(self, value)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Queryset</code> 进行序列化</p>
<p>基于数据库模型类定义序列化类，继承Serializer 或者ModelSerializer</p>
<ul>
<li><p>自定义显示字段名字通过  source</p>
<ul>
<li>role = serializers.CharField(source=’u_role’)</li>
</ul>
</li>
<li><p>自定义显示字段的方式</p>
<ul>
<li>roles = serializers.SerializerMethodField()</li>
<li>def get_role(self, row):</li>
</ul>
</li>
<li><p>自定序列化连表操作 depth=1  #官方建议 1-10</p>
</li>
<li><p>为某个字段反向生成url</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​    7.分页</p>
<ul>
<li><p>如果数据库有一千万条数据时，后面的分页数据响应越来越慢，如何解决这个问题？</p>
</li>
<li><p>设置每页显示多少条，显示结果</p>
</li>
<li><p>也可以设置基于索引位置，显示多少条  LimitOffPagination</p>
</li>
<li><p>将查询的页码显示为随机数，为了防止查询太对的页数</p>
</li>
</ul>
<p>​    8.路由</p>
<p>​    9.渲染器</p>
<p>​    10. 扩展APIView视图</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/01/20/interview/</url>
    <content><![CDATA[<h2 id="web开发面试题"><a href="#web开发面试题" class="headerlink" title=" web开发面试题 "></a><center> web开发面试题 </center></h2><ol>
<li><p>中间件有几种方法？</p>
<ul>
<li><p>process_request(self, request)</p>
<ul>
<li>django接收到request之后，在未解析url确定运行的view之前</li>
<li>返回值有None, HttpResponse对象</li>
<li>如果返回None,Django继续处理这个request,执行后续的中间件；</li>
<li>如果返回ＨttpResponse,Django不再执行其他的中间件以及视图，立即返回；</li>
</ul>
</li>
<li><p>process_view(self, request, view, <em>args, *</em>kwargs)</p>
<ul>
<li>调用时机是在：django执行完request预处理函数并确定待执行的view之后，但是在view函数实际执行之前</li>
<li>request,是HttpResponse对象，view是要调用的视图函数对象</li>
<li><em>args, *</em>kwargs:传入view的位置参数和关键字参数；</li>
<li>返回None 或者HttpResponse对象</li>
<li>返回None,Ｄjango继续处理这个request,执行后续的中间件，然后调用相应的ｖｉｅｗ;</li>
<li>返回HttpResponse对象，django不再执行任何其他的中间件以及对应的view, 立即返回ＨttpResponse;</li>
</ul>
</li>
<li><p>process_response(self, request, response)</p>
<ul>
<li>调用时机是在django执行ｖｉｅｗ函数并生成response 之后</li>
<li>参数：request是request对象，response是从view中返回的response对象</li>
<li>必须返回　ＨttpResponse对象；</li>
</ul>
</li>
<li><p>process_exception(self, request, exception)</p>
<ul>
<li>调用时机：view函数抛出了一个未捕获的异常调用</li>
<li>参数：exception是view函数抛出的实际的异常对象exception</li>
<li>返回值：None, django使用框架内置的异常处理机制</li>
<li>返回　HttpResponse对象，</li>
</ul>
</li>
<li><p>适用于所有请求批量操作</p>
</li>
</ul>
<p>场景:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 基于角色的权限控制</span><br><span class="line">- 用户认证</span><br><span class="line">- csrf </span><br><span class="line">- session</span><br><span class="line">- 日志记录</span><br><span class="line">- 黑名单</span><br></pre></td></tr></table></figure>
</li>
<li><p>csrf_token 如何实现的？如何避免csrf验证？</p>
</li>
<li><p>谈谈对restful 的理解？</p>
</li>
<li><p>面向对象的理解？</p>
<p>封装 ，继承，多态</p>
<p>封装: 类的封装，实例的封装</p>
<p>继承: 为什么要继承？深度优先（经典类）广度优先（新式类）</p>
</li>
<li><p>django请求的声明周期?</p>
<p>WSGI —&gt;中间件–&gt;路由匹配 —&gt;视图（FBV/CBV)—&gt;响应</p>
</li>
<li><p>常见的请求头，状态码，请求方法</p>
</li>
<li><p>源码流程</p>
</li>
<li><p>mysql 联表查询语句？ 数据量很大的时候，分页如何做？</p>
</li>
<li><p>如何实现跨域？</p>
<ul>
<li>CORS</li>
<li>jsonp</li>
<li>nginx 反向代理</li>
</ul>
</li>
<li><p>djangorestframework提供的功能或者入口在哪里？</p>
<ul>
<li>首先我们自己定义的类视图要继承APIView或者它的子类</li>
<li>APIView 重新实现了dispatch方法</li>
<li>dispatch方法中两个重要的方法：initialize_request 和initial方法</li>
<li>initialize_request()对原始的request进行封装，同时添加了解析器和认证器；</li>
<li>initial方法中实现了版本，执行认证，检查权限和频率访问；</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>restful风格规范</title>
    <url>/2020/01/20/restful%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="restful风格规范"><a href="#restful风格规范" class="headerlink" title=" restful风格规范 "></a><center> restful风格规范 </center></h2><a id="more"></a>

<ol>
<li>协议</li>
<li>域名（url中应该体现api接口)<ul>
<li>放在主域名<a href="https://example.com/api" target="_blank" rel="noopener">https://example.com/api</a></li>
<li>或者使用专有域名<a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>  存在跨域问题</li>
</ul>
</li>
<li>版本   (url中体现版本)</li>
<li>能够提供查询参数接口，过滤返回结果</li>
<li>定义资源的方式尽量使用名词()</li>
<li>响应参数使用json格式</li>
<li>状态码与code结合</li>
<li>错误信息</li>
<li>返回结果，不同的请求，返回不同的结果。</li>
<li>返回结果中最好加上一个超链接</li>
</ol>
<p>、</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>python2.x中json的操作</title>
    <url>/2020/01/20/python2-x%E4%B8%ADjson%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="python2-x中json的操作"><a href="#python2-x中json的操作" class="headerlink" title=" python2.x中json的操作 "></a><center> python2.x中json的操作 </center></h2><a id="more"></a>

<p>json的操作就是将字典转换为json格式的字符串(dump/dumps),也可以将json格式的字符串转换成字典(load/loads).</p>
<ol>
<li>dumps方法(字典转换成json格式的字符串）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   astr = json.dumps(adict)</span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment"># &#123;"a": "123", "c": "json", "b": "\u6d4b\u8bd5"&#125;</span></span><br><span class="line">   astr = json.dumps(adict, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>) <span class="comment">#indent确定缩进，ensure_ascii=False显示中文</span></span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment">#&#123;</span></span><br><span class="line">   	<span class="string">"a"</span>: <span class="string">"123"</span>, </span><br><span class="line">   	<span class="string">"c"</span>: <span class="string">"json"</span>, </span><br><span class="line">   	<span class="string">"b"</span>: <span class="string">"测试"</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">'str.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       f.write(astr.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   <span class="comment"># 可以通过 sudo apt install jq 工具来查看json文件</span></span><br><span class="line">   <span class="comment"># cat str.json|jq</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dump方法作用和上面一样</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   f = open(<span class="string">'str.json'</span>, <span class="string">'w'</span>)</span><br><span class="line">   json.dump(adict, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">   <span class="comment">#不需要write方法就可以写入文件</span></span><br></pre></td></tr></table></figure>

<p>因此，操作文件的时候，使用dump,不需要操作文件的时候，使用dumps.</p>
<ol start="3">
<li>loads方法,将json字符串转换成字典</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   content = f.read()</span><br><span class="line">   data = json.loads(content)</span><br><span class="line">   <span class="comment">###############</span></span><br><span class="line">   f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   data = json.load(f)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>可以通过codecs模块中的open方法指定编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = codecs.open(<span class="string">'str.json'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># python3 中的open方法可以使用encoding参数</span></span><br></pre></td></tr></table></figure>

<p>应用中遇到的问题: 使用Django，通过<code>session.set_expiry(timedelta(days=3))</code> 为<code>session</code> 设置过期时间时，遇到了<code>TypeError: datetime.datetime(2020, 1, 23, 11, 1, 58, 993654) is not JSON serializable</code> 这样的错误，就是因为json默认不支持对<code>datetime</code> 对象的序列化。</p>
<p>首先解决方法:在工程的配置文件 <code>settings</code> 中设置一个属性</p>
<p>`SESSION_SERIALIZER=’django.contrib.sessions.serializers.PickleSerializer’ </p>
<p>如果自定义支持对<code>datetime</code> 的序列化，可以通过下面的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">   adict = &#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'create_time'</span>: datetime.now()&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">DateEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">           <span class="keyword">if</span> isinstance(obj, datetime):</span><br><span class="line">               <span class="keyword">return</span> obj.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> super(DateEncoder, self).default(obj)</span><br><span class="line">    </span><br><span class="line">   print(json.dumps(adict, cls=DateEncoder))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的魔术方法使用</title>
    <url>/2020/01/18/python%E4%B8%AD%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Python中的魔术方法使用"><a href="#Python中的魔术方法使用" class="headerlink" title="Python中的魔术方法使用"></a><center>Python中的魔术方法使用</center></h2><a id="more"></a>
<ol>
<li><p>新式类使用<code>__getattribute__</code> 这个方法后，无论实例访问类属性，实例属性，方法，还是访问不存在的属性时，都会调用这个方法，而通过类访问属性，方法时，不会调用这个方法</p>
<p>常用于：实现访问属性时执行一段代码的特性</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">		self.name = name</span><br><span class="line">		self.age = age</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">		print(<span class="string">'拦截'</span>)</span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			<span class="keyword">return</span> super(Man, self).__getattribute__(attr)</span><br><span class="line">		<span class="keyword">except</span> AttributeError:</span><br><span class="line">			print(<span class="string">'have not attribute of %s'</span> % attr)</span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">           print(<span class="string">'hello world'</span>)</span><br><span class="line">   ins = Man(<span class="string">'test'</span>, <span class="number">10</span>)</span><br><span class="line">   print(Man.gender)   </span><br><span class="line">   <span class="comment">#男</span></span><br><span class="line">   print(ins.name)</span><br><span class="line">   <span class="comment">#拦截</span></span><br><span class="line">   <span class="comment">#男</span></span><br><span class="line">   print(ins.job)</span><br><span class="line">   <span class="comment">#拦截</span></span><br><span class="line">   <span class="comment">#have not attribute of job</span></span><br><span class="line">   <span class="comment">#None</span></span><br><span class="line">   ins.hello()</span><br><span class="line">   <span class="comment">#hello world</span></span><br></pre></td></tr></table></figure>

<p>总之，通过实例访问的属性，方法都会被拦截，包括<code>self.__dict__</code> ,使用这个方法的唯一安全方式就是覆盖父类的方法。</p>
<ol start="2">
<li>如果使用了<code>__getattr__</code> 这个方法，它的执行条件是 <code>__getattribute__</code> 触发了<code>AttributeError</code> 异常后，才会调用这个方法。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">           self.age = age</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">           <span class="keyword">print</span> <span class="string">'执行__getattr__'</span></span><br><span class="line">       	</span><br><span class="line">    ins = Man(<span class="string">'hello'</span>, <span class="number">20</span>)</span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#执行__getattr__  (父类的__getattribute__触发了AttributeError异常)</span></span><br><span class="line">    当添加了下面的方法后</span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    		<span class="keyword">print</span> <span class="string">'拦截'</span></span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#拦截  (将不会执行__getattr__这个方法，因为__getattribute__覆盖了父类的方法，没有触发异常)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用<code>__setattr__</code> :任何对实例属性赋值的操作都将调用这个方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name <span class="comment">#执行 __setattr__</span></span><br><span class="line">           self.age = age <span class="comment">#执行__setattr__</span></span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">       	<span class="keyword">print</span> <span class="string">'执行__setattr__'</span></span><br><span class="line">       	self.__dict__[key] = val <span class="comment">#这里不能通过self.key = val这种方式进行赋值，否则会进入无限循环</span></span><br><span class="line">       	</span><br><span class="line">   ins = Man(<span class="string">'hello'</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   Man.gender = <span class="string">'女'</span>  <span class="comment">#不会执行__setattr__</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li><code>__get__</code> 使用:拥有这个方法的类，产生一个实例，同时这个实例是另一个类的类属性，实例属性与这个方法就没有关系了；</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBase</span><span class="params">(object)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>)</span><br><span class="line">           print(instance, owner)</span><br><span class="line">     </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestBase()</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (&lt;__main__.TestMain instance at 0x7fd46ba0a200&gt;, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span>  <span class="comment">#通过实例进行赋值</span></span><br><span class="line">       print(t.tes) <span class="comment"># 获得这个值</span></span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes <span class="comment">#访问这个值，将调用__get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7f7ead5e1668&gt;)</span></span><br><span class="line">       <span class="comment"># 通过TestMain赋值</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#通过这种方式赋值，不会调用__get__</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值后，类再访问这个属性，不能获取这个值，调用了<code>__get__</code> </p>
<ol start="5">
<li><code>__get__</code> 和<code>__set__</code> 同时存在的情况下，如何呢？</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSet</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>, instance, owner)</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, val)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __set__'</span>, instance, val)</span><br><span class="line">           </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestSet()</span><br><span class="line">	</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff1acb00f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span> <span class="comment"># 调用__set__方法</span></span><br><span class="line">       <span class="comment"># ('enter __set__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, 1)</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#与__get__, __set__无关</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值时，调用<code>__set__</code> ,然后无论通过类还是实例再次获取这个属性时，都将调用<code>__get__</code> </p>
<p><code>__get__</code> 的应用在<code>Django</code> 中的体现是，可以重写<code>@classmethod</code> 实现只能通过类进行访问类方法，而不能通过实例访问类方法：（<code>from django.utils.decorators import classonlymethod</code> )</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装最新版的nodejs</title>
    <url>/2020/01/17/ubuntu16-04%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84nodejs/</url>
    <content><![CDATA[<h2 id="ubuntu16-04安装最新版的nodejs"><a href="#ubuntu16-04安装最新版的nodejs" class="headerlink" title="ubuntu16.04安装最新版的nodejs"></a><center>ubuntu16.04安装最新版的nodejs</center></h2><a id="more"></a>
<p>ubuntu16.04 默认安装了v4.2.6版本的nodejs，为了使用最新版的nodejs，使用一下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>sudo apt update -y</span><br><span class="line"><span class="number">2.</span>sudo apt install nodejs nodejs-legacy npm -y</span><br><span class="line"><span class="number">3.</span>sudo npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="number">4.</span>sudo npm install n -g</span><br><span class="line"><span class="number">5.</span>sudo n stable</span><br></pre></td></tr></table></figure>

<p>遇到的问题：</p>
<p>使用命令<code>n</code> 安装过程非常缓慢，需要修改<code>n</code> 中的 <code>N_NODE_MIRROR</code> ，更改为国内的镜像源</p>
<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> </p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
