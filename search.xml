<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python函数</title>
    <url>/2020/10/12/python%E5%87%BD%E6%95%B0-1/</url>
    <content><![CDATA[<h1 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a><center>Python函数</center></h1><a id="more"></a>

<h2 id="1-高阶函数"><a href="#1-高阶函数" class="headerlink" title="1. 高阶函数"></a>1. 高阶函数</h2><ul>
<li>接收函数作为参数，或者把函数作为结果返回的函数就是<strong>高阶函数</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据单词长度就行排序</span></span><br><span class="line">fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="comment"># 任何单参函数都能作为key参数的值</span></span><br><span class="line">sorted(fruits, key=len)</span><br><span class="line">[<span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'banana'</span>, <span class="string">'respberry'</span>, <span class="string">'strawberry'</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>map</code>, <code>reduce</code>, <code>filter</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">- python2 中，map,filter返回一个列表，而在python3中，返回生成器</span><br><span class="line">- reduce， python2中内置函数；在python3中放在 functools包中；</span><br></pre></td></tr></table></figure>

<h2 id="2-可调用对象"><a href="#2-可调用对象" class="headerlink" title="2.可调用对象"></a>2.可调用对象</h2><ul>
<li><code>callable()</code> 用来判断对象是否是可调用的</li>
<li>可调用对象有7种<ul>
<li>用户定义的函数</li>
<li>内置函数</li>
<li>内置方法</li>
<li>方法</li>
<li>类， 调用类时运行类的<code>__new__</code> 方法创建一个实例，然后运行<code>__init__</code>，初始化实例，最后把实例返回给调用方</li>
<li>类的实例</li>
<li>生成器函数，使用<code>yield</code>定义的函数或者方法</li>
</ul>
</li>
</ul>
<h2 id="3-新增了-仅限关键字参数的传参方式"><a href="#3-新增了-仅限关键字参数的传参方式" class="headerlink" title="3. 新增了 仅限关键字参数的传参方式"></a>3. 新增了 仅限关键字参数的传参方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能用在Python3中，cls只能通过关键字参数传入，如果想只能通过关键字参数传入，就将cls放在*参数后面即可</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name, *content, cls=None, **attrs)</span>:</span> </span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line">my_tag = &#123;<span class="string">'name'</span>: <span class="string">'img'</span>, <span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>, <span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>, <span class="string">'cls'</span>: <span class="string">'framed'</span>&#125;</span><br><span class="line"><span class="comment"># 同名键绑定到对应的具名参数上，余下的则被**attrs捕获</span></span><br><span class="line">tag(**my_tag)</span><br></pre></td></tr></table></figure>



<h2 id="4-支持函数式编程的包"><a href="#4-支持函数式编程的包" class="headerlink" title="4. 支持函数式编程的包"></a>4. 支持函数式编程的包</h2><ul>
<li>不使用递归计算阶乘</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="comment">#return reduce(lambda a, b: a * b, range(1, n+1))</span></span><br><span class="line">    <span class="keyword">return</span> reduce(mul, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>operator</code> 中<code>itemgetter</code>和<code>attrgetter</code> 创建的函数用来提取元素或者属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># itemgetter可以从序列中取出元素</span></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: metro_data = [</span><br><span class="line">   ...: (<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36</span>, (<span class="number">35</span>, <span class="number">13</span>)),</span><br><span class="line">   ...: (<span class="string">'Del'</span>, <span class="string">'IN'</span>, <span class="number">21</span>, (<span class="number">28</span>, <span class="number">77</span>)),</span><br><span class="line">   ...: (<span class="string">'Mexico'</span>, <span class="string">'MX'</span>, <span class="number">20</span>, (<span class="number">19</span>, <span class="number">-99</span>))</span><br><span class="line">   ...: ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># itemgetter相当于lambda x: x[1]</span></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_data, key=itemgetter(<span class="number">1</span>)):</span><br><span class="line">   ...:     print(city)</span><br><span class="line">   ...:     </span><br><span class="line">(<span class="string">'Del'</span>, <span class="string">'IN'</span>, <span class="number">21</span>, (<span class="number">28</span>, <span class="number">77</span>))</span><br><span class="line">(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36</span>, (<span class="number">35</span>, <span class="number">13</span>))</span><br><span class="line">(<span class="string">'Mexico'</span>, <span class="string">'MX'</span>, <span class="number">20</span>, (<span class="number">19</span>, <span class="number">-99</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#传递多个参数给itemgetter,它构建的函数将返回提取值得元祖；</span></span><br><span class="line">cc_name = itemgetter(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">itemgetter(metro_data[<span class="number">0</span>]) <span class="comment"># 返回 ('JP', 'Tokyo')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#methodcaller用法，创建一个函数会在对象上调用参数指定的方法</span></span><br><span class="line">In [<span class="number">20</span>]: upcase = methodcaller(<span class="string">'upper'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: upcase(s)</span><br><span class="line">Out[<span class="number">21</span>]: <span class="string">'THIS IS A TEST'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: test_replace = methodcaller(<span class="string">'replace'</span>, <span class="string">' '</span>, <span class="string">'_'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: test_replace(s)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="string">'this_is_a_test'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>functools.partial</code> 冻结参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">24</span>]: <span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="comment"># partial接收一个可调用对象，然后把原函数的某些参数固定</span></span><br><span class="line">In [<span class="number">26</span>]: triple = partial(mul, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: triple(<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">27</span>]: <span class="number">21</span></span><br></pre></td></tr></table></figure>

<h2 id="5-函数闭包使用"><a href="#5-函数闭包使用" class="headerlink" title="5. 函数闭包使用"></a>5. 函数闭包使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在averager函数中series是自由变量，尽管make_averager已经执行完毕，本地作用域不复存在，但是变量series被绑定到了函数averager中</span></span><br><span class="line">In [<span class="number">70</span>]: <span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    ...:     series = []</span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">    ...:         series.append(new_value)</span><br><span class="line">    ...:         total = sum(series)</span><br><span class="line">    ...:         <span class="keyword">return</span> total / len(series)</span><br><span class="line">    ...:     <span class="keyword">return</span> averager</span><br><span class="line">    ...: </span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: avg = make_averager()</span><br><span class="line"><span class="comment"># 通过__code__可以查看函数avg保存的局部变量和自由变量的名称</span></span><br><span class="line">In [<span class="number">72</span>]: avg.__code__.co_varnames</span><br><span class="line">Out[<span class="number">72</span>]: (<span class="string">'new_value'</span>, <span class="string">'total'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">73</span>]: avg.__code__.co_freevars</span><br><span class="line">Out[<span class="number">73</span>]: (<span class="string">'series'</span>,)</span><br><span class="line"><span class="comment"># 通过__closure__可以查看co_freevars中的各个元素对应的值</span></span><br><span class="line">In [<span class="number">78</span>]: avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">Out[<span class="number">78</span>]: [<span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">79</span>]: avg(<span class="number">12</span>)</span><br><span class="line">Out[<span class="number">79</span>]: <span class="number">11</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">80</span>]: avg.__closure__[<span class="number">0</span>].cell_contents</span><br><span class="line">Out[<span class="number">80</span>]: [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>nonlocal</code> 使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">81</span>]: <span class="function"><span class="keyword">def</span> <span class="title">make_average1</span><span class="params">()</span>:</span></span><br><span class="line">    ...:     count = <span class="number">0</span></span><br><span class="line">    ...:     value = <span class="number">0</span></span><br><span class="line">    ...:     <span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(new_value)</span>:</span></span><br><span class="line">    ...:         value += value  <span class="comment"># 对于不可变类型(数字，字符串，元祖),相当于定义了一个新的局部变量value = value + 1</span></span><br><span class="line">        <span class="comment"># 这时候value不是自由变量了，所以将报错</span></span><br><span class="line">    ...:         count += <span class="number">1</span></span><br><span class="line">    ...:         <span class="keyword">return</span> value / count</span><br><span class="line">    ...:     <span class="keyword">return</span> average</span><br><span class="line">    ...: </span><br><span class="line"></span><br><span class="line">In [<span class="number">82</span>]: avg = make_average1()</span><br><span class="line"></span><br><span class="line">In [<span class="number">83</span>]: avg(<span class="number">10</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnboundLocalError                         Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-83</span>-ace390caaa2e&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 avg(10)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-81</span>-dde1fe0061af&gt; <span class="keyword">in</span> average(new_value)</span><br><span class="line">      <span class="number">3</span>     value = <span class="number">0</span></span><br><span class="line">      <span class="number">4</span>     <span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(new_value)</span>:</span></span><br><span class="line">----&gt; 5         value += value</span><br><span class="line">      <span class="number">6</span>         count += <span class="number">1</span></span><br><span class="line">      <span class="number">7</span>         <span class="keyword">return</span> value / count</span><br><span class="line"></span><br><span class="line">UnboundLocalError: local variable <span class="string">'value'</span> referenced before assignment</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对于python3的解决方案就是添加了nonlocal,python2中没有此关键字，在python2只能通过对可变类型赋值</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_average</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    count = <span class="number">0</span> </span><br><span class="line"><span class="meta">... </span>    value = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(new_value)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">nonlocal</span> value, count  <span class="comment">#nonlocal作用就是将不可变变量变为自由变量</span></span><br><span class="line"><span class="meta">... </span>            value += new_value</span><br><span class="line"><span class="meta">... </span>            count += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> value / count</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> average</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_average()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure>

<h2 id="6-函数参数"><a href="#6-函数参数" class="headerlink" title="6. 函数参数"></a>6. 函数参数</h2><p>如果给函数传递的参数是可变类型，如列表，字典等，在使用时，要分是否要修改实参对象来使用；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span><span class="params">(object)</span>:</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=[])</span>:</span></span><br><span class="line">        <span class="comment"># 会修改传递进来的实参对象</span></span><br><span class="line">        self.passengers = passengers</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    def __init__(self, passengers=None):</span></span><br><span class="line"><span class="string">    	if not passengers:</span></span><br><span class="line"><span class="string">    		self.passengers = []</span></span><br><span class="line"><span class="string">    	else:</span></span><br><span class="line"><span class="string">    	#创建一个passengers的副本，浅复制，复制外层的容器，容器里面的元素是可变类型的话，就是引用原始容器的元素</span></span><br><span class="line"><span class="string">    		self.passengers = list(passengers)</span></span><br><span class="line"><span class="string">    """</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.append(name)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.remove(name)</span><br></pre></td></tr></table></figure>

<p><strong>除非想修改通过参数传入的对象，否则在类中直接把参数赋值给实例变量前要三思，因为这样会为参数对象创建别名,如果不确定，那就创建副本。</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-9-22 ubuntu 上运行mysql多个实例 155024</title>
    <url>/2020/10/12/2020-9-22%20ubuntu%20%E4%B8%8A%E8%BF%90%E8%A1%8Cmysql%E5%A4%9A%E4%B8%AA%E5%AE%9E%E4%BE%8B%20155024/</url>
    <content><![CDATA[<h1 id="ubuntu-上运行mysql多个实例"><a href="#ubuntu-上运行mysql多个实例" class="headerlink" title=" ubuntu 上运行mysql多个实例"></a><center> ubuntu 上运行mysql多个实例</center></h1><a id="more"></a>

<h2 id="1-当前系统环境"><a href="#1-当前系统环境" class="headerlink" title="1. 当前系统环境"></a>1. 当前系统环境</h2><ul>
<li>mysql 5.7.31</li>
<li>ubuntu16.04</li>
</ul>
<h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul>
<li><p>创建需要的目录</p>
<ul>
<li><p>mkdir -p /data/mysql/330{7..9}/data</p>
</li>
<li><p>mkdir -p /binlog/330{7..9}</p>
</li>
</ul>
</li>
<li><p>创建配置文件</p>
<ul>
<li><p>cat  &gt; /data/mysql/3307.cnf &lt;&lt;EOF</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">basedir=/usr</span><br><span class="line">datadir=/data/mysql/3307/data</span><br><span class="line">socket=/tmp/mysql3307.sock</span><br><span class="line">log_error=/data/mysql/3307.log</span><br><span class="line">port=3307</span><br><span class="line">server_id=7</span><br><span class="line">log_bin=/binlog/3307/mysql-bin</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>cat &gt; /data/mysql/3308.cnf &lt;&lt;EOF</p>
</li>
<li><p>cat  &gt;/data/mysql/3309.cnf&lt;&lt;EOF</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>配置权限</p>
<ul>
<li><p>sudo chown -R mysql.mysql /data</p>
</li>
<li><pre><code class="shell">sudo vi /etc/apparmor.d/usr.sbin.mysqld 
<span class="meta">#</span><span class="bash"> 增加权限，否则后面会出错</span>
/data/mysql/ r,
/data/mysql/** rwk,    

sudo service apparmor restart
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 修改&#x2F;etc&#x2F;mysql&#x2F;my.cnf,使用mysqld_multi 管理这个mysql服务</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;shell</span><br><span class="line">   32 [mysqld_multi]</span><br><span class="line">   33 mysqld&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqld_safe</span><br><span class="line">   34 mysqladmin&#x3D;&#x2F;usr&#x2F;bin&#x2F;mysqladmin</span><br><span class="line">   35 user&#x3D;root</span><br><span class="line">   36 pass&#x3D;123456</span><br><span class="line">   37  </span><br><span class="line">   38 [mysqld3307]</span><br><span class="line">   39 port&#x3D;3307</span><br><span class="line">   40 server-id&#x3D;3307</span><br><span class="line">   41 datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;3307</span><br><span class="line">   42 log-bin&#x3D;&#x2F;data&#x2F;mysql&#x2F;3307&#x2F;mysql-bin</span><br><span class="line">   43 pid-file&#x3D;&#x2F;data&#x2F;mysql&#x2F;pid&#x2F;3307.pid</span><br><span class="line">   44 socket&#x3D;&#x2F;tmp&#x2F;mysql3307.sock</span><br><span class="line">   45 log-error&#x3D;&#x2F;data&#x2F;mysql&#x2F;error_3307.log</span><br><span class="line">   46 skip-external-locking</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="3-初始化数据"><a href="#3-初始化数据" class="headerlink" title="3. 初始化数据"></a>3. 初始化数据</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysqld --defaults-file=/data/mysql/3307.cnf --initialize-insecure --user=mysql --explicit_defaults_for_timestamp</span><br></pre></td></tr></table></figure>

<h2 id="4-启动这个实例"><a href="#4-启动这个实例" class="headerlink" title="4. 启动这个实例"></a>4. 启动这个实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld_multi start 3307    # 3307-3309</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看实例是否在运行</span></span><br><span class="line">mysqld_multi report</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看实例占用的端口</span></span><br><span class="line">netstat -lnpt | grep -E "3306|3307|3308"</span><br></pre></td></tr></table></figure>

<h2 id="5-开始时没有密码，可以通过下面方式设置，不过不太安全"><a href="#5-开始时没有密码，可以通过下面方式设置，不过不太安全" class="headerlink" title="5. 开始时没有密码，可以通过下面方式设置，不过不太安全"></a>5. 开始时没有密码，可以通过下面方式设置，不过不太安全</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root password 123456 -S /tmp/mysql3307.sock</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>2020-9-21 Mysql继续学习 161125</title>
    <url>/2020/10/12/2020-9-21%20Mysql%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0%20161125/</url>
    <content><![CDATA[<h1 id="Mysql继续学习"><a href="#Mysql继续学习" class="headerlink" title="Mysql继续学习"></a><center>Mysql继续学习</center></h1><a id="more"></a>

<h2 id="1-索引的原理"><a href="#1-索引的原理" class="headerlink" title="1. 索引的原理"></a>1. 索引的原理</h2><p> 索引就是帮助Mysql高效获取数据的数据结构。</p>
<p>优势：快速查询数据，降低数据库的IO成本；</p>
<p>劣势：索引也是表，也要占用空间；虽然提高了查询效率，但是降低了更新表的速度，对表进行insert, update, delete等，更新表时，mysql不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，调整更新带来的键值变化后的索引信息；</p>
<ul>
<li>索引结构<ul>
<li>索引是MySQL的存储引擎层中实现的，不是在服务器层实现，每种存储引擎的索引不一定相同，也不是所有的存储引擎都支持所有的索引类型，</li>
<li>InnoDB引擎支持的索引有：Btree索引，full-text索引（5.6版本后支持），平常所说的索引，没有特别指定，都是指B+树（多路搜索树，不一定是二叉的）结构的索引；其中聚集索引，复合索引，前缀索引，唯一索引默认都是使用B+tree树索引；</li>
<li>btree结构：<ul>
<li>btree又叫多路平衡搜索树，一个m叉的btree特性：<ul>
<li>树中每个节点最多包含有m个孩子；</li>
<li>除根节点和叶子节点外，每个节点至少有（m/2)（向上取整）个孩子</li>
<li>若根节点不是叶子节点，则至少有两个孩子</li>
<li>所有叶子节点都在同一层</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中 （m/2)（向上取整）- 1 &lt;= n &lt;= m -1;当n大于最大值时，中间节点分裂到父节点，两边节点分裂；</li>
</ul>
</li>
</ul>
</li>
<li>b+tree与btree区别<ul>
<li>n叉b+tree最多包含有n个key，而btree最多含有n-1个key</li>
<li>b+tree的叶子节点保存所有的key信息，按照key大小排序</li>
<li>所有的非叶子节点可以看做是key的索引；</li>
</ul>
</li>
<li>mysql中的b+tree数据结构对经典的b-tree进行了优化，在原有b-tree基础上，增加了一个指向相邻叶子节点的链表指针，形成了带有顺序指针的B+tree,提高区间访问的性能；</li>
</ul>
</li>
<li>索引分类：                                  <ul>
<li>单值索引：一个索引包含单个列</li>
<li>唯一索引：索引列的值必须唯一，可以有多个null</li>
<li>复合索引：多列构成的索引；</li>
</ul>
</li>
</ul>
<h2 id="2-索引的增删改查"><a href="#2-索引的增删改查" class="headerlink" title="2.索引的增删改查"></a>2.索引的增删改查</h2><ul>
<li><p>创建索引：create index idx_city_name on city(city_name);</p>
<ul>
<li>也可以通过：alter table city add unique idx_city_name(city_name);  创建唯一索引</li>
</ul>
</li>
<li><p>查看索引： show index from city;</p>
</li>
<li><p>删除索引： drop index idx_city_name on city;</p>
</li>
</ul>
<h2 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h2><ul>
<li>视图：提高复杂SQL语句的复用性和表操作的安全性；</li>
<li>视图作用<ul>
<li>安全，创建一个视图，定义好该视图操作的数据，之后将用户权限与视图进行绑定，可以通过grant语句对视图进行授予权限；</li>
<li>查询性能提高，将查询的结果保存到视图中；</li>
<li>数据独立： 一个视图就是一个表的查询结果集，相当于一个虚拟的表，可以对这个表再进行查询，</li>
</ul>
</li>
<li>创建视图 <ul>
<li>create view view_city_country as select c.*, t.country_name from city c, country t where c.country_id = t.country_id;</li>
<li>create or replace view view_city_country as 新的查询语句；创建或者覆盖已经存在的视图名</li>
</ul>
</li>
<li>修改视图:通过视图能够修改原表；<ul>
<li>update view_city_country set city_name = ‘西安市’ where city_id =1;</li>
</ul>
</li>
<li>使用视图： <ul>
<li>select * from view_city_country;</li>
</ul>
</li>
<li>删除视图<ul>
<li>drop view view_city_country;</li>
</ul>
</li>
<li>查看视图： show tables;</li>
<li>查看视图创建语句： show  create view view_city_country;</li>
<li>视图的其他参数：<ul>
<li>with check option:在插入或者更新数据时，不能插入或者更新不符合限制条件的记录</li>
<li>algorithm 参数有 merge,temptable,undefined,默认参数为merge<ul>
<li>merge :直接将视图转化为sql语句执行；修改视图生成表的数据也会直接更新基表；</li>
<li>temptable:先将视图结果存放到内存，然后创建一个临时表，再从临时表取数据，不能直接更新基表；</li>
</ul>
</li>
</ul>
</li>
<li>视图中的数据不可更新<ul>
<li>视图表中的数据不是直接来源于基表，不能修改；</li>
</ul>
</li>
</ul>
<h2 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4. 存储过程和函数"></a>4. 存储过程和函数</h2><ul>
<li><p>存储过程：实现将一组对表操作的sql语句代码当做一个整体来执行；</p>
<ul>
<li>将重复性操作封装到存储过程中，减少对sql的调用；</li>
<li>批量处理</li>
</ul>
</li>
<li><p>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test1()</span><br><span class="line">begin</span><br><span class="line">select * from view_city_country;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call pro_test1();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show procedure status; -- 查看数据库中所有存储过程</span><br><span class="line">-- 查看数据库中指定存储过程：</span><br><span class="line">show procedure status where db&#x3D;&#39;use_index&#39;;</span><br><span class="line">-- 查看创建存储过程语句：</span><br><span class="line">show create procedure pro_test1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure pro_test1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h4><h5 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare res varchar(100) default &#39;&#39;;</span><br><span class="line">declare x,y int default 0;  -- 变量声明</span><br><span class="line">set x &#x3D; 3; -- 变量赋值 第一种方式</span><br><span class="line">set y &#x3D; 4;</span><br><span class="line">declare avgres double;</span><br><span class="line">select avg(salary) into avgres from test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure pro_test2()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int;</span><br><span class="line">    -&gt; select count(*) into num from city; -- 变量赋值 第二种方式</span><br><span class="line">    -&gt; select concat(&#39;city表中的记录数为:&#39;, num);</span><br><span class="line">    -&gt; end$$</span><br></pre></td></tr></table></figure>

<h5 id="2-参数"><a href="#2-参数" class="headerlink" title="2.参数"></a>2.参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 输入参数 </span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test3(in height int)</span><br><span class="line">begin</span><br><span class="line">declare description varchar(50) default &#39;&#39;;</span><br><span class="line">if height &gt;&#x3D; 180 then</span><br><span class="line">	set description&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D;170 and height &lt; 180 then</span><br><span class="line">	set description&#x3D;&#39;标准身材&#39;;</span><br><span class="line">else</span><br><span class="line">	set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">select concat(&#39;身高&#39;, height, &#39; 对应的身材类型是:&#39;, description);</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test6(height int, out descrip varchar(50))</span><br><span class="line">begin</span><br><span class="line">if height &gt;&#x3D;180 then</span><br><span class="line">	set descrip&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D; 170 and height &lt; 180 then</span><br><span class="line">	set descrip&#x3D;&#39;身材一般&#39;;</span><br><span class="line">else</span><br><span class="line">	set descrip&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">-- 调用上面的方式有</span><br><span class="line">call(145, @description);</span><br><span class="line">select @description;  @description 用户定义的会话变量</span><br></pre></td></tr></table></figure>



<h5 id="3-条件判断语句"><a href="#3-条件判断语句" class="headerlink" title="3.条件判断语句"></a>3.条件判断语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test3()</span><br><span class="line">begin</span><br><span class="line">declare height int default 175;</span><br><span class="line">declare description varchar(50) default &#39;&#39;;</span><br><span class="line">if height &gt;&#x3D; 180 then</span><br><span class="line">	set description&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D;170 and height &lt; 180 then</span><br><span class="line">	set description&#x3D;&#39;标准身材&#39;;</span><br><span class="line">else</span><br><span class="line">	set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">select concat(&#39;身高&#39;, height, &#39; 对应的身材类型是:&#39;, description);</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="4-case"><a href="#4-case" class="headerlink" title="4. case"></a>4. case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test8(mon int)</span><br><span class="line">begin</span><br><span class="line">declare result varchar(10);</span><br><span class="line">case </span><br><span class="line">when mon&gt;&#x3D;1 and mon &lt;&#x3D;3 then</span><br><span class="line">	set result&#x3D;&#39;第一季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;4 and mon&lt;&#x3D;6 then</span><br><span class="line">	set result&#x3D;&#39;第二季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;7 and mon&lt;&#x3D;9 then</span><br><span class="line">	set result&#x3D;&#39;第三季度&#39;;</span><br><span class="line">else</span><br><span class="line">	set result&#x3D;&#39;第四季度&#39;;</span><br><span class="line">end case;</span><br><span class="line">select concat(&#39;传递的月份是:&#39;, mon, &#39;,计算出的结果是：&#39;, result) as content;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="5-while-repeat-loop循环"><a href="#5-while-repeat-loop循环" class="headerlink" title="5. while, repeat, loop循环"></a>5. while, repeat, loop循环</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 从1累加到n，求结果</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test9(n int)</span><br><span class="line">begin </span><br><span class="line">	declare total int default 0;</span><br><span class="line">	declare num int default 1;</span><br><span class="line">	while num &lt;&#x3D; n do</span><br><span class="line">		set total &#x3D; total + num;</span><br><span class="line">		set num &#x3D; num + 1;</span><br><span class="line">	end while;</span><br><span class="line">	select total;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test10(n int)</span><br><span class="line">begin</span><br><span class="line">	declare total int default 0;</span><br><span class="line">	declare num int default 1;</span><br><span class="line">	repeat </span><br><span class="line">		set total&#x3D;total+n;</span><br><span class="line">		set n&#x3D;n-1;</span><br><span class="line">		until n&#x3D;0</span><br><span class="line">	end repeat;</span><br><span class="line">	select total;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test11(n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">c:loop</span><br><span class="line">	set total &#x3D; total + n;</span><br><span class="line">	set n &#x3D; n - 1;</span><br><span class="line">	if n &lt;&#x3D; 0 then</span><br><span class="line">		leave c;</span><br><span class="line">	end if;</span><br><span class="line">end loop c;</span><br><span class="line">select total;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="6-循环使用"><a href="#6-循环使用" class="headerlink" title="6. 循环使用"></a>6. 循环使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test13()</span><br><span class="line">begin</span><br><span class="line">declare e_id int;</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int;</span><br><span class="line">declare e_salary int;</span><br><span class="line">declare has_data int default 1;</span><br><span class="line">declare emp_result cursor for select * from emp;</span><br><span class="line">declare exit handler for NOT FOUND set has_data &#x3D; 0;</span><br><span class="line">open emp_result;</span><br><span class="line">repeat</span><br><span class="line">fetch emp_result into e_id, e_name, e_age, e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;, e_id, &#39;, name&#x3D;&#39;, e_name, &#39;, age&#x3D;&#39;, e_age, &#39;,salary&#x3D;&#39;, e_salary);</span><br><span class="line">until has_data &#x3D; 0</span><br><span class="line">end repeat;</span><br><span class="line">close emp_result;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- log_bin_trust_function_creators需要这个参数开启的情况下，才能创建函数</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create function test_func(c_id int) returns int</span><br><span class="line">begin</span><br><span class="line">declare result int;</span><br><span class="line">select count(*) into result from city where country_id&#x3D;c_id;</span><br><span class="line">return result;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">-- 调用函数</span><br><span class="line">select test_func(1);</span><br><span class="line">-- 删除函数</span><br><span class="line">drop function test_func;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 返回指定个数的随机字符串</span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION rand_str(n INT) RETURNS VARCHAR(255) </span><br><span class="line">BEGIN</span><br><span class="line">DECLARE str VARCHAR(100) DEFAULT &#39;adcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">DECLARE result VARCHAR(255) DEFAULT &#39;&#39;;</span><br><span class="line">WHILE i &lt; n DO</span><br><span class="line"></span><br><span class="line">-- 随机返回一个字符串</span><br><span class="line">-- substr(str, floor(1 + rand() * 52), 1);</span><br><span class="line">SET result &#x3D; CONCAT(result, SUBSTR(str, FLOOR(1 + RAND() * 52), 1));</span><br><span class="line">SET i &#x3D; i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN result;</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5.触发器"></a>5.触发器</h2><ul>
<li>与表相关的数据库对象，在进行insert,update, delete事件之前或者之后，执行触发器中的动作；</li>
<li>触发器类型： insert, update,delete 只有这三类动作，自动执行触发器</li>
</ul>
<h4 id="5-1-创建触发器"><a href="#5-1-创建触发器" class="headerlink" title="5.1 创建触发器"></a>5.1 创建触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger trigger_name -- 触发器命名 trigger_xxx 或者tri_xxx</span><br><span class="line">before|after trigger_event</span><br><span class="line">on table_name -- 哪个表</span><br><span class="line">for each row -- 任何一条记录上的操作满足触发条件就会触发该触发器</span><br><span class="line">trigger_sTMT -- 激活触发器后被执行的语句</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER tri_emp_logs</span><br><span class="line">AFTER INSERT</span><br><span class="line">ON emp</span><br><span class="line">FOR EACH ROW</span><br><span class="line">INSERT INTO emp_logs VALUES(NULL, &#39;insert&#39;, NOW(), new.id, CONCAT(&#39;插入后(id:&#39;, now.id, &#39;, name:&#39;, now.name,&#39;, age:&#39;,now.age,&#39;,salary:&#39;, new.salary, &#39;)&#39;));</span><br><span class="line"></span><br><span class="line">-- 当对emp表执行insert操作后，自动将向emp_logs表中插入一条记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 当对emp表执行update操作后，自动向emp_logs表中插入一条记录</span><br><span class="line">CREATE TRIGGER tri_update_emp</span><br><span class="line">AFTER UPDATE</span><br><span class="line">ON emp</span><br><span class="line">FOR EACH ROW</span><br><span class="line">INSERT INTO emp_logs VALUES(NULL, &#39;update&#39;, NOW(), new.id, CONCAT(&#39;修改前(id:&#39;, old.id, &#39;, name:&#39;, old.name,&#39;, age:&#39;,old.age, &#39;,salary:&#39;, old.salary,&#39;),&#39;,&#39;修改后(id:&#39;,</span><br><span class="line">new.id,&#39;, name:&#39;, new.name, &#39;,age:&#39;, new.age, &#39;,salary:&#39;,new.salary,&#39;)&#39;));</span><br><span class="line"></span><br><span class="line">-- 当对emp表执行delete操作后，自动向emp_logs表中插入一条记录</span><br></pre></td></tr></table></figure>

<h4 id="5-2-删除触发器"><a href="#5-2-删除触发器" class="headerlink" title="5.2 删除触发器"></a>5.2 删除触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger trigger_name;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-查看触发器"><a href="#5-3-查看触发器" class="headerlink" title="5.3 查看触发器"></a>5.3 查看触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure>

<h2 id="6-引擎"><a href="#6-引擎" class="headerlink" title="6. 引擎"></a>6. 引擎</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看支持的引擎</span><br><span class="line">show engines;</span><br><span class="line">-- 默认情况下，使用innodb</span><br><span class="line">show variables like &#39;%storage_engine%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-Innodb引擎的特性：（针对表而言的，也是表引擎）"><a href="#6-1-Innodb引擎的特性：（针对表而言的，也是表引擎）" class="headerlink" title="6.1 Innodb引擎的特性：（针对表而言的，也是表引擎）"></a>6.1 Innodb引擎的特性：（针对表而言的，也是表引擎）</h4><ul>
<li>支持事务</li>
<li>支持行级锁</li>
<li>支持外键</li>
</ul>
<h4 id="6-2-优化SQL步骤"><a href="#6-2-优化SQL步骤" class="headerlink" title="6.2 优化SQL步骤"></a>6.2 优化SQL步骤</h4><h5 id="6-2-1-查看sql执行频率"><a href="#6-2-1-查看sql执行频率" class="headerlink" title="6.2.1 查看sql执行频率"></a>6.2.1 查看sql执行频率</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看全局各个操作的执行次数</span><br><span class="line">show global status like &#39;Com_______&#39;;</span><br><span class="line">-- 比如</span><br><span class="line">-- Com_insert: 执行insert操作的次数，批量插入，只累加一次；</span><br><span class="line">-- 查看针对innodb操作的行数</span><br><span class="line">show global status like &#39;Innodb_rows_%&#39;;</span><br><span class="line">-- Innodb_rows_read :select查询返回的行数</span><br></pre></td></tr></table></figure>

<h5 id="6-2-2-定位低效的sql语句方式"><a href="#6-2-2-定位低效的sql语句方式" class="headerlink" title="6.2.2 定位低效的sql语句方式"></a>6.2.2 定位低效的sql语句方式</h5><ul>
<li>第一种通过慢查询日志</li>
<li>第二种通过show processlist命令进行操作，可以实时查看sql的执行情况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+-----------------+-----------+------+---------+-------+------------------------+------------------+</span><br><span class="line">| Id | User            | Host      | db   | Command | Time  | State                  | Info             |</span><br><span class="line">+----+-----------------+-----------+------+---------+-------+------------------------+------------------+</span><br><span class="line">|  5 | event_scheduler | localhost | NULL | Daemon  | 48810 | Waiting on empty queue | NULL             |</span><br><span class="line">| 46 | root            | localhost | NULL | Query   |     0 | starting               | show processlist |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- id: 用户登录mysql，系统分配的connection_id, 可以通过connection_id()查看</span><br><span class="line">-- user: 显示当前用户</span><br><span class="line">-- host: 显示从哪个ip发出的</span><br><span class="line">-- db: 显示这个进程目前连接的是哪个数据库</span><br><span class="line">-- command: 显示当前执行的命令</span><br><span class="line">-- time: 显示状态持续的时间，单位为s</span><br><span class="line">-- state: 显示当前连接的sql语句的状态，描述的是语句执行中的某一个状态，一个sql语句，以查询为例，可能需要经过copying to tmp table, sorting result , sending data 才可以完成</span><br><span class="line">-- info： 显示执行的sql语句；</span><br></pre></td></tr></table></figure>

<h5 id="6-2-3-explain-分析执行计划"><a href="#6-2-3-explain-分析执行计划" class="headerlink" title="6.2.3  explain 分析执行计划"></a>6.2.3  explain 分析执行计划</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain sql语句 -- 分析sql语句的执行计划</span><br></pre></td></tr></table></figure>



<h2 id="7-mysql-面试题："><a href="#7-mysql-面试题：" class="headerlink" title="7. mysql 面试题："></a>7. mysql 面试题：</h2><ul>
<li>数据库的索引结构是什么，b-tree 与b+tree有什么区别</li>
<li>联合索引是什么，如何才能命中联合索引</li>
<li>数据库的隔离级别，每个级别都有什么问题？</li>
<li>可重复读是怎么实现的？</li>
<li>分库分表， 基于什么进行拆分，拆分后出现了什么问题，怎么解决的？</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>切片用法</title>
    <url>/2020/10/12/%E5%88%87%E7%89%87%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1 id="切片用法"><a href="#切片用法" class="headerlink" title=" 切片用法"></a><center> 切片用法</center></h1><a id="more"></a>

<h2 id="1-切片使用"><a href="#1-切片使用" class="headerlink" title="1.切片使用"></a>1.切片使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定位置插入</span></span><br><span class="line">alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">alist[:<span class="number">0</span>] = [<span class="number">0</span>]  <span class="comment">#在开头位置插入，注意这种方式必须使用可迭代对象对其赋值 [0, 1, 2, 3]</span></span><br><span class="line">alist[len(alist):] = [<span class="string">'hello'</span>] <span class="comment"># 在末尾位置插入 [0, 1, 2, 3, 'hello']</span></span><br><span class="line">alist[len(alist) // <span class="number">2</span>: len(alist) // <span class="number">2</span>] = [<span class="string">'test'</span>] <span class="comment"># 在中间位置插入 [0, 1, 'test', 2, 3, 'hello']</span></span><br><span class="line"><span class="comment"># 修改元素</span></span><br><span class="line">alist[::<span class="number">2</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="comment">#每隔一个元素修改一个，等号两边的元素个数必须相等</span></span><br><span class="line"><span class="comment"># 删除元素</span></span><br><span class="line">alist[:<span class="number">3</span>] = [] <span class="comment"># 前三个元素被删除</span></span><br></pre></td></tr></table></figure>

<h2 id="2-实现可切片对象的协议"><a href="#2-实现可切片对象的协议" class="headerlink" title="2.实现可切片对象的协议"></a>2.实现可切片对象的协议</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc  <span class="comment">#抽象对象，这里列出的的就是要实现什么对象需要的方法</span></span><br><span class="line"><span class="comment"># 对于自己要实现的不可变序列类型要实现的方法有？</span></span><br><span class="line"><span class="comment"># 查看abc.Sequence中的所有抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySequence</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, group, stuff)</span>:</span></span><br><span class="line">        self.group = group</span><br><span class="line">        self.stuff = stuff</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span>  <span class="comment">#可切片实现这个方法就行</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="3-使用-bisect-这种二分算法来管理排序的列表"><a href="#3-使用-bisect-这种二分算法来管理排序的列表" class="headerlink" title="3.使用 bisect 这种二分算法来管理排序的列表"></a>3.使用 <code>bisect</code> 这种二分算法来管理排序的列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="comment"># 排序很耗时，得到一个有序序列后，最好能保持它的有序，bisect.insort就是为了这个存在，插入一个元素之后，还能保持升序</span></span><br><span class="line">alist = []</span><br><span class="line">bisect.insort(alist, <span class="number">1</span>)</span><br><span class="line">bisect.insort(alist, <span class="number">5</span>)</span><br><span class="line">bisect.insort(alist, <span class="number">3</span>)</span><br><span class="line">bisect.insort(alist, <span class="number">2</span>)</span><br><span class="line">print(alist)  <span class="comment">#[1, 2, 3, 5]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-对于列表，还有哪些可选的？"><a href="#4-对于列表，还有哪些可选的？" class="headerlink" title="4. 对于列表，还有哪些可选的？"></a>4. 对于列表，还有哪些可选的？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line"><span class="comment"># 当要存放1000万个浮点数的话，数组效率要高的多，因为数组在背后存的并不是float对象，而是数字的机器翻译，也就是字节；</span></span><br><span class="line"><span class="comment"># 比如要频繁的序列进行先进先出的操作，那么双端队列queue的速度会更快</span></span><br><span class="line"><span class="comment"># 如果包含操作(检查一个元素是否出现在一个集合中)的频率很高，使用集合(set)会更合适，set专为检查元素是否存在做过优化；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span> ** <span class="number">7</span>)))</span><br><span class="line">print(floats[<span class="number">-1</span>])</span><br><span class="line">fp = open(<span class="string">'floats.bin'</span>, <span class="string">'wb'</span>)</span><br><span class="line">floats.tofile(fp)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line">floats2 = array(<span class="string">'d'</span>)</span><br><span class="line">fp = open(<span class="string">'floats.bin'</span>, <span class="string">'rb'</span>)</span><br><span class="line">floats2.fromfile(fp, <span class="number">10</span> ** <span class="number">7</span>)</span><br><span class="line">print(floats2[<span class="number">-1</span>])</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line">print(floats == floats2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># deque类(双向队列)是一个线程安全，可以快速从两端添加或者删除元素的数据类型，可以用来存放"最近用到的几个元素"；如果有队列满了，反向删除过期的元素，然后在尾端添加新的元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq = deque(range(<span class="number">10</span>), maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.rotate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.rotate(<span class="number">-1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.appendleft(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.extend([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.extendleft([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># import queue ：提供了同步(线程安全)类 Queue, LifoQueue, PriorityQueue,不同线程可以利用这些数据类型交换信息，当这些队列满的时候不会扔掉旧的元素来腾出地方，而是被锁住，直到另外的线程移除某个元素腾出位置，适合控制活跃线程的数量；</span></span><br><span class="line"><span class="comment"># import heapq :用来把可变序列当做堆或者优先队列来使用；</span></span><br></pre></td></tr></table></figure>

<h2 id="5-使用列表推导式，字典推导，生成器表达式"><a href="#5-使用列表推导式，字典推导，生成器表达式" class="headerlink" title="5.使用列表推导式，字典推导，生成器表达式"></a>5.使用列表推导式，字典推导，生成器表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列表推导式就是用来生成列表的， [],(), &#123;&#125; 会忽略里面的续行符 \</span><br><span class="line">card &#x3D; [Card(rank, suit) for suit in suits </span><br><span class="line">						 for rank in ranks]</span><br><span class="line"># 生成器表达式是生成器对象,逐个产出元素，节省内存，如果作为函数的唯一参数，可以省略生成器表达式外面的()</span><br><span class="line">tuple(ord(symbol) for symbol in symbols)</span><br><span class="line"># 字典推导式，从任何以键值对作为元素的可迭代对象中构建字典</span><br><span class="line">country_code &#x3D; &#123;country: code for code, country in DIAL_CODES&#125;</span><br><span class="line"></span><br><span class="line"># 集合推导式</span><br><span class="line">&#123;chr(i) for i in range(32, 256) if &#39;SIGN&#39; in name(chr(i), &#39;&#39;)&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-列表中的sort-和内置sorted方法"><a href="#6-列表中的sort-和内置sorted方法" class="headerlink" title="6. 列表中的sort 和内置sorted方法"></a>6. 列表中的sort 和内置sorted方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list.sort会就地对列表排序，没有返回值</span></span><br><span class="line"><span class="comment"># 内置的sorted 会新建一个列表作为返回值</span></span><br><span class="line"><span class="comment"># 都会接收两个关键字参数 key, reverse</span></span><br><span class="line"><span class="comment"># reverse 默认值False,从小到大排序</span></span><br><span class="line"><span class="comment"># key:默认值是 恒等函数，就是默认用元素自己的值来排序，可以为它赋值：只有一个参数的函数，例如key=len,key=str.lower</span></span><br></pre></td></tr></table></figure>

<h2 id="7-标准库中的其他字典类"><a href="#7-标准库中的其他字典类" class="headerlink" title="7. 标准库中的其他字典类"></a>7. 标准库中的其他字典类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当对字典执行dict['key']操作，key不存在，提供默认值的dict</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">dd = defaultdict(str)  <span class="comment"># 参数是一个可调用对象或者None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#按照给字典添加键的顺序来排序的有序字典类，</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="comment"># 用来自定义字典类需要继承的字典类,不使用dict做继承，是因为dict有时候会在某些方法上走捷径，导致我们不得不在它的子类中重写这些方法，直接子类化内置类型(dict, list 或者str)通常会忽略用户覆盖的方法，因此自定义，需要继承UserDict,UserList,UserString</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> UserDict</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>redis 再学习</title>
    <url>/2020/10/12/redis%20%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="redis-再学习"><a href="#redis-再学习" class="headerlink" title=" redis 再学习 "></a><center> redis 再学习 </center></h1><a id="more"></a>

<h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1. 基本命令"></a>1. 基本命令</h2><ul>
<li><p>通过命令行方式查看和设置配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info server</span><br><span class="line"><span class="meta">#</span><span class="bash"> Server</span></span><br><span class="line">redis_version:4.0.14</span><br><span class="line">redis_git_sha1:00000000</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">redis_build_id:a3801984392ceb27</span><br><span class="line">redis_mode:standalone</span><br><span class="line">os:Linux 4.4.0-185-generic x86_64</span><br><span class="line">arch_bits:64</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line">gcc_version:5.4.0</span><br><span class="line">process_id:1082</span><br><span class="line">run_id:dfb262a4f02219cbc26efe68852bf8d1424cb1ad</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:-9640</span><br><span class="line">uptime_in_days:0</span><br><span class="line">hz:10</span><br><span class="line">lru_clock:1474142</span><br><span class="line">executable:/usr/local/bin/redis-server</span><br><span class="line">config_file:/etc/redis/6379.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) "requirepass"</span><br><span class="line">2) "studyredis"</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; config set requirepass test</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass </span><br><span class="line">1) "requirepass"</span><br><span class="line">2) "test"</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以通过测试了解下redis在本机上的性能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -t get,spop -q -p 6379</span><br><span class="line">GET: 77639.75 requests per second</span><br><span class="line">SPOP: 82304.52 requests per second</span><br></pre></td></tr></table></figure>
</li>
<li><p>exists key :是否存在指定的key, 存在返回1， 不存在返回0</p>
</li>
<li><p>del key: 删除key，当key存在，删除返回1；当key不存在，删除返回0</p>
</li>
<li><p>ttl key: 不存在返回-2， 存在但没有过期时间，返回-1，否则返回剩余时间的秒数</p>
</li>
<li><p>persist key: 取消过期时间</p>
</li>
<li><p>select 1: 选择1号数据库</p>
</li>
<li><p>move key dbindex: 移动某个key到指定的数据库</p>
</li>
<li><p>randomkey: 随机返回一个key</p>
</li>
<li><p>rename key key2: 将key重命名为key2</p>
</li>
<li><p>echo message: 打印message</p>
</li>
<li><p>dbsize: 查看当前数据库的key数量 –&gt;O(1)</p>
</li>
<li><p>keys:查看所有key —&gt;O(n) 不建议在线上大量key使用</p>
</li>
<li><p>info server: 查看数据库信息</p>
</li>
<li><p>flushdb: 清空当前数据库</p>
</li>
<li><p>flushall:清空所有数据库</p>
</li>
<li><p>type key:返回key存储值得数据类型 </p>
</li>
</ul>
<h2 id="2-redis-配置"><a href="#2-redis-配置" class="headerlink" title="2. redis 配置"></a>2. redis 配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes # 默认是no, 设置为yes,redis-server 将以守护进程在后台运行</span><br><span class="line">pidfile &quot;&#x2F;var&#x2F;run&#x2F;redis&#x2F;redis_6379.pid&quot; # 将redis-server 进程id写入到这个文件中</span><br><span class="line">port 6379 #默认端口</span><br><span class="line">tcp-backlog 511</span><br><span class="line">timeout 0 # 客户端闲置多少s后关闭连接，0代表关闭此功能</span><br><span class="line">tcp-keepalive 0</span><br><span class="line">loglevel notice # 日志级别</span><br><span class="line">logfile &quot;&#x2F;var&#x2F;log&#x2F;redis&#x2F;redis-server.log&quot; # 记录日志的文件位置</span><br><span class="line">databases 16 # 默认有16个数据库，从0到15</span><br><span class="line">save 900 1 # 指定在多少时间内，有多少次更新操作，将数据同步到磁盘文件中，900s内有1次更新</span><br><span class="line">save 300 10 #300s内有10个更新</span><br><span class="line">save 60 10000# 60s内有10000个更新</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes # 存到数据库文件中，是否压缩，默认使用LZF压缩算法，如果为了节约cpu时间，可以关闭此选项</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename &quot;dump.rdb&quot; # 指定数据库文件名</span><br><span class="line">dir &quot;&#x2F;var&#x2F;lib&#x2F;redis&quot;  # redis的工作目录，用于存放 dump.rdb</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">slave-read-only yes</span><br><span class="line">repl-diskless-sync no</span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line">slave-priority 100</span><br><span class="line">requirepass &quot;test&quot; # 设置密码</span><br><span class="line">appendonly no # 指定是否在每次更新操作后进行日志记录</span><br><span class="line">appendfilename &quot;appendonly.aof&quot; #指定更新日志文件名</span><br><span class="line">appendfsync everysec # 指定更新日志条件</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">aof-load-truncated yes</span><br><span class="line">lua-time-limit 5000</span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line">notify-keyspace-events &quot;&quot;</span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line">set-max-intset-entries 512</span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line">activerehashing yes</span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit slave 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line">hz 10</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<h2 id="3-redis内存维护策略"><a href="#3-redis内存维护策略" class="headerlink" title="3. redis内存维护策略"></a>3. redis内存维护策略</h2><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><h3 id="4-1-String命令"><a href="#4-1-String命令" class="headerlink" title="4.1 String命令"></a>4.1 String命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key_name value</span><br><span class="line">setnx key_name value</span><br><span class="line">setex key_name expire value: 设置key_name的值为value,expire值为过期秒数</span><br><span class="line">setrange key_name offset value: 对于key_name 的值，从下标是offset开始替换为value</span><br><span class="line"></span><br><span class="line">get key_name</span><br><span class="line">getrange key start end:提取出指定范围的值</span><br><span class="line">getbit key offset:  这个暂时不理解</span><br><span class="line">getset key_name value:</span><br><span class="line">strlen key:</span><br><span class="line"></span><br><span class="line">mget key1 key2: ---&gt;  O(n)</span><br><span class="line">mset key1 key2 value1 value2  --&gt;O(n)</span><br><span class="line"></span><br><span class="line">针对数字字符串操作，否则报错</span><br><span class="line">incr key1: 自增</span><br><span class="line">incrby key1 增量值： </span><br><span class="line">decr key1: 自减</span><br><span class="line">decrby key1 减量值</span><br><span class="line"></span><br><span class="line">append key_name value：</span><br></pre></td></tr></table></figure>

<ul>
<li><p>应用场景：</p>
<ul>
<li><p>string通常用于保存单个字符串或者json字符串数据</p>
</li>
<li><p>因为string是二进制安全的，完全可以把图片文件的内容作为字符串来存储</p>
</li>
<li><p>计数器（incr等指令本身具有原子操作特性，因为完全可以利用redis的incr,incrby, decr, decrby等指令实现原子计数效果）</p>
<p>例如：某种场景下有3个客户端同时读取了num的值（假定值为2），然后对其同时进行了加1操作，那么num的值最后一定是5</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-Hash类型"><a href="#4-2-Hash类型" class="headerlink" title="4.2 Hash类型"></a>4.2 Hash类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加</span><br><span class="line">hset key field value</span><br><span class="line">hmset key field1 value1 field2 value2</span><br><span class="line">获取</span><br><span class="line">hget key field</span><br><span class="line">hmget key field1 field2</span><br><span class="line">hgetall key</span><br><span class="line">查看：</span><br><span class="line">hkeys key: key中存放的所有字段</span><br><span class="line">hlen key: 字段的数量</span><br><span class="line">删除</span><br><span class="line">hdel key field [field]:删除key中一个或者多个字段</span><br><span class="line"></span><br><span class="line">hsetnx key field value: key中不存在 字段field时才进行设置字段和值</span><br><span class="line">hexists key field: 检查key中字段是否存在</span><br><span class="line"></span><br><span class="line">hincrby key field increment:为整形字段的值加值</span><br><span class="line">hincrbyfloat key field incrment: 为浮点值加上增量</span><br></pre></td></tr></table></figure>

<ul>
<li><p>应用场景：</p>
<ul>
<li>常用于存储一个对象</li>
</ul>
</li>
<li><p>为什么不用string存储一个对象？</p>
<ul>
<li><p>hash是最接近关系数据结构的数据类型，可以将一条数据库记录转化成hashmap存放到redis中</p>
</li>
<li><p>用户id为查找的key,存储的值包含姓名，年龄，生日等等，如果用string结构来存储，主要有两种方式</p>
</li>
<li><p>第一种：将用户id作为查找key,把其他信息封装成一个对象序列化的方式存储，缺点是增加了序列化和反序列化的开销，</p>
<p>并且需要修改一项信息时，需要将整个对象取回，修改操作时需要对并发进行保护</p>
</li>
<li><p>第二种：用户对象信息有多少成员就创建多少个key/value,使用 用户id+对应的属性名作为唯一标识来取得对应属性的值，</p>
<p>虽然省去了序列化和反序列化的开销和并发问题，但是用户id重复存储，如果存放大量这样的数据，内存浪费；而hash存放这种对象会占用很少的磁盘空间；</p>
</li>
</ul>
</li>
</ul>
<h3 id="4-3-List类型"><a href="#4-3-List类型" class="headerlink" title="4.3 List类型"></a>4.3 List类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加元素</span><br><span class="line">lpush key value1 value2 value3 [value]:</span><br><span class="line">rpush key value1 value2 value3 :</span><br><span class="line">lpushx key value: key不存在，返回0; 存在的话，在左侧插入</span><br><span class="line">rpushx key value: key 不存在，返回0；存在，在右侧插入</span><br><span class="line"></span><br><span class="line">查看元素</span><br><span class="line">lrange key start end: 返回指定范围内置</span><br><span class="line">llen key: 返回列表元素</span><br><span class="line">lindex key index: 根据下标取值</span><br><span class="line"></span><br><span class="line">删除：</span><br><span class="line">lpop key</span><br><span class="line">rpop key</span><br><span class="line">blpop key1 [key2] timeout: 左删除一个元素，如果列表没有元素将阻塞直到有元素弹出或者超时；</span><br><span class="line">rlpop key1 [key2] timeout: 右删除一个元素,</span><br><span class="line">ltrim key start end: 保留start到end之间的元素，其他元素删除；</span><br><span class="line">修改：</span><br><span class="line">lset key index value: 根据下标修改一个元素值</span><br><span class="line">linsert key before|after world value: 在指定的列表元素的前面或者后面插入一个值</span><br><span class="line"></span><br><span class="line">rpoplpush source destination: 从source中移除最后一个元素，然后添加到destination的头部</span><br><span class="line">brpoplpush source destination timeout: 从source 中移除最后一个元素，如果没有，将阻塞等待timeout或者直到有元素弹出</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：<ul>
<li>对数据量大的集合进行操作</li>
<li>任务队列</li>
</ul>
</li>
</ul>
<h3 id="4-4-set类型"><a href="#4-4-set类型" class="headerlink" title="4.4 set类型"></a>4.4 set类型</h3><ul>
<li>set是string类型的无序集合，集合成员是唯一的，通过哈希表来实现的，集合中最大的成员数是 $2^{32}$ -1（40多亿个成员）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加成员：</span><br><span class="line">sadd key memeber1 [member2]</span><br><span class="line"></span><br><span class="line">查看：</span><br><span class="line">scard key:获取成员数量</span><br><span class="line">smembers key: 返回集合所有成员</span><br><span class="line">sismember key member:判断member是否是集合key的成员；</span><br><span class="line">srandmember key [count]:返回集合中一个或者多个随机成员；</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">srem key member1 [member2]：移除集合中一个或者多个成员</span><br><span class="line">spop key [count]: 移除并返回集合中的一个随机元素</span><br><span class="line">smove source destination member :将member元素从source 集合移动到destination集合</span><br><span class="line"></span><br><span class="line">差集：</span><br><span class="line">sdiff key1 key2 :返回只属于key1中的元素</span><br><span class="line">sdiffstore destination key1 key2:</span><br><span class="line">交集：</span><br><span class="line">sinter key1 key2:返回同时属于key1和key2的元素</span><br><span class="line">sinterstore destination key1 key2:将结果放到destination中</span><br><span class="line">并集：</span><br><span class="line">sunion key1 key2:返回s1和s2集合中所有元素</span><br><span class="line">sunionstore destination key1 key2:</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：<ul>
<li>利用集合交集，并集，差集操作，实现共同关注，共同爱好，二度好友功能；</li>
<li>利用唯一性，统计访问网站的所有独立ip,存取当天的活跃用户列表；</li>
</ul>
</li>
</ul>
<h3 id="4-5-Zset（有序集合）"><a href="#4-5-Zset（有序集合）" class="headerlink" title="4.5 Zset（有序集合）"></a>4.5 Zset（有序集合）</h3><ul>
<li>Redis有序集合和集合一样也是String类型元素的集合，且不允许有重复成员，不同的是每个元素会关联一个double类型的分数，redis通过分数为集合中的成员进行从小到大的排序，成员唯一，但是分数可以相同；集合中成员数也是$2^{32}$ - 1(40多亿个成员)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">增加：</span><br><span class="line">zadd key score1 member1 [score2 member2]: 向有序集合添加一个或者多个成员，或者更新已存在成员的分数</span><br><span class="line"></span><br><span class="line">查看：</span><br><span class="line">zcard key: 成员数量</span><br><span class="line">zcount key min max:计算有序集合指定区间分数的成员数量</span><br><span class="line">zrank key member:返回有序集合中指定成员的索引；</span><br><span class="line">zrange key start stop [withscores]: 取出索引之间的元素，带参数withscores将分数也一并输出</span><br><span class="line">zrangebyscore key min max [withscores] [limit offset count]:根据分数区间进行取值，如果设置了limit，那么会再将结果根据</span><br><span class="line">offset(从哪个下标开始) 取出count个数量的值;一旦使用了limit参数，后面的两个参数必须设置；</span><br><span class="line">zrevrange key start stop [withscores]:倒序输出(通过下标设置区间)</span><br><span class="line">zrevrangebyscore key max min [withscores] [limit offset count]:倒序输出(根据分数从高到低的区间)</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">zrem key member [member]</span><br><span class="line">zremrangebyrank by start stop:移除指定索引区间的元素</span><br><span class="line">zremrangebyscore by min max: 移除给定分数区间的元素</span><br><span class="line">修改</span><br><span class="line">zincrby by increment member: 增加member成员的分数，返回修改后的分数</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：<ul>
<li>排行榜</li>
<li>文章发布时间作为分数值，自带排序功能</li>
<li>设置任务分数值高低作为任务权重的依据，按照权重大小执行任务；</li>
</ul>
</li>
</ul>
<h3 id="4-6-HyperLogLog-类型"><a href="#4-6-HyperLogLog-类型" class="headerlink" title="4.6 HyperLogLog 类型"></a>4.6 HyperLogLog 类型</h3><ul>
<li>HyperLogLog是一种算法，并非redis独有，目的是做基数统计(不同数的个数),只记录数量，不记录具体的内容</li>
<li>耗费空间极小，支持输入非常大体积的数据量(计算接近 $2^{64}$个不同元素的基数，这和元素越多耗费内存就越多的集合形成鲜明的对比)</li>
<li>redis中每个HyperLogLog key占用了12k的内存用于记录基数</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">添加：</span><br><span class="line">pfadd key element [element]</span><br><span class="line">计算基数</span><br><span class="line">pfcount key [key]:返回给定HyperLogLog的基数估算值</span><br><span class="line">pfmerge destkey sourcekey [sourekey]:将多个HyperLogLog合并为一个 HyperLogLOg</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：（只用来统计基数数量，不知道具体内容是什么）<ul>
<li>真实文章阅读量</li>
<li>统计注册ip</li>
<li>统计每日访问Ip数</li>
<li>统计页面实时UV数</li>
<li>统计在线用户数</li>
</ul>
</li>
</ul>
<h2 id="5-redis-发布订阅"><a href="#5-redis-发布订阅" class="headerlink" title="5.redis 发布订阅"></a>5.redis 发布订阅</h2><ul>
<li>redis发布、订阅是一种消息通信模式，发布者向频道发布消息，订阅者通过订阅频道接收消息；</li>
<li>redis客户端可以订阅任意数量的频道</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">subscribe channel [channel]:</span><br><span class="line">psubscribe pattern [pattern]:订阅一个或者多个符合给定模式的频道</span><br><span class="line"></span><br><span class="line">publish channel message: 发布消息</span><br><span class="line"></span><br><span class="line">退订：</span><br><span class="line">unsubscribe channel </span><br><span class="line">punsubscribe [pattern]</span><br></pre></td></tr></table></figure>

<h2 id="6-redis-事务"><a href="#6-redis-事务" class="headerlink" title="6.redis 事务"></a>6.redis 事务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multi: 事务开启</span><br><span class="line">exec: 事务开始执行，按照命令顺序执行；</span><br><span class="line">discard: 事务取消</span><br><span class="line"></span><br><span class="line">命令执行过程中出错, 其他命令执行，出错的命令不执行</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set aaa hello</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get aaa</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr aaa</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) "hello"</span><br><span class="line">3) (error) ERR value is not an integer or out of range</span><br><span class="line">127.0.0.1:6379&gt; get aaa</span><br><span class="line">"hello"</span><br><span class="line"></span><br><span class="line">命令执行前出错，那么所有命令都不能被执行</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set bbb test</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get bbb</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; sadfasdf</span><br><span class="line">(error) ERR unknown command `sadfasdf`, with args beginning with: </span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get bbb</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">watch key [key] :监视key的变化，当在开始事务之后，有其他进程修改了key的话，那么事务不能成功执行</span><br><span class="line">127.0.0.1:6379&gt; watch aaa</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set aaa 30</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get aaa</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec   # 另一个客户端修改了aaa 值为40,这里没有执行成功；</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get aaa</span><br><span class="line">"40"</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：<ul>
<li>针对一组命令要么同时执行成功，要么执行失败；</li>
</ul>
</li>
</ul>
<h2 id="7-redis持久化"><a href="#7-redis持久化" class="headerlink" title="7. redis持久化"></a>7. redis持久化</h2><ul>
<li>redis持久化就是将内存中的数据写到磁盘中，防止服务宕机内存数据丢失</li>
<li>redis提供了两种持久化方式：RDB(默认) 和 AOF</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RDB: redis默认持久化机制，这种方式就是将内存中的数据以快照的方式写入到二进制文件中，默认的文件名为dump.rdb</span><br><span class="line">优点：保存数据极快，还原数据极快，适用于灾难备份</span><br><span class="line">缺点：小内存机器不适合使用</span><br><span class="line">快照条件：</span><br><span class="line">- 服务器正常关闭时， redis-cli shutdown</span><br><span class="line">- key 满足条件时，默认配置中</span><br><span class="line">	save 900 1 # 每900s(15分钟) 至少1个key发生变化，产生快照</span><br><span class="line">	save 300 10# 每300s(5分钟) 至少10个key发生变化，产生快照</span><br><span class="line">	save 60 10000   </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">AOF(append only file):应用不能丢失任何修改的话，可以采用aof持久化方式</span><br><span class="line">redis每接收到一个写命令都通过write函数追加到文件中(默认是appendonly.aof),当redis重启时会通过重新执行文件中保存的写命令来在在内存中重建整个数据库</span><br><span class="line">配置：</span><br><span class="line"></span><br><span class="line">appendonly yes: 开启aof持久化方式</span><br><span class="line">有三种方式(默认appendfsynceverysec)</span><br><span class="line">appendfsync always: 收到写命令就立即写入磁盘，最慢，保证完全的持久化</span><br><span class="line">appendfsynceverysec: 每秒写入磁盘一次，在性能和持久化方面折中</span><br><span class="line">appendfsync no:完全依赖os,性能最好，持久化没有保证</span><br><span class="line">缺点：</span><br><span class="line">aof文件会变得越来越大；</span><br></pre></td></tr></table></figure>

<h2 id="8-redis作为缓存，如何保证与数据库的一致性："><a href="#8-redis作为缓存，如何保证与数据库的一致性：" class="headerlink" title="8. redis作为缓存，如何保证与数据库的一致性："></a>8. redis作为缓存，如何保证与数据库的一致性：</h2><h3 id="8-1-实时同步："><a href="#8-1-实时同步：" class="headerlink" title="8.1 实时同步："></a>8.1 实时同步：</h3><p>对强一致要求比较高的，应采用实时同步方案：查询缓存没有时再从数据库查询，然后保存到缓存；更新缓存时，先更新数据库，再将缓存的设置过期</p>
<h3 id="8-2-异步队列"><a href="#8-2-异步队列" class="headerlink" title="8.2 异步队列"></a>8.2 异步队列</h3><p>对于并发程度较高的，可采用异步队列方式同步，可采用kafka等消息队列处理消息。</p>
<p>消息队列有哪些呢？</p>
<p>ActiveMQ, RabbitMQ, RocketMQ, Kafka等</p>
<h3 id="8-3-使用阿里的同步工具canal"><a href="#8-3-使用阿里的同步工具canal" class="headerlink" title="8.3 使用阿里的同步工具canal"></a>8.3 使用阿里的同步工具canal</h3><h3 id="8-4-采用UDF自定义函数方式"><a href="#8-4-采用UDF自定义函数方式" class="headerlink" title="8.4 采用UDF自定义函数方式"></a>8.4 采用UDF自定义函数方式</h3><p>面对mysql的API进行编程，利用触发器进行缓存同步</p>
<h3 id="8-5-缓存问题"><a href="#8-5-缓存问题" class="headerlink" title="8.5 缓存问题()"></a>8.5 缓存问题()</h3><ul>
<li><p>正常的缓存查询流程：数据查询先进行缓存查询，如果key不存在或者key过期那么就去查询数据库，并把查询的对象放进缓存，如果数据库查询对象为空，则不放进缓存直接返回</p>
</li>
<li><p>缓存穿透</p>
<ul>
<li>当到缓存中查询一个一定不存在的数据时，由于缓存不命中，就会去数据库中查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次都要到数据库中查询，造成缓存穿透（缓存没有起作用）</li>
<li>解决方案：数据库查询不到就缓存空结果。同时需要注意当对数据库执行插入操作时，清除缓存中的key,或者为空缓存设置过期时间。</li>
<li>发生穿透的原因可能有：对查询条件进行加密。</li>
</ul>
</li>
<li><p>缓存雪崩：当缓存集中过期的时候，那么当并发访问这些key的时候，就会直接到数据库访问，造成压力波峰。</p>
<ul>
<li>可以采用设置不同的缓存时间，让缓存过期时间尽量均匀发布</li>
</ul>
</li>
<li><p>缓存击穿：指的是一个key非常热，查询量非常大，当这个key到了过期时间瞬间，持续的大并发穿透缓存，直接请求数据库，对于商品而言，也就是所谓的”爆款”</p>
<ul>
<li>缓存不过期</li>
</ul>
</li>
</ul>
<h2 id="9-Redis-高级配置"><a href="#9-Redis-高级配置" class="headerlink" title="9. Redis 高级配置"></a>9. Redis 高级配置</h2><ul>
<li>在实际应用中，单台redis因为内存容量有限(单台redis最大使用内存不应该超过20G), 处理能力有限，无法高可用（一旦发生意外宕机，缓存功能失效）</li>
<li>使用主从复制的配置（主写从读）（多个从一个主）</li>
<li>哨兵模式（针对master意外宕机的解决方案）</li>
<li>集群模式是实际使用最多的模式 （Redis Cluster)<ul>
<li>从redis3.0 之后的版本开始支持redis-cluster，至少需要（3个master和3个slave)才能建立集群。     </li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Python - 属性访问顺序</title>
    <url>/2020/10/12/Python%20-%20%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="Python-属性访问顺序"><a href="#Python-属性访问顺序" class="headerlink" title=" Python - 属性访问顺序 "></a><center> Python - 属性访问顺序 </center></h1><a id="more"></a>

<p>属性访问优先级的顺序如下：</p>
<ul>
<li>类属性</li>
<li>数据描述符 (实现了<code>__get__</code> 和<code>__set__</code>方法的描述符)</li>
<li>实例属性</li>
<li>非数据描述符(仅仅实现了<code>__get__</code>方法的描述符)</li>
<li>默认为<code>__getattr__</code></li>
</ul>
<p>针对描述符，注意事项如下：</p>
<ul>
<li>描述符本身应定义成新式类，被代理的类也应该是新式类</li>
<li>把描述符定义为被代理类的类属性</li>
<li>访问属性优先级先后顺序如上</li>
</ul>
<p>实例如下：</p>
<h1 id="1-利用描述符实现类在初始化进行类型检查"><a href="#1-利用描述符实现类在初始化进行类型检查" class="headerlink" title="1.利用描述符实现类在初始化进行类型检查"></a>1.利用描述符实现类在初始化进行类型检查</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckInit</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, expected_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get--&gt;'</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set--&gt;'</span>, instance)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected %s'</span> % str(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'delete--&gt;'</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typecheck</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name, expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            setattr(cls, name, CheckInit(name, expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck(name=str, age=int, salary=float)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = Test(<span class="string">'hello'</span>, <span class="number">23</span>, <span class="number">23423.0</span>)</span><br></pre></td></tr></table></figure>

<p>在看flask源码时，也可以看到这样的用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value</span><br></pre></td></tr></table></figure>

<h2 id="2-利用描述符可以自己实现-property-classmethod-staticmethod"><a href="#2-利用描述符可以自己实现-property-classmethod-staticmethod" class="headerlink" title="2.利用描述符可以自己实现 @property , @classmethod, @staticmethod"></a>2.利用描述符可以自己实现 <code>@property</code> , <code>@classmethod</code>, <code>@staticmethod</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">		self.func = func</span><br><span class="line">        </span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        setattr(instance, self.func.__name__, value)  <span class="comment">#第一次调用执行__get__,第二次调用实例已经有属性了，不会调用这个方法</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @Myproperty   # 等价于 area = Myproperty(area)   相当于类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">    </span><br><span class="line">t1 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t1.area)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想每次都要调用__get__ 获取值可以使用数据描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty2</span><span class="params">(Myproperty)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        instance.__dict__[self.func.__name__] = value</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'this is a data-descriptor'</span>)</span><br><span class="line">        </span><br><span class="line">t2 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t2.area)</span><br></pre></td></tr></table></figure>

<h2 id="3-实现-classmethod"><a href="#3-实现-classmethod" class="headerlink" title="3. 实现@classmethod"></a>3. 实现<code>@classmethod</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclassmethod</span><span class="params">(object)</span>:</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(owner)</span>：</span></span><br><span class="line"><span class="function">        	<span class="title">print</span><span class="params">(<span class="string">'这里可以添加功能！！！'</span>)</span></span></span><br><span class="line"><span class="function">        	<span class="title">return</span> <span class="title">self</span>.<span class="title">func</span><span class="params">(owner)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">decorator</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"><span class="meta">    @Myclassmethod    # area = Myclassmethod(area)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">   </span><br><span class="line">Test.area()</span><br><span class="line">t = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">t.area()</span><br></pre></td></tr></table></figure>

<h2 id="4-实例访问属性的全部流程如下"><a href="#4-实例访问属性的全部流程如下" class="headerlink" title="4. 实例访问属性的全部流程如下"></a>4. 实例访问属性的全部流程如下</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果user是某个类的实例，那么user.age或者通过(getattr(user, 'age')来查找值得顺序如下</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.首先调用__getattribute__ 函数，内部将调用__get__()(如果有数据描述符的话)(注意不要自己实现这个方法，否则，将会出现意外的情况，******************必须自己去实现里面的赋值操作********************，即便自己使用super().__getattribute__也不行)</span></span><br><span class="line"><span class="string">2.如果age作为数据描述符的实例存在类或者基类的__dict__中，那么将调用数据描述符的__get__</span></span><br><span class="line"><span class="string">3.如果age出现在user的__dict__中，那么直接返回user.__dict__['age']</span></span><br><span class="line"><span class="string">4.如果age出现在类或者基类的__dict__中，同时age作为非数据描述符的实例存在于类或者基类中，那么调用__get__,否则直接返回类或者基类的__dict__['age']</span></span><br><span class="line"><span class="string">5.如果用户自己定义了__getattr__方法，将调用__getattr__方法，否则将抛出AttributeError</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p><strong>总之，类的实例访问属性的顺序如下：</strong></p>
<ul>
<li>数据描述符</li>
<li>实例自己的<code>__dict__</code></li>
<li>非数据描述符</li>
<li>类或者基类的<code>__dict__</code></li>
<li>如果自己定义了 <code>__getattr__</code> ,就调用它，否则，抛出<code>AttributeError</code>异常</li>
</ul>
<p><strong> 自己千万不要自己实现<code>__getattribute__</code>方法.</strong></p>
]]></content>
  </entry>
  <entry>
    <title>python 迭代器与生成器</title>
    <url>/2020/10/12/python%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8E%E7%94%9F%E6%88%90%E5%99%A8/</url>
    <content><![CDATA[<h1 id="python-迭代器与生成器"><a href="#python-迭代器与生成器" class="headerlink" title=" python 迭代器与生成器 "></a><center> python 迭代器与生成器 </center></h1><a id="more"></a>

<h2 id="1-python-可迭代对象"><a href="#1-python-可迭代对象" class="headerlink" title="1. python 可迭代对象"></a>1. python 可迭代对象</h2><ul>
<li>解释器需要迭代对象x时，自动调用iter(x)</li>
<li>内置的<code>iter</code> 函数有一下作用：<ul>
<li>检查对象是否实现了<code>__iter__</code> 方法，如果实现了就调用它，获取一个迭代器</li>
<li>如果没有实现<code>__iter__</code> 方法，但是实现了<code>__getitem__</code> 方法，Python 会创建一个迭代器，尝试按顺序(从索引0开始)获取元素</li>
<li>如果尝试失败，python抛出TypeError异常</li>
<li><strong> 因此所有的序列都可以迭代，因为都实现了<code>__getitem__</code></strong></li>
</ul>
</li>
<li>标准的迭代器接口协议:实现两个方法<ul>
<li><code>__next__</code> :返回下一个可用的元素，没有元素，抛出<code>StopIteration</code></li>
<li><code>__iter__</code>:返回self</li>
</ul>
</li>
</ul>
<h2 id="2-Python-生成器"><a href="#2-Python-生成器" class="headerlink" title="2. Python 生成器"></a>2. Python 生成器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Generator</span><br><span class="line"><span class="comment"># 生成器协议 需要实现的方法有：</span></span><br><span class="line"><span class="comment"># __iter__, __next__, send, throw, close</span></span><br></pre></td></tr></table></figure>



<h2 id="3-标准库中的生成器"><a href="#3-标准库中的生成器" class="headerlink" title="3.标准库中的生成器"></a>3.标准库中的生成器</h2><ul>
<li>过滤使用的生成器函数<ul>
<li>itertools.compress</li>
<li>itertools.dropwhile</li>
<li>filter</li>
<li>itertools.filterfalse</li>
<li>itertools.islice</li>
<li>itertools.takewhile</li>
</ul>
</li>
<li>用于映射的生成器函数<ul>
<li>itertools.accumulate</li>
<li>enumerate</li>
<li>map</li>
<li>itertools.starmap</li>
</ul>
</li>
<li>合并多个可迭代对象的生成器函数<ul>
<li>itertools.chain</li>
<li>itertools.chain.from_iterable</li>
<li>itertools.product</li>
<li>zip</li>
<li>itertools.zip_longest</li>
</ul>
</li>
<li>把输入的各个元素扩展成多个输出的生成器函数<ul>
<li>itertools.combinations</li>
<li>itertools.combinations_with_replacement</li>
<li>itertools.count()</li>
<li>itertools.cycle</li>
<li>itertools.permutations</li>
<li>itertools.repeat</li>
</ul>
</li>
<li>重新排列的生成器函数<ul>
<li>itertools.groupby</li>
<li>reversed</li>
<li>itertools.tee</li>
</ul>
</li>
<li>返回单个值得内置函数<ul>
<li>all</li>
<li>any</li>
<li>max</li>
<li>min</li>
<li>functools.reduce</li>
<li>sum</li>
</ul>
</li>
</ul>
<h2 id="4-使用上下文管理器-contextlib-contextmanager"><a href="#4-使用上下文管理器-contextlib-contextmanager" class="headerlink" title="4. 使用上下文管理器 @contextlib.contextmanager"></a>4. 使用上下文管理器 @contextlib.contextmanager</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookingGlass</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">import</span> sys</span><br><span class="line">		self.original_write = sys.stdout.write</span><br><span class="line">		sys.stdout.write = self.reverse_write</span><br><span class="line">		<span class="comment"># 绑定到as 语句后的变量上</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">'test return'</span></span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(self, text)</span>:</span></span><br><span class="line">		self.original_write(text[::<span class="number">-1</span>])</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">		<span class="keyword">import</span> sys</span><br><span class="line">		sys.stdout.write = self.original_write</span><br><span class="line">		<span class="keyword">if</span> exc_type <span class="keyword">is</span> ZeroDIvisionError:</span><br><span class="line">			print(<span class="string">'Please DO NOt divide by zero!'</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">True</span> <span class="comment"># 返回True或者为True的值，不会将异常向上冒泡</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span> <span class="comment"># 返回None,其他异常将向上冒泡</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用contextlib中的contextmanager装饰器将 生成器函数包装成具有上下文管理的类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">looking_glass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    original_write = sys.stdout.write</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(text)</span>:</span></span><br><span class="line">        original_write(text[::<span class="number">-1</span>])</span><br><span class="line">    sys.stdout_write = reverse_write</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'test return'</span>  <span class="comment">#上面的代码块就是__enter__中要执行的内容，yield的生成值将赋值给as后的的变量中，这中间产生的异常 也由yield进行冒泡；因此异常代码要写在yield这一行</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">    	yield 'test return'</span></span><br><span class="line"><span class="string">    except:</span></span><br><span class="line"><span class="string">    finally:</span></span><br><span class="line"><span class="string">    	# 这里的代码就是__exit__ 要执行的代码</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>

<h2 id="5-协程"><a href="#5-协程" class="headerlink" title="5. 协程"></a>5. 协程</h2><p><strong>协程就是 在一个线程中，实现用写同步代码的方式来异步执行任务的功能</strong></p>
]]></content>
  </entry>
  <entry>
    <title>nginx 在ubuntu18.04 上的安装和使用</title>
    <url>/2020/10/12/nginx%20%E5%9C%A8ubuntu18.04%20%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="nginx-在ubuntu18-04-上的安装和使用"><a href="#nginx-在ubuntu18-04-上的安装和使用" class="headerlink" title="nginx 在ubuntu18.04 上的安装和使用"></a><center>nginx 在ubuntu18.04 上的安装和使用</center></h1><a id="more"></a>

<h3 id="1-使用apt-包工具-安装"><a href="#1-使用apt-包工具-安装" class="headerlink" title="1. 使用apt 包工具 安装"></a>1. 使用apt 包工具 安装</h3><p><code>sudo apt install nginx</code>, 使用 <code>nginx -V</code> 查看详细信息，默认安装 nginx/1.14.0 (ubuntu)</p>
<h3 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2. 基本命令"></a>2. 基本命令</h3><p>   2.1 <code>sudo nginx -h</code>: 查看命令帮助信息</p>
<p>   2.2 <code>sudo nginx -t</code>:测试nginx语法是否正确，用在重新启动nginx之前；也可以用来查看配置文件路径；</p>
<p>   2.3 <code>sudo nginx -T</code>:测试nginx语法是否正确，如果正确，将nginx配置文件的内容输出到屏幕中；</p>
<p>   2.4 <code>sudo nginx -s choice</code>:choice参数有stop, quit, reopen, reload, 给master process 发送信号；</p>
<p>​          stop:立即停止nginx进程，或者通过 <code>sudo kill -TERM/-INT nginx</code>主进程号</p>
<p>​          quit:优雅停止nginx进程，不会接收新的请求，但会处理完已经接收的连接请求，处理完后再停止，也可以</p>
<p>​           通过 <code>sudo kill -QUIT nginx主进程号</code></p>
<p>​           reload:不停止服务的情况下重新加载配置文件；</p>
<p>​           reopen: 使nginx进程重新打开日志文件，实现日志分割效果；</p>
<p>​    2.5 <code>nginx -c 使用指定的配置文件</code></p>
<p>​    2.6 热部署操作流程</p>
<p> <strong>热部署命令不能对 使用<code>sudo apt install nginx</code> 安装的<code>nginx</code> 版本起作用</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">如何在不停止nginx的情况下，用一个新版本的nginx文件替换掉正在运行的nginx?</span><br><span class="line"></span><br><span class="line">- 1. 将原来的nginx可执行文件进行备份 </span><br><span class="line">- 2. 将新编译的或者新版本的nginx 覆盖现在运行的nginx可执行文件</span><br><span class="line">- 3. 通过执行 kill -USR2 原来nginx master进程id,将构造一个新的master进程及工作进程用来对新的请求进行处理；</span><br><span class="line">- 4. 通过执行 kill -WINCH 原来nginx master进程id，将原来的nginx worker进程全部关掉；</span><br><span class="line">如果对于新nginx出现问题，如何恢复到以前的nginx版本？</span><br><span class="line">- 5.先将备份的nginx可执行还原</span><br><span class="line">- 6.通过执行 kill -HUP 原来的nginx master进程id，恢复它的worker进程；</span><br><span class="line">- 7.通过执行 kill -WINCH 新的nginx master进程id，将新的nginx的worker进程全部关掉；</span><br></pre></td></tr></table></figure>





<h3 id="3-配置选项解释"><a href="#3-配置选项解释" class="headerlink" title="3. 配置选项解释"></a>3. 配置选项解释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes: 工作进程，一般与cpu个数相同</span><br><span class="line">error_log: 错误日志路径及级别</span><br><span class="line">pid: 存放nginx进程id</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections: 每个worker进程支持的最大连接数</span><br><span class="line">	use:内核模型，有select,poll, epoll</span><br><span class="line">&#125;</span><br><span class="line">公共配置</span><br><span class="line">http &#123;</span><br><span class="line">	日志配置</span><br><span class="line">	log_format main &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &#39;;</span><br><span class="line">	</span><br><span class="line">	remote_addr: 客户端地址</span><br><span class="line">	remote_user: 客户端请求nginx认证用户名</span><br><span class="line">	time_local: nginx时间</span><br><span class="line">	request: request请求行</span><br><span class="line">	status:response返回状态码</span><br><span class="line">	body_bytes_sent:服务端响应给客户端body信息大小</span><br><span class="line">	http_referer: http上一级页面</span><br><span class="line">	http_user_agent: 客户端访问设备</span><br><span class="line">	http_x_forwarded_for:http请求携带的http信息</span><br><span class="line">	</span><br><span class="line">	nginx限流配置</span><br><span class="line">	limit_req_zone:用来限制单位时间内的请求数，速率限制，对于同一个ip的请求数限制</span><br><span class="line">	limit_req_conn:限制同一时间连接数，并发限制</span><br><span class="line">	</span><br><span class="line">	限制单位时间内请求数</span><br><span class="line">	limit_req_zone $binary_remote_addr zone&#x3D;one:10m rate&#x3D;1r&#x2F;s;</span><br><span class="line">	limit_req_log_level: 默认error</span><br><span class="line">	limit_req_status：默认503</span><br><span class="line">	$binary_remote_addr:限制同一客户端ip,binary：为了缩小内存占有量</span><br><span class="line">	zone&#x3D;one:10m:生成一个10M大小，名字为one的内存区域，用来存储访问的频次信息</span><br><span class="line">	rate&#x3D;1r&#x2F;s:表示允许相同标识的客户端的访问频次，这里限制是每秒一次；</span><br><span class="line">	</span><br><span class="line">	限制单个ip同时发起的连接数，超出这个限制后，nginx将直接拒绝更多的连接</span><br><span class="line">	limit_conn_zone $binary_remote_addr zone&#x3D;conn_zone:10m;</span><br><span class="line">	limit_conn_log_level: 默认error</span><br><span class="line">	limit_conn_status: 默认503</span><br><span class="line">	</span><br><span class="line">	静态资源配置：</span><br><span class="line">	sendfile on:</span><br><span class="line">	tcp_nopush on: send_file 开启情况下，提高网络传输的输出效率</span><br><span class="line">	tcp_nodelay on:在keepalive连接下，提高网络传输的实时性；</span><br><span class="line">	静态资源文件压缩</span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_http_version 1.1;</span><br><span class="line">	gzip_comp_level 2;</span><br><span class="line">	gzip_types text&#x2F;plain;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	使用虚拟主机配置站点</span><br><span class="line">	server &#123;</span><br><span class="line">		listen:监听端口</span><br><span class="line">		server_name: 提供服务的域名或者主机名</span><br><span class="line">		控制网站访问路径</span><br><span class="line">		location &#x2F; &#123;</span><br><span class="line">			limit_req zone&#x3D;one burst&#x3D;5 nodelay;</span><br><span class="line">			zone&#x3D;one:使用哪个配置来做限制</span><br><span class="line">			burst&#x3D;5：设置一个大小为5的缓冲区当有大量请求过来时，超过了访问频次的请求可以先放到这个缓冲区</span><br><span class="line">			nodelay: 如果设置，超过访问频次而且缓冲区也满的时候就会直接返回503，如果没有设置，所有请求会等待排队；</span><br><span class="line">			limit_conn conn_zone 1;</span><br><span class="line">			1:限制一个客户端ip连接数为1，但是多个请求可以共用一个连接，所以对于请求控制不精准；</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		location &#x2F;status &#123;</span><br><span class="line">			状态监控模块</span><br><span class="line">			stub_status on;</span><br><span class="line">			返回结果分析</span><br><span class="line">			active connections: 当前活跃连接数</span><br><span class="line">			server:表示nginx从启动到现在共处理的连接数</span><br><span class="line">			accepts: 表示nginx从启动到现在共创建握手次数</span><br><span class="line">			请求丢失数&#x3D;(请求握手数-连接数)</span><br><span class="line">			handled requests: 处理的请求数</span><br><span class="line">			Reading: 读取到客户端的Header 信息数</span><br><span class="line">			Writing: nginx 返回给客户端的Header信息数</span><br><span class="line">			waiting: nginx开始keep-alive长连接情况下，既没有读也没有写，建立连接情况；</span><br><span class="line">			</span><br><span class="line">			下载站点模块：</span><br><span class="line">			autoindex:</span><br><span class="line">			参数：</span><br><span class="line">			autoindex_exact_size off; 文件的大概大小，单位是kb,mb,gb</span><br><span class="line">			autoindex_localtime on; 显示文件的服务器时间</span><br><span class="line">			charset utf-8, gbk;  默认中文乱码解决方案</span><br><span class="line">			</span><br><span class="line">			限制ip访问模块</span><br><span class="line">			allow ip;</span><br><span class="line">			拒绝访问：</span><br><span class="line">			deny ip;</span><br><span class="line">			使用basic auth方式访问</span><br><span class="line">			auth_basic &quot;test&quot;</span><br><span class="line">			auth_basic_user_file &#x2F;home&#x2F;cgn&#x2F;auth_conf;  #使用htpasswd 生成用户名和密码</span><br><span class="line">			# 可以使用第三方模块 权限控制 auth_request模块</span><br><span class="line">			原理：收到请求后，生成子请求，通过反向代理把请求传递给上游服务；若上游服务返回的响应是2xx，则继续执行，若是401或是403，则将响应返回给客户端；</span><br><span class="line">			企业中不使用此方法：</span><br><span class="line">			- 配合lua 或者 ldap进行访问；</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		静态资源跨域请求访问：</span><br><span class="line">		从域名flask.test.com:8001向 test.kuayu.com发起get请求</span><br><span class="line">		add_header Access-Contorl-Allow-Origin http:&#x2F;&#x2F;flask.test.com:8001;</span><br><span class="line">		add_header Access-Control-Allow-Methods GET, POST, PUT, DELETE, OPTIONS;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-nginx调优参数"><a href="#4-nginx调优参数" class="headerlink" title="4.nginx调优参数"></a>4.nginx调优参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl -a |grep &#39;net.core.netdev_max_backlog&#39;</span><br><span class="line">net.core.netdev_max_backlog:接收自网卡，未被内核协议栈处理的报文队列长度</span><br><span class="line">net.ipv4.tcp_max_syn_backlog: syn_revd 半连接队列长度</span><br><span class="line"> cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_synack_retries</span><br><span class="line"> (1s+2s+4s+8s+16s&#x3D;31s)</span><br><span class="line">net.ipv4.tcp_sysnack_retries: 发送syn+ack 失败尝试次数	</span><br><span class="line">ss -tnl</span><br><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;core&#x2F;somaxconn</span><br><span class="line"></span><br><span class="line">backlog:全连接队列，取决于min(backlog, somaxconn)其中，backlog由应用程序传入，somaxconn是一个os级别的系统参数，通过设置</span><br><span class="line">net.core.somaxconn来调整</span><br><span class="line"></span><br><span class="line">由三次握手引发的问题：</span><br><span class="line">如果syn队列满了，不开启syncookies(由参数net.ipv4.tcp_syncookies决定)时候，服务端会丢弃新来的syn包，而client在多次重发syn</span><br><span class="line">(由参数net.ipv4.tcp_syn_retries决定）包得不到响应而返回 connection timeout错误；但是server端开启了net.ipv4.tcp_syncookies&#x3D;1,那么syn半连接队列就没有逻辑上的最大值了；</span><br><span class="line"></span><br><span class="line">如果accept 队列满了，即全连接队列满了，即使client端继续向server端发送ack包，服务器端会通过 net.ipv4.tcp_abort_on_overflow 来决定如何响应，0 表示直接丢弃该ack,服务端过一段时间再次发送syn+ack给client(重新走握手的第二步),如果client超时等待比较短，就会返回read timeout; 1表示发送RST 通过client，client就会返回 connection reset by peer.</span><br><span class="line">cgn@ubuntu:~&#x2F;test_shell$ netstat -s|grep -i &#39;listen&#39;</span><br><span class="line">    309 times the listen queue of a socket overflowed</span><br><span class="line">    309 SYNs to LISTEN sockets dropped</span><br></pre></td></tr></table></figure>



<h2 id="5-nginx主配置优化"><a href="#5-nginx主配置优化" class="headerlink" title="5. nginx主配置优化"></a>5. nginx主配置优化</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">- 进程静态优先级</span><br><span class="line">top -u www-data 查看当前的nice值</span><br><span class="line">linux 中通过调整NICE值 ，即静态优先级 -20 --19；</span><br><span class="line">worker_property -20 :nice值越低，优先级越高，获取时间片的时间就越多；</span><br><span class="line"></span><br><span class="line">worker进程间的负载均衡：</span><br><span class="line">如何让多个worker进程间的响应处理达到比较合适的均衡，nginx引入了 accept_mutex参数，如果启动，那么多个worker进程顺序接收新连接，关闭的话，所有worker进程同时被唤醒，只有一个worker进程能接收处理该连接，这个参数在处理并发连接较多时性能特别差</span><br><span class="line">reuseport:必须Linux 3.9+ 以上内核层实现了worker进程间的负责均衡调度；</span><br><span class="line">用法： listen address[:port] [reuseport] </span><br><span class="line">使用reuseport 时，设置 accept_mutex off</span><br><span class="line"></span><br><span class="line">单个worker进程可以同时打开的连接数</span><br><span class="line">worker_connections</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile:表示所有worker进程允许同时打开的文件数</span><br></pre></td></tr></table></figure>

<h2 id="6-nginx-IO优化"><a href="#6-nginx-IO优化" class="headerlink" title="6. nginx IO优化"></a>6. nginx IO优化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优化读取速度</span><br><span class="line">sendfile on:对比传统I&#x2F;O方式，sendfile减少了上下文切换和数据拷贝次数，但是sendfile带来的问题是用户不能对数据进行修改(比如nginx通过对文件进行压缩实现网络高速传输就不能使用sendfile),因此此优化仅针对静态资源处理有效，同样对于反向代理也没用，因为sendfile中数据源句柄只能是文件句柄，而反向代理的双端都是socket句柄，不能使用sendfile;</span><br><span class="line"></span><br><span class="line">优化读写速度 direct I&#x2F;O:对于大文件来说，直接操作磁盘，不经过内核缓冲区；</span><br><span class="line">用户态直接I&#x2F;O只能适用于 不需要内核缓冲区处理的应用程序， 同时一般配合异步I&#x2F;O来使用；</span><br><span class="line"></span><br><span class="line">location &#x2F;video&#x2F; &#123;</span><br><span class="line">	sendfile on;</span><br><span class="line">	aio      on;</span><br><span class="line">	directio 8m;  &#x2F;&#x2F; 表示文件大小超过8M,启动aio与direct i&#x2F;o,此时sendfile会自动禁用，当文件小于8M时， aio与sendfile一起使用，此时directio失效；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-nginx-location使用"><a href="#7-nginx-location使用" class="headerlink" title="7. nginx location使用"></a>7. nginx location使用</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=: 精确匹配，如果匹配成功，停止向下搜索，并处理此请求；</span><br><span class="line">^~: 对uri 起始字符 做字符匹配，区分大小写，匹配长度优先，一旦匹配上，不再进行正则匹配；</span><br><span class="line">~： 对uri 做正则匹配，区分大小写；</span><br><span class="line">~*：对uri 做正则匹配，不区分大小写；</span><br><span class="line">不带符号：匹配起始于此字符串的所有 uri,区分大小写；</span><br><span class="line">字符匹配(无论是^~,还是无字符匹配，后面都必须以 `/`开头，否则将永远无法匹配上)</span><br><span class="line">匹配优先级规则：</span><br><span class="line">= &gt; ^~ &gt; ~ = ~* &gt; 不带符号</span><br><span class="line">@: 不匹配外部请求，用于内部跳转</span><br></pre></td></tr></table></figure>

<p>匹配条件：<strong>先从<code>=</code>开始，如果没有匹配到，那么就从所有的<code>^~</code> 开始查找，先找长度最长的，一直到最短的，如果还没有匹配到，接下来就从正则匹配的规则中查找<code>~</code> 或者<code>~*</code>  查找顺序是按照定义的先后来查找，如果还没有找到，那么就找不带符号的进行匹配</strong></p>
<p>注意：<strong>字符匹配根据匹配长度作为优先级，而正则匹配根据匹配规则出现的先后决定优先级，跟匹配长度，大小写是否敏感无关</strong></p>
<p>元字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">只能匹配一个字符：</span><br><span class="line">. :匹配除换行符之外的任意一个字符</span><br><span class="line">\w:匹配字母或者数字或者下划线或者汉字</span><br><span class="line">\s:匹配任意空白字符</span><br><span class="line">\d:匹配数字</span><br><span class="line">\b:匹配单词的开始或者结束</span><br><span class="line">^:匹配字符串开始</span><br><span class="line">$:匹配字符串结束</span><br></pre></td></tr></table></figure>

<p>重复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*:重复零次或者多次</span><br><span class="line">+：重复1次或者多次</span><br><span class="line">?:重复零次或者1次</span><br><span class="line">&#123;n&#125;:重复n次</span><br><span class="line">&#123;n,&#125;：重复n次或者更多次</span><br><span class="line">&#123;n,m&#125;：重复n次到m次之间的次数；</span><br></pre></td></tr></table></figure>

<h2 id="8-nginx-http跳转-https"><a href="#8-nginx-http跳转-https" class="headerlink" title="8. nginx http跳转 https"></a>8. nginx http跳转 https</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name www.test.com;</span><br><span class="line">	return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">	listen 443 ssl;</span><br><span class="line">	server_name www.test.com;</span><br><span class="line">	root /home/cgn/nginx_dir/test;</span><br><span class="line">	ssl_certificate /etc/nginx/ssl/server.crt;</span><br><span class="line">	ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line">	location / &#123;</span><br><span class="line">		index index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rewrite模块中的<code>return</code> 指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Nginx自定义：</span><br><span class="line">	444：关闭连接</span><br><span class="line">	</span><br><span class="line">http1.0:</span><br><span class="line">	301: 永久重定向</span><br><span class="line">	302：临时重定向，禁止被缓存</span><br><span class="line">	</span><br><span class="line">http1.1:</span><br><span class="line">	303:临时重定向，允许改变方法，禁止被缓存</span><br><span class="line">	307：临时重定向，不允许改变方法，禁止被缓存</span><br><span class="line">	308：永久重定向，不允许改变方法；</span><br><span class="line">	</span><br><span class="line">error_page 404 &#x2F;404.html;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rewrite指定：</span><br><span class="line"> - rewrite regex replacement [flag]; 将regex指定的url替换成replacement这个新的url</span><br><span class="line"> - 当replacement以http://或者https://或者$scheme开头，则直接返回302重定向</span><br><span class="line"> - 替换后的url根据flag指定的方式进行处理：</span><br><span class="line"> last: 用replacement这个url进行新的location匹配</span><br><span class="line"> break:停止当前脚本指令执行</span><br><span class="line"> redirect:返回302 重定向</span><br><span class="line"> permanent:返回301 重定向</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name www.test.com;</span><br><span class="line">        root /home/cgn/nginx_dir/html;</span><br><span class="line"></span><br><span class="line">        location /first &#123;</span><br><span class="line">                rewrite /first(.*) /second$1 last;</span><br><span class="line">                return 200 'first!!!\n';</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /second &#123;</span><br><span class="line">                 #rewrite /second(.*) /third$1 break;</span><br><span class="line">                rewrite /second(.*) /third$1;</span><br><span class="line">                return 200 'second!!!\n';</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /third &#123;</span><br><span class="line">                return 200 'third!!!\n';</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">分别使用 curl www.test.com:8080/first/3.txt </span><br><span class="line">		curl www.test.com:8080/second/3.txt</span><br><span class="line">		curl www.test.com:8080/third/3.txt</span><br></pre></td></tr></table></figure>

<h2 id="9-nginx-对请求的顺序处理（11个阶段）"><a href="#9-nginx-对请求的顺序处理（11个阶段）" class="headerlink" title="9. nginx 对请求的顺序处理（11个阶段）"></a>9. nginx 对请求的顺序处理（11个阶段）</h2><p>postread 阶段：</p>
<ul>
<li>realip —&gt; rewrite—&gt;find_config—&gt;rewrite</li>
</ul>
<p>rewrite模块：</p>
<ul>
<li>return指令</li>
<li>rewrite指令</li>
<li>if指令<ul>
<li>检查变量为空或者值是否为0</li>
<li>将变量与字符串做匹配  使用 <code>=</code> 或者<code>!=</code></li>
<li>将变量与正则做匹配   <ul>
<li>大小写敏感， <code>~</code> 或者<code>!~</code></li>
<li>大小写不敏感： <code>~*</code> 或者<code>!~*</code></li>
</ul>
</li>
<li>检查文件是否存在，使用<code>-f</code> 或者<code>!-f</code></li>
<li>检查目录是否存在， 使用<code>-d</code>或者<code>!-d</code></li>
<li>不知道文件类型，使用<code>-e</code> 或者<code>!-e</code>，用来判断文件，目录或者链接是否存在</li>
<li>检查是否为可执行文件，使用<code>-x</code>或者<code>!-x</code></li>
</ul>
</li>
</ul>
<p>然后是<code>find_config</code>,指令有<code>location</code> ,location 匹配规则，忽略参数；</p>
<p>preaccess阶段</p>
<ul>
<li><p>limit_req—-&gt;limit_conn </p>
<ul>
<li><p>然后就是下面的指令</p>
</li>
<li><pre><code class="shell">limit_req_zone:用来限制单位时间内的请求数，速率限制，对于同一个ip的请求数限制
limit_req_conn:限制同一时间连接数，并发限制
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">access阶段</span><br><span class="line"></span><br><span class="line">- access--&gt;auth_basic---&gt;auth_request</span><br><span class="line"></span><br><span class="line">  - access模块,进入这个 阶段之前，指令不生效；</span><br><span class="line"></span><br><span class="line">  - 指令&#96;allow&#96; 与&#96;deny&#96; </span><br><span class="line"></span><br><span class="line">  - 然后是auth_basic模块，指令通过 </span><br><span class="line"></span><br><span class="line">    &#96;&#96;&#96;shell</span><br><span class="line">    auth_basic &quot;test&quot;</span><br><span class="line">    auth_basic_user_file &#x2F;home&#x2F;cgn&#x2F;auth_conf;  #使用htpasswd 生成用户名和码</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>接下来使用auth_request模块：默认没有编译进nginx(–with-http_auth_request_module)</p>
</li>
</ul>
</li>
<li><p>access阶段中的<code>satisfy</code>指令会改变这个阶段的执行顺序</p>
<ul>
<li>satisfy 默认值all, 必须所有模块(access,auth_basic,auth_request,如果设置的话) 都通过才能继续下面的执行</li>
<li>satisfy设为any,表示只要有一个模块（access,auth_basic,auth_request,只要任意一个通过,其他模块将不再执行，跳过其他模块) 放行，就能继续向下一个阶段执行；</li>
</ul>
</li>
</ul>
<p>precontent阶段</p>
<ul>
<li>try_files —&gt;mirrors</li>
<li>try_fiels指令用法如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name tryfiles.test.com;</span><br><span class="line">        root /home/cgn/nginx_dir;</span><br><span class="line"></span><br><span class="line">        location /first &#123;</span><br><span class="line">                try_files /system/maintenance.html $uri $uri/index.html $uri.html @lasturi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location @lasturi &#123;</span><br><span class="line">                return 200 'lasturl!\n';</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /second &#123;</span><br><span class="line">                try_files $uri/index.html $uri.html =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>实时拷贝流量mirror模块</p>
<p>用于多个环境中处理用户流量有帮助</p>
</li>
</ul>
<p>content阶段</p>
<ul>
<li><p>concat–&gt;random_index–&gt;index—&gt;auto_index—&gt;static</p>
</li>
<li><p>static模块中的两个指令：<code>root</code> 和<code>alias</code> </p>
<ul>
<li>访问文件的三个变量：<ul>
<li>request_filename:访问文件的绝对路径</li>
<li>document_root：访问文件所在的绝对文件夹路径</li>
<li>realpath_root：如果是链接文件夹，则返回的是实际链接到的文件夹</li>
</ul>
</li>
<li>访问目录时，uri没有添加<code>/</code>,nginx提供三个值控制 重定向</li>
<li>url: return.test.com:8081/realpath   — &gt; realpath是一个目录，这时候nginx将返回一个带<code>/</code> 的重定向,控制重定向后的Location;<ul>
<li>prot_in_redirect</li>
<li>server_name_in_redirect</li>
<li>absolute_redirect</li>
</ul>
</li>
</ul>
</li>
<li><p>index 模块中的<code>index</code> 指令，默认值是 index.html; </p>
</li>
<li><p>auto_index 模块中的<code>auto_index</code> ，</p>
<ul>
<li>autoindex on;</li>
<li>autoindex_exact_size</li>
<li>autoindex_format ： html/xml/json/jsonp;</li>
<li>autoindex_localtime </li>
</ul>
</li>
<li><p>cancat 模块提供：当页面需要访问多个小文件时，把它们的内容合并到一次http响应中返回，提升性能；</p>
<p><a href="https://github.com/alibaba/nginx-http-concat" target="_blank" rel="noopener">concat</a></p>
<ul>
<li>是Tengine中的模块，–add-module=</li>
</ul>
</li>
</ul>
<p>log阶段</p>
<ul>
<li><p>log :记录请求日志</p>
<ul>
<li><p>指令 log_format,只能定义在<code>http</code>上下文中,默认值 <code>combined</code></p>
</li>
<li><p>默认的<code>combined</code>格式如下</p>
<ul>
<li><p>log_format combined </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;$remote_addr - $remote_user[$time_local]&#39; &quot;$request&quot; $status $body_bytes_sent&#39; &#39;&quot;$http_referer&quot; &quot;$http_user_agent&quot;&#39;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="10-nginx-对响应的处理"><a href="#10-nginx-对响应的处理" class="headerlink" title="10 .nginx 对响应的处理"></a>10 .nginx 对响应的处理</h2><ul>
<li>sub模块，默认未编译进，更改响应中的字符串；</li>
<li>additon 模块，在响应的前后添加内容；</li>
</ul>
<h2 id="11-HTTP请求相关的变量："><a href="#11-HTTP请求相关的变量：" class="headerlink" title="11. HTTP请求相关的变量："></a>11. HTTP请求相关的变量：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arg_参数名： URL中某个具体参数的值</span><br><span class="line">query_string: 同args;</span><br><span class="line">args: 全部URL参数  ?a&#x3D;test&amp;b&#x3D;hello</span><br><span class="line">is_args: 有参数返回?否则返回空</span><br><span class="line">content_length: http请求中标识包体长度的Content-Length头部的值</span><br><span class="line">content_type: Content-Type头部的值</span><br><span class="line">uri: 不包括?后的参数</span><br><span class="line">document_uri:与uri相同；</span><br><span class="line">request_uri: 请求的URL(包括URI以及完整的参数)</span><br><span class="line">scheme: 协议名；</span><br><span class="line">request_method:</span><br><span class="line">request_length: 所有请求内容的大小，包括请求行，请求头，包体；</span><br><span class="line">remote_user:由HTTP Basic Authentication协议传入的用户名；</span><br><span class="line">request_body_file； 临时存放请求包体的文件</span><br><span class="line">request_body:这个变量当且仅当使用反向代理，且设定用内存暂存包体时才有效；</span><br><span class="line">request:原始的url请求，包含方法和协议版本；</span><br><span class="line">host:先从请求行中获取，如果含有Host头部，就用其值替换掉请求行中的主机名，如果前面都取不到，则使用匹配上的server_name;</span><br><span class="line">http_头部名字：</span><br><span class="line">- 特殊： http_host,http_user_agent,http_referer,http_via,http_x_forwarded_for,http_cookie;</span><br></pre></td></tr></table></figure>

<h2 id="12-TCP连接相关的变量："><a href="#12-TCP连接相关的变量：" class="headerlink" title="12 TCP连接相关的变量："></a>12 TCP连接相关的变量：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binary_remote_addr: 客户端地址的整型格式，对于IPV4:4个字节，IPV6是16字节；</span><br><span class="line">connection；递增的连接序号；</span><br><span class="line">connection_requests: 当前连接上执行过的请求数；</span><br><span class="line">remote_addr: 客户端地址</span><br><span class="line">remote_port:客户端端口；</span><br><span class="line">proxy_protocol_addr:使用了proxy_protocol协议返回协议中的地址，否则返回空；</span><br><span class="line">proxy_protocol_port:</span><br><span class="line">server_addr:</span><br><span class="line">server_port</span><br><span class="line">TCP_INFO：tcp内核层参数</span><br><span class="line">server_protocol:服务器端协议</span><br></pre></td></tr></table></figure>

<h2 id="13-nginx请求处理过程产生的变量"><a href="#13-nginx请求处理过程产生的变量" class="headerlink" title="13 nginx请求处理过程产生的变量"></a>13 nginx请求处理过程产生的变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">request_time:请求处理到现在的耗时，单位为s</span><br><span class="line">server_name: 匹配上请求的server_name值</span><br><span class="line">https: 如果开启了TLS&#x2F;SSL，返回on,否则返回空</span><br><span class="line">request_completion:请求处理完成返回OK,否则返回空；</span><br><span class="line">request_id：十六进制输出的请求id;</span><br><span class="line">request_filename</span><br><span class="line">document_root</span><br><span class="line">realpath_root</span><br><span class="line">limit_rate:返回客户端响应时的速度上限，单位为每秒字节数，可以通过 set指令修改对请求产生效果；</span><br></pre></td></tr></table></figure>

<ul>
<li>发送HTTP响应时相关的变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body_bytes_sent</span><br><span class="line">bytes_sent</span><br><span class="line">status</span><br><span class="line">sent_trailer:</span><br></pre></td></tr></table></figure>

<h2 id="14-nginx-系统变量"><a href="#14-nginx-系统变量" class="headerlink" title="14 .nginx 系统变量"></a>14 .nginx 系统变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">time_local: 本地时间</span><br><span class="line">time_iso8601: 使用ISO 8601标准输出的当前时间</span><br><span class="line">nginx_version</span><br><span class="line">pid:所属worker进程的进程id</span><br><span class="line">pipe</span><br><span class="line">hostname</span><br><span class="line">msee</span><br></pre></td></tr></table></figure>

<h2 id="15-基于MaxMind数据库从客户端地址获取变量-geoip模块，默认没有编译进nginx"><a href="#15-基于MaxMind数据库从客户端地址获取变量-geoip模块，默认没有编译进nginx" class="headerlink" title="15. 基于MaxMind数据库从客户端地址获取变量  geoip模块，默认没有编译进nginx:"></a>15. 基于MaxMind数据库从客户端地址获取变量  geoip模块，默认没有编译进nginx:</h2><h2 id="16-nginx作为反向代理使用"><a href="#16-nginx作为反向代理使用" class="headerlink" title="16. nginx作为反向代理使用"></a>16. nginx作为反向代理使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx 反向代理http服务器</span><br><span class="line">设置变量：</span><br></pre></td></tr></table></figure>

<h2 id="17-日志切割"><a href="#17-日志切割" class="headerlink" title="17. 日志切割"></a>17. 日志切割</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 0 1 * * root /usr/local/openresty/nginx/logs/rotate.sh</span><br><span class="line">LOGS_PATH=/usr/local/openresty/nginx/logs/history</span><br><span class="line">CUR_LOGS_PATH=/usr/local/openresty/nginx/logs</span><br><span class="line">YESTERDAY=$(date -d "yesterday" +%Y-%m-%d)</span><br><span class="line">mv $&#123;CUR_LOGS_PATH&#125;/user1_access.log $&#123;LOGS_PATH&#125;/user1_access_$&#123;YESTERDAY&#125;.log</span><br><span class="line">mv $&#123;CUR_LOGS_PATH&#125;/user2_access.log $&#123;LOGS_PATH&#125;/user2_access_$&#123;YESTERDAY&#125;.log</span><br><span class="line">kill -USR1 $(cat /user/local/openresty/nginx/logs/nginx.pid)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Mysql继续学习</title>
    <url>/2020/10/12/Mysql%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Mysql继续学习"><a href="#Mysql继续学习" class="headerlink" title="Mysql继续学习"></a><center>Mysql继续学习</center></h1><a id="more"></a>

<h2 id="1-索引的原理"><a href="#1-索引的原理" class="headerlink" title="1. 索引的原理"></a>1. 索引的原理</h2><p> 索引就是帮助Mysql高效获取数据的数据结构。</p>
<p>优势：快速查询数据，降低数据库的IO成本；</p>
<p>劣势：索引也是表，也要占用空间；虽然提高了查询效率，但是降低了更新表的速度，对表进行insert, update, delete等，更新表时，mysql不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，调整更新带来的键值变化后的索引信息；</p>
<ul>
<li>索引结构<ul>
<li>索引是MySQL的存储引擎层中实现的，不是在服务器层实现，每种存储引擎的索引不一定相同，也不是所有的存储引擎都支持所有的索引类型，</li>
<li>InnoDB引擎支持的索引有：Btree索引，full-text索引（5.6版本后支持），平常所说的索引，没有特别指定，都是指B+树（多路搜索树，不一定是二叉的）结构的索引；其中聚集索引，复合索引，前缀索引，唯一索引默认都是使用B+tree树索引；</li>
<li>b-tree结构：<ul>
<li>btree又叫多路平衡搜索树，一个m叉的btree特性：<ul>
<li>树中每个节点最多包含有m个孩子；</li>
<li>除根节点和叶子节点外，每个节点至少有（m/2)（向上取整）个孩子</li>
<li>若根节点不是叶子节点，则至少有两个孩子</li>
<li>所有叶子节点都在同一层</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中 （m/2)（向上取整）- 1 &lt;= n &lt;= m -1;当n大于最大值时，中间节点分裂到父节点，两边节点分裂；</li>
</ul>
</li>
</ul>
</li>
<li>b+tree与btree区别<ul>
<li>b+tree的叶子节点保存包含主键的一条记录或者是主键索引，索引从左到右递增排列，而b-tree树每个结点都包含索引和对应的数据，这样的话，会增加树的高度，因而带来更多的磁盘I/O操作；</li>
<li>b+tree所有的非叶子节点只存储索引，不存储数据；</li>
<li>b+tree的叶子节点增加了双向链表指针，优化了区间查询的性能，而不像b-tree那样在区间查找时，对于每个元素进行重新查找；</li>
</ul>
</li>
<li>mysql中的b+tree数据结构对经典的b-tree进行了优化，在原有b-tree基础上，增加了一个指向相邻叶子节点的链表指针，形成了带有顺序指针的B+tree,提高区间访问的性能；</li>
</ul>
</li>
<li>索引分类：                                  <ul>
<li>单值索引：一个索引包含单个列</li>
<li>唯一索引：索引列的值必须唯一，可以有多个null</li>
<li>复合索引：多列构成的索引；</li>
</ul>
</li>
</ul>
<h2 id="2-索引的增删改查"><a href="#2-索引的增删改查" class="headerlink" title="2.索引的增删改查"></a>2.索引的增删改查</h2><ul>
<li><p>创建索引：create index idx_city_name on city(city_name);</p>
<ul>
<li>也可以通过：alter table city add unique idx_city_name(city_name);  创建唯一索引</li>
</ul>
</li>
<li><p>查看索引： show index from city;</p>
</li>
<li><p>删除索引： drop index idx_city_name on city;</p>
</li>
</ul>
<h2 id="3-视图"><a href="#3-视图" class="headerlink" title="3. 视图"></a>3. 视图</h2><ul>
<li>视图：提高复杂SQL语句的复用性和表操作的安全性；</li>
<li>视图作用<ul>
<li>安全，创建一个视图，定义好该视图操作的数据，之后将用户权限与视图进行绑定，可以通过grant语句对视图进行授予权限；</li>
<li>查询性能提高，将查询的结果保存到视图中；</li>
<li>数据独立： 一个视图就是一个表的查询结果集，相当于一个虚拟的表，可以对这个表再进行查询，</li>
</ul>
</li>
<li>创建视图 <ul>
<li>create view view_city_country as select c.*, t.country_name from city c, country t where c.country_id = t.country_id;</li>
<li>create or replace view view_city_country as 新的查询语句；创建或者覆盖已经存在的视图名</li>
</ul>
</li>
<li>修改视图:通过视图能够修改原表；<ul>
<li>update view_city_country set city_name = ‘西安市’ where city_id =1;</li>
</ul>
</li>
<li>使用视图： <ul>
<li>select * from view_city_country;</li>
</ul>
</li>
<li>删除视图<ul>
<li>drop view view_city_country;</li>
</ul>
</li>
<li>查看视图： show tables;</li>
<li>查看视图创建语句： show  create view view_city_country;</li>
<li>视图的其他参数：<ul>
<li>with check option:在插入或者更新数据时，不能插入或者更新不符合限制条件的记录</li>
<li>algorithm 参数有 merge,temptable,undefined,默认参数为merge<ul>
<li>merge :直接将视图转化为sql语句执行；修改视图生成表的数据也会直接更新基表；</li>
<li>temptable:先将视图结果存放到内存，然后创建一个临时表，再从临时表取数据，不能直接更新基表；</li>
</ul>
</li>
</ul>
</li>
<li>视图中的数据不可更新<ul>
<li>视图表中的数据不是直接来源于基表，不能修改；</li>
</ul>
</li>
</ul>
<h2 id="4-存储过程和函数"><a href="#4-存储过程和函数" class="headerlink" title="4. 存储过程和函数"></a>4. 存储过程和函数</h2><ul>
<li><p>存储过程：实现将一组对表操作的sql语句代码当做一个整体来执行；</p>
<ul>
<li>将重复性操作封装到存储过程中，减少对sql的调用；</li>
<li>批量处理</li>
</ul>
</li>
<li><p>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test1()</span><br><span class="line">begin</span><br><span class="line">select * from view_city_country;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call pro_test1();</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show procedure status; -- 查看数据库中所有存储过程</span><br><span class="line">-- 查看数据库中指定存储过程：</span><br><span class="line">show procedure status where db&#x3D;&#39;use_index&#39;;</span><br><span class="line">-- 查看创建存储过程语句：</span><br><span class="line">show create procedure pro_test1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure pro_test1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h4><h5 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare res varchar(100) default &#39;&#39;;</span><br><span class="line">declare x,y int default 0;  -- 变量声明</span><br><span class="line">set x &#x3D; 3; -- 变量赋值 第一种方式</span><br><span class="line">set y &#x3D; 4;</span><br><span class="line">declare avgres double;</span><br><span class="line">select avg(salary) into avgres from test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql&gt; create procedure pro_test2()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int;</span><br><span class="line">    -&gt; select count(*) into num from city; -- 变量赋值 第二种方式</span><br><span class="line">    -&gt; select concat(&#39;city表中的记录数为:&#39;, num);</span><br><span class="line">    -&gt; end$$</span><br></pre></td></tr></table></figure>

<h5 id="2-参数"><a href="#2-参数" class="headerlink" title="2.参数"></a>2.参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 输入参数 </span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test3(in height int)</span><br><span class="line">begin</span><br><span class="line">declare description varchar(50) default &#39;&#39;;</span><br><span class="line">if height &gt;&#x3D; 180 then</span><br><span class="line">	set description&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D;170 and height &lt; 180 then</span><br><span class="line">	set description&#x3D;&#39;标准身材&#39;;</span><br><span class="line">else</span><br><span class="line">	set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">select concat(&#39;身高&#39;, height, &#39; 对应的身材类型是:&#39;, description);</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test6(height int, out descrip varchar(50))</span><br><span class="line">begin</span><br><span class="line">if height &gt;&#x3D;180 then</span><br><span class="line">	set descrip&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D; 170 and height &lt; 180 then</span><br><span class="line">	set descrip&#x3D;&#39;身材一般&#39;;</span><br><span class="line">else</span><br><span class="line">	set descrip&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">-- 调用上面的方式有</span><br><span class="line">call(145, @description);</span><br><span class="line">select @description;  @description 用户定义的会话变量</span><br></pre></td></tr></table></figure>



<h5 id="3-条件判断语句"><a href="#3-条件判断语句" class="headerlink" title="3.条件判断语句"></a>3.条件判断语句</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test3()</span><br><span class="line">begin</span><br><span class="line">declare height int default 175;</span><br><span class="line">declare description varchar(50) default &#39;&#39;;</span><br><span class="line">if height &gt;&#x3D; 180 then</span><br><span class="line">	set description&#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height &gt;&#x3D;170 and height &lt; 180 then</span><br><span class="line">	set description&#x3D;&#39;标准身材&#39;;</span><br><span class="line">else</span><br><span class="line">	set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">select concat(&#39;身高&#39;, height, &#39; 对应的身材类型是:&#39;, description);</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="4-case"><a href="#4-case" class="headerlink" title="4. case"></a>4. case</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test8(mon int)</span><br><span class="line">begin</span><br><span class="line">declare result varchar(10);</span><br><span class="line">case </span><br><span class="line">when mon&gt;&#x3D;1 and mon &lt;&#x3D;3 then</span><br><span class="line">	set result&#x3D;&#39;第一季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;4 and mon&lt;&#x3D;6 then</span><br><span class="line">	set result&#x3D;&#39;第二季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;7 and mon&lt;&#x3D;9 then</span><br><span class="line">	set result&#x3D;&#39;第三季度&#39;;</span><br><span class="line">else</span><br><span class="line">	set result&#x3D;&#39;第四季度&#39;;</span><br><span class="line">end case;</span><br><span class="line">select concat(&#39;传递的月份是:&#39;, mon, &#39;,计算出的结果是：&#39;, result) as content;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="5-while-repeat-loop循环"><a href="#5-while-repeat-loop循环" class="headerlink" title="5. while, repeat, loop循环"></a>5. while, repeat, loop循环</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 从1累加到n，求结果</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test9(n int)</span><br><span class="line">begin </span><br><span class="line">	declare total int default 0;</span><br><span class="line">	declare num int default 1;</span><br><span class="line">	while num &lt;&#x3D; n do</span><br><span class="line">		set total &#x3D; total + num;</span><br><span class="line">		set num &#x3D; num + 1;</span><br><span class="line">	end while;</span><br><span class="line">	select total;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test10(n int)</span><br><span class="line">begin</span><br><span class="line">	declare total int default 0;</span><br><span class="line">	declare num int default 1;</span><br><span class="line">	repeat </span><br><span class="line">		set total&#x3D;total+n;</span><br><span class="line">		set n&#x3D;n-1;</span><br><span class="line">		until n&#x3D;0</span><br><span class="line">	end repeat;</span><br><span class="line">	select total;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test11(n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">c:loop</span><br><span class="line">	set total &#x3D; total + n;</span><br><span class="line">	set n &#x3D; n - 1;</span><br><span class="line">	if n &lt;&#x3D; 0 then</span><br><span class="line">		leave c;</span><br><span class="line">	end if;</span><br><span class="line">end loop c;</span><br><span class="line">select total;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="6-循环使用"><a href="#6-循环使用" class="headerlink" title="6. 循环使用"></a>6. 循环使用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create procedure pro_test13()</span><br><span class="line">begin</span><br><span class="line">declare e_id int;</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int;</span><br><span class="line">declare e_salary int;</span><br><span class="line">declare has_data int default 1;</span><br><span class="line">declare emp_result cursor for select * from emp;</span><br><span class="line">declare exit handler for NOT FOUND set has_data &#x3D; 0;</span><br><span class="line">open emp_result;</span><br><span class="line">repeat</span><br><span class="line">fetch emp_result into e_id, e_name, e_age, e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;, e_id, &#39;, name&#x3D;&#39;, e_name, &#39;, age&#x3D;&#39;, e_age, &#39;,salary&#x3D;&#39;, e_salary);</span><br><span class="line">until has_data &#x3D; 0</span><br><span class="line">end repeat;</span><br><span class="line">close emp_result;</span><br><span class="line">end$$</span><br></pre></td></tr></table></figure>

<h5 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- log_bin_trust_function_creators需要这个参数开启的情况下，才能创建函数</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create function test_func(c_id int) returns int</span><br><span class="line">begin</span><br><span class="line">declare result int;</span><br><span class="line">select count(*) into result from city where country_id&#x3D;c_id;</span><br><span class="line">return result;</span><br><span class="line">end$$</span><br><span class="line"></span><br><span class="line">-- 调用函数</span><br><span class="line">select test_func(1);</span><br><span class="line">-- 删除函数</span><br><span class="line">drop function test_func;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 返回指定个数的随机字符串</span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION rand_str(n INT) RETURNS VARCHAR(255) </span><br><span class="line">BEGIN</span><br><span class="line">DECLARE str VARCHAR(100) DEFAULT &#39;adcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">DECLARE result VARCHAR(255) DEFAULT &#39;&#39;;</span><br><span class="line">WHILE i &lt; n DO</span><br><span class="line"></span><br><span class="line">-- 随机返回一个字符串</span><br><span class="line">-- substr(str, floor(1 + rand() * 52), 1);</span><br><span class="line">SET result &#x3D; CONCAT(result, SUBSTR(str, FLOOR(1 + RAND() * 52), 1));</span><br><span class="line">SET i &#x3D; i + 1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN result;</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<h2 id="5-触发器"><a href="#5-触发器" class="headerlink" title="5.触发器"></a>5.触发器</h2><ul>
<li>与表相关的数据库对象，在进行insert,update, delete事件之前或者之后，执行触发器中的动作；</li>
<li>触发器类型： insert, update,delete 只有这三类动作，自动执行触发器</li>
</ul>
<h4 id="5-1-创建触发器"><a href="#5-1-创建触发器" class="headerlink" title="5.1 创建触发器"></a>5.1 创建触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger trigger_name -- 触发器命名 trigger_xxx 或者tri_xxx</span><br><span class="line">before|after trigger_event</span><br><span class="line">on table_name -- 哪个表</span><br><span class="line">for each row -- 任何一条记录上的操作满足触发条件就会触发该触发器</span><br><span class="line">trigger_sTMT -- 激活触发器后被执行的语句</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER tri_emp_logs</span><br><span class="line">AFTER INSERT</span><br><span class="line">ON emp</span><br><span class="line">FOR EACH ROW</span><br><span class="line">INSERT INTO emp_logs VALUES(NULL, &#39;insert&#39;, NOW(), new.id, CONCAT(&#39;插入后(id:&#39;, now.id, &#39;, name:&#39;, now.name,&#39;, age:&#39;,now.age,&#39;,salary:&#39;, new.salary, &#39;)&#39;));</span><br><span class="line"></span><br><span class="line">-- 当对emp表执行insert操作后，自动将向emp_logs表中插入一条记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 当对emp表执行update操作后，自动向emp_logs表中插入一条记录</span><br><span class="line">CREATE TRIGGER tri_update_emp</span><br><span class="line">AFTER UPDATE</span><br><span class="line">ON emp</span><br><span class="line">FOR EACH ROW</span><br><span class="line">INSERT INTO emp_logs VALUES(NULL, &#39;update&#39;, NOW(), new.id, CONCAT(&#39;修改前(id:&#39;, old.id, &#39;, name:&#39;, old.name,&#39;, age:&#39;,old.age, &#39;,salary:&#39;, old.salary,&#39;),&#39;,&#39;修改后(id:&#39;,</span><br><span class="line">new.id,&#39;, name:&#39;, new.name, &#39;,age:&#39;, new.age, &#39;,salary:&#39;,new.salary,&#39;)&#39;));</span><br><span class="line"></span><br><span class="line">-- 当对emp表执行delete操作后，自动向emp_logs表中插入一条记录</span><br></pre></td></tr></table></figure>

<h4 id="5-2-删除触发器"><a href="#5-2-删除触发器" class="headerlink" title="5.2 删除触发器"></a>5.2 删除触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger trigger_name;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-查看触发器"><a href="#5-3-查看触发器" class="headerlink" title="5.3 查看触发器"></a>5.3 查看触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show triggers;</span><br></pre></td></tr></table></figure>

<h2 id="6-引擎"><a href="#6-引擎" class="headerlink" title="6. 引擎"></a>6. 引擎</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看支持的引擎</span><br><span class="line">show engines;</span><br><span class="line">-- 默认情况下，使用innodb</span><br><span class="line">show variables like &#39;%storage_engine%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-Innodb引擎的特性：（针对表而言的，也是表引擎）"><a href="#6-1-Innodb引擎的特性：（针对表而言的，也是表引擎）" class="headerlink" title="6.1 Innodb引擎的特性：（针对表而言的，也是表引擎）"></a>6.1 Innodb引擎的特性：（针对表而言的，也是表引擎）</h4><ul>
<li>支持事务</li>
<li>支持行级锁</li>
<li>支持外键</li>
</ul>
<h4 id="6-2-优化SQL步骤"><a href="#6-2-优化SQL步骤" class="headerlink" title="6.2 优化SQL步骤"></a>6.2 优化SQL步骤</h4><h5 id="6-2-1-查看sql执行频率"><a href="#6-2-1-查看sql执行频率" class="headerlink" title="6.2.1 查看sql执行频率"></a>6.2.1 查看sql执行频率</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查看全局各个操作的执行次数</span><br><span class="line">show global status like &#39;Com_______&#39;;</span><br><span class="line">-- 比如</span><br><span class="line">-- Com_insert: 执行insert操作的次数，批量插入，只累加一次；</span><br><span class="line">-- 查看针对innodb操作的行数</span><br><span class="line">show global status like &#39;Innodb_rows_%&#39;;</span><br><span class="line">-- Innodb_rows_read :select查询返回的行数</span><br></pre></td></tr></table></figure>

<h5 id="6-2-2-定位低效的sql语句方式"><a href="#6-2-2-定位低效的sql语句方式" class="headerlink" title="6.2.2 定位低效的sql语句方式"></a>6.2.2 定位低效的sql语句方式</h5><ul>
<li>第一种通过慢查询日志</li>
<li>第二种通过show processlist命令进行操作，可以实时查看sql的执行情况</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+-----------------+-----------+------+---------+-------+------------------------+------------------+</span><br><span class="line">| Id | User            | Host      | db   | Command | Time  | State                  | Info             |</span><br><span class="line">+----+-----------------+-----------+------+---------+-------+------------------------+------------------+</span><br><span class="line">|  5 | event_scheduler | localhost | NULL | Daemon  | 48810 | Waiting on empty queue | NULL             |</span><br><span class="line">| 46 | root            | localhost | NULL | Query   |     0 | starting               | show processlist |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- id: 用户登录mysql，系统分配的connection_id, 可以通过connection_id()查看</span><br><span class="line">-- user: 显示当前用户</span><br><span class="line">-- host: 显示从哪个ip发出的</span><br><span class="line">-- db: 显示这个进程目前连接的是哪个数据库</span><br><span class="line">-- command: 显示当前执行的命令</span><br><span class="line">-- time: 显示状态持续的时间，单位为s</span><br><span class="line">-- state: 显示当前连接的sql语句的状态，描述的是语句执行中的某一个状态，一个sql语句，以查询为例，可能需要经过copying to tmp table, sorting result , sending data 才可以完成</span><br><span class="line">-- info： 显示执行的sql语句；</span><br></pre></td></tr></table></figure>

<h5 id="6-2-3-explain-分析执行计划"><a href="#6-2-3-explain-分析执行计划" class="headerlink" title="6.2.3  explain 分析执行计划"></a>6.2.3  explain 分析执行计划</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain sql语句 -- 分析sql语句的执行计划</span><br></pre></td></tr></table></figure>



<h2 id="7-mysql-面试题："><a href="#7-mysql-面试题：" class="headerlink" title="7. mysql 面试题："></a>7. mysql 面试题：</h2><ul>
<li>数据库的索引结构是什么，b-tree 与b+tree有什么区别<ul>
<li>B+tree中每个叶子节点都包含指向下一个叶子节点的指针，方便叶子节点的范围遍历；</li>
</ul>
</li>
<li>联合索引是什么，如何才能命中联合索引</li>
<li>数据库的隔离级别，每个级别都有什么问题？<ul>
<li>读未提交级别，  会造成 脏读；</li>
<li>读提交级别， 带来不可重复读；</li>
<li>可重复读级别（InnoDB默认使用的）， 带来幻读问题；</li>
<li>序列化级别,解决上面所有问题，没有并发可言；</li>
</ul>
</li>
<li>可重复读是怎么实现的？<ul>
<li>通过MVCC(多版本并发控制) 实现可重复读隔离级别，解决了脏读，不可重复读问题，但是还有幻读问题；<ul>
<li>幻读问题，是因为执行了对数据修改的操作（update, insert, delete)采用了当前读模式，每次都会读取最新的版本号记录；</li>
<li>当两个事务都同时操作了同一条记录，那么另一个事务将等待，直到一个事务提交，有等待时间超时限制（更新或者删除）；<ul>
<li>当同时删除一条记录，一个事务在提交之前，另一个事务处于等待，当这个事务提交后，这个事务才能执行，但是没有任何作用，不会进行删除操作，数据和删除前一样；更新操作一样；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>分库分表， 基于什么进行拆分，拆分后出现了什么问题，怎么解决的？</li>
<li>为什么建议InnoDB表必须建主键，并且推荐使用整型的自增主键？<ul>
<li>主动建立主键是为了更好地建立b+tree结构，方便我们使用主键进行查找，如果不主动建立，那么InnoDB也会去找唯一索引的列作为主键建立，如果还没有，那么将自动建立一个列，作为建立B+tree结构的</li>
<li>使用整型比使用字符串进行大小比较更有效率，而自增的主键，当插入数据时，只可能在原有b+tree结构上向后插入，不会向原有已经排好的结构进行插入导致节点分裂问题；</li>
</ul>
</li>
<li>为什么非主键索引结构叶子节点存储的是主键值？<ul>
<li>降低占用磁盘空间的大小；</li>
</ul>
</li>
<li>联合索引的最左前缀原理？<ul>
<li>联合索引结构根据建立索引时，从左到低字段的顺序进行比较建立b+tree结构，当第一个字段相等，比较第二个字段，依次比较；</li>
<li></li>
</ul>
</li>
<li>MyISAM 与InnoDB索引有什么不同？<ul>
<li>MyISAM 索引通过数据的物理位置引用被索引的行</li>
<li>InnoDB索引根据主键引用被索引的行；</li>
</ul>
</li>
<li>索引的优点：<ul>
<li>索引大大减少了服务器需要扫描的数据量</li>
<li>索引可以帮助服务器避免进行排序</li>
<li>索引可以将随机I/O变为顺序I/O;</li>
</ul>
</li>
</ul>
<h2 id="8-理解msyql索引的命令"><a href="#8-理解msyql索引的命令" class="headerlink" title="8. 理解msyql索引的命令"></a>8. 理解msyql索引的命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show global status like 'Innodb_page_size';</span><br></pre></td></tr></table></figure>



<h2 id="9-不命中索引的情况有："><a href="#9-不命中索引的情况有：" class="headerlink" title="9. 不命中索引的情况有："></a>9. 不命中索引的情况有：</h2><ul>
<li><p>范围问题：范围太大，或者不明确的时候，查询依旧很慢：&gt;, &gt;=, &lt;, &lt;=, !=, between..and.. ,like,</p>
</li>
<li><p>尽量选择区分度高的列作为索引， （不重复的索引和数据表的记录总数的比值，选择性高的索引可以让mysql在查找时过滤掉更多的行）</p>
</li>
<li><p>索引列不能是表达式的一部分，或者函数的参数；</p>
</li>
</ul>
<h2 id="10-explain-各字段含义"><a href="#10-explain-各字段含义" class="headerlink" title="10. explain 各字段含义"></a>10. explain 各字段含义</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key      | key_len | ref  | rows | filtered | Extra                    |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | range | ix_email      | ix_email | 203     | NULL |   11 |   100.00 | Using where; Using index |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+----------+---------+------+------+----------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">id: 表的读取顺序，id越大，优先读取</span><br><span class="line">select_type: 查询的类型；</span><br><span class="line">type: system&gt; const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL</span><br><span class="line"> - ALL: 不使用索引，全表扫描</span><br><span class="line"> - index: 全索引查找，遍历索引树查找</span><br><span class="line"> - range: 范围查找</span><br><span class="line"> - ref:辅助索引等值查找</span><br><span class="line"> - eq_ref: 多表连接，非驱动表连接条件时主键或者是唯一键；</span><br><span class="line"> - const:聚集索引等值查询；</span><br><span class="line"> key_len: 帮助判断，此次查询，走了联合索引的几部分；</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Mysql索引</title>
    <url>/2020/10/12/Mysql%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h1 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a><center>Mysql索引</center></h1><a id="more"></a>

<h1 id="1-准备测试数据"><a href="#1-准备测试数据" class="headerlink" title="1. 准备测试数据"></a>1. 准备测试数据</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> delimiter ;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> delimiter $$</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create procedure auto_insert()</span></span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare i int default 1;</span><br><span class="line">    -&gt; while(i&lt;3000000) do</span><br><span class="line">    -&gt; insert into test values(i, 'eva', 'female', concat('eva', i, '@oldboy'));</span><br><span class="line">    -&gt; set i=i+1;</span><br><span class="line">    -&gt; end while;</span><br><span class="line">    -&gt; end$$</span><br><span class="line">Query OK, 0 rows affected (0.14 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> delimiter ;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> call auto_insert();</span></span><br></pre></td></tr></table></figure>

<p><strong>Query OK, 1 row affected (3 days 47 min 3.30 sec)</strong>， 使用默认配置，插入3000000 条数据用到的时间。</p>
<h1 id="2-使用索引进行优化"><a href="#2-使用索引进行优化" class="headerlink" title="2. 使用索引进行优化"></a>2. 使用索引进行优化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 使用联合索引时，查询条件中必须包含建立索引时最左列字段，并且多个字段时，不能跳过中间字段进行查询，否则，不能使用索引，这是联合索引的最左前缀法则；</span><br><span class="line">2. 索引列上不能作为表达式的一部分，或者作为函数的参数，保证索引列独立；</span><br><span class="line">3. 存储引擎不能使用范围条件右边的索引列；</span><br><span class="line">4.尽量使用覆盖索引获取查询的结果(覆盖索引是指查询结果的列在建立索引列的范围)</span><br><span class="line">5.使用like 进行模糊查询时，如果%在前面，索引不生效，如果想使用%xx% 而且还想使索引生效，则可以考虑使用覆盖索引，解决它，只要使用</span><br><span class="line">select name, age from user where user like &#39;%cgn%&#39;;  建立联合索引(name, age); </span><br><span class="line">或者通过 elasticsearch + mongodb;</span><br><span class="line">6.字符串不加引号，将导致默认做类型转换，不符合第二条索引原则，也有可能导致索引失效；</span><br><span class="line">7.&lt;&gt;, not in 不走索引，</span><br><span class="line">8.单独的&gt;,&lt;,in 有可能走，有可能不走，和结果集(15%-30%)有关，尽量结合业务使用Limit;</span><br><span class="line">9. or或者in 尽量改成union, union all,可以使用，要测试,看数据唯一性如何，是否有太多的重复性；</span><br><span class="line">10.!&#x3D;不走索引，但是对于主键 走索引。。。。。。not in也是</span><br></pre></td></tr></table></figure>

<h1 id="3-优化的过程"><a href="#3-优化的过程" class="headerlink" title="3. 优化的过程"></a>3. 优化的过程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 开始慢查询日志，设置阈值。</span><br><span class="line">2. 使用explain 工具分析是否命中索引；</span><br><span class="line">3. show profile</span><br><span class="line">4. mysql服务器端的参数调优；</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查询优化：</span><br><span class="line">	小表驱动大表</span><br><span class="line">	select * from A where id in (select id from B)</span><br><span class="line">	当B表的数据集必须小于A表的数据集时，用in优于exists</span><br><span class="line">	</span><br><span class="line">	select * from A where exists (select 1 from B where B.id = A.id);</span><br><span class="line">	当A表的数据集小于B表的数据集时，用exists优于in;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">order by 优化：尽可能在索引列上进行排序</span><br><span class="line"></span><br><span class="line">两种排序：文件排序或者扫描有序索引排序</span><br><span class="line">能够使用索引排序的情况有：(a,b,c)联合索引</span><br><span class="line"> - order by a</span><br><span class="line"> - order by a,b</span><br><span class="line"> - order by a,b,c</span><br><span class="line"> - order by a desc, b desc, c desc</span><br><span class="line"> </span><br><span class="line"> 使用where的最左前缀定义为常量，</span><br><span class="line">  - where a = const order by b,c</span><br><span class="line">  - where a = const and b = const order by c</span><br><span class="line">  - where a = const and b &gt; const order by b,c</span><br><span class="line"> 不能使用索引排序的情况：</span><br><span class="line">  - order by a asc,b desc, c desc  - 排序不一致</span><br><span class="line">  - where g = const order by b,c   - 丢失a</span><br><span class="line">  - where a = const order by c    - 丢失b索引</span><br><span class="line">  - where a = const order by a,d  - d 不是索引的一部分</span><br><span class="line">  - where a in () order by b,c    - 多个相等条件也是范围查询</span><br><span class="line"></span><br><span class="line">针对产生 using filesort的情况来说：(age,birth)作为联合索引来用；</span><br><span class="line">explain select * from A where age &gt; 20 order by birth;</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key          | key_len | ref  | rows | filtered | Extra                                    |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | index | idx_ageBirth  | idx_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index; Using filesort |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> explain select * from A <span class="built_in">where</span> age &gt; 20 order by birth,age;</span></span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key          | key_len | ref  | rows | filtered | Extra                                    |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | index | idx_ageBirth  | idx_ageBirth | 9       | NULL |    3 |   100.00 | Using where; Using index; Using filesort |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> explain select * from A order by birth;</span></span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key          | key_len | ref  | rows | filtered | Extra                       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | index | NULL          | idx_ageBirth | 9       | NULL |    3 |   100.00 | Using index; Using filesort |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> explain select * from A order by age asc, birth desc;</span></span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key          | key_len | ref  | rows | filtered | Extra                       |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | A     | NULL       | index | NULL          | idx_ageBirth | 9       | NULL |    3 |   100.00 | Using index; Using filesort |</span><br><span class="line">+----+-------------+-------+------------+-------+---------------+--------------+---------+------+------+----------+-----------------------------+</span><br><span class="line"></span><br><span class="line">两种排序： </span><br><span class="line">using index ,using filesort ; using index使用索引带来的排序，using filesort需要再做排序，相当于没有使用索引带来的排序；</span><br><span class="line">要想使用using index, 要求排序字段需要使用最左索引列；</span><br><span class="line"></span><br><span class="line">提高order by的查询速度方式：</span><br><span class="line">当有order by 查询时，使用select * 是大忌：因为，有可能取出的数据超过sort_buffer_size的容量，会导致创建tmp文件进行合并排序，</span><br><span class="line">导致多次I/O</span><br><span class="line">改进的点： </span><br><span class="line">尝试提高sort_buffer_size容量大小；</span><br><span class="line">尝试提高max_length_for_sort_data,会增加使用改进算法的概率；</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">group by 优化：</span><br><span class="line">实质是先排序再进行分组，遵照索引的最左前缀</span><br><span class="line">当无法使用索引时，可以通过设置 sort_buffer_size，max_length_for_sort_data </span><br><span class="line">where高于having,能在where中限定的条件不要去having中限定；</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">慢查询日志：</span><br><span class="line">- 默认情况下，mysql没有开启慢查询，可以通过 show variables like '%slow_query_log%' 查看，因为开启会带来一定的性能影响；</span><br><span class="line">- 如何开启：</span><br><span class="line">    set global slow_query_log =1 进行开启，仅仅对当前数据库生效，mysql重启会失效；</span><br><span class="line">     show variables like '%query_time%';  默认是10s,</span><br><span class="line">    set global long_query_time=3 修改慢sql的阈值为3s;</span><br><span class="line">    # show global variables like '%query_time%'查看设置是否成功，或者 通过重开一个新连接进行查看；</span><br><span class="line">    show global status like '%slow_queries%'; #查询当前慢查询日志的个数；</span><br><span class="line">    </span><br><span class="line">- 永久生效：配置到配置文件中</span><br><span class="line"> [mysqld]</span><br><span class="line">  slow_query_log=1;</span><br><span class="line">  slow_query_log_file=/var/lib/mysql/slow_query.log;</span><br><span class="line">  long_query_time=3;</span><br><span class="line">  log_output=FILE</span><br><span class="line">  </span><br><span class="line">-mysqldumpslow 工具查看慢查询日志的详细信息</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show profile 进行mysql语句的资源消耗分析</span><br><span class="line"> - show variables like 'profiling'; 默认情况下关闭 </span><br><span class="line"> - set profiling=on; # 开启后将记录下每条SQL语句的执行情况，并编号；</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 根据编号查询cpu，以及io情况</span></span><br><span class="line"> show profiles;</span><br><span class="line"> </span><br><span class="line"> show profile cpu, block io for query Quey_id;</span><br><span class="line"> </span><br><span class="line"><span class="meta"> #</span><span class="bash"> 当分析出的列中含有：就需要仔细分析了</span></span><br><span class="line"> converting HEAP to MyISAM表示查询结果太大，内存不够用，</span><br><span class="line"> creating tmp table 创建临时表，拷贝数据到临时表，用完再删除；</span><br><span class="line"> copying to tmp table on disk 把内存中的临时表复制到磁盘，危险!!!!!!!!!!</span><br><span class="line"> locked</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">全局日志</span><br><span class="line">set global general_log =1;</span><br><span class="line">set global log_output='TABLE';</span><br><span class="line">select * from mysql.general_log;   # 只能在测试环境下开启！！！！！！！！！！！！！，</span><br></pre></td></tr></table></figure>



<h1 id="4-锁机制"><a href="#4-锁机制" class="headerlink" title="4.锁机制"></a>4.锁机制</h1><ul>
<li><p>查看表上加过的锁</p>
<ul>
<li><p>show open tables;</p>
</li>
<li><p>手动增加锁： lock table table_name read, table_name write;</p>
</li>
<li><p>释放锁： unlock tables;</p>
</li>
</ul>
</li>
<li><p>表锁 MyISAM 如下：</p>
</li>
<li><p>读锁（读共享锁，写阻塞）</p>
<ul>
<li>lock table table_name read;</li>
<li>当前会话加读锁后的现象:<ul>
<li>当前会话只能读这个表，不能对这个表修改,同时也不能对没有加锁的其他表进行读写，对锁定的表进行插入或者更新都会报错；</li>
<li>其他会话也可以读这个表，但是对此次表的更新操作将阻塞，其他会话可以读写其他未锁定的表；</li>
<li>一旦这个表锁释放，其他会话对这个表的操作会立即执行；</li>
</ul>
</li>
</ul>
</li>
<li><p>写锁：</p>
<ul>
<li>lock table table_name write;</li>
<li>写锁后的现象：<ul>
<li>当前会话，可以对当前加的锁表进行读写操作，不能对没有加锁的表进行读写操作；</li>
<li>其他会话，可以对未加锁的表进行读写操作，但是不能对加锁的表进行读写操作，会阻塞；</li>
</ul>
</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>加上读锁，会阻塞写；而写锁会阻塞读写；</li>
</ul>
</li>
<li><p>分析</p>
<ul>
<li><p>show statue like ‘table%’  查看table_locks_waited 和table_locks_immediate状态变量分析</p>
</li>
<li><p><strong>table_locks_waited</strong>表示出现表级锁争用而等待的次数，不能立即获取锁的次数；</p>
</li>
<li><p>table_locks_immediate:表示表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1；</p>
</li>
<li><p>Myisam的读写锁调度是写优先，不适合做写为主表的引擎，因为写表后，其他线程不能做任何操作；</p>
</li>
</ul>
</li>
<li><p>InnoDB 使用行锁：</p>
<ul>
<li><p>使用方式如下：</p>
<ul>
<li><p>select *  from test_inno where name=’hello’ for update;</p>
<ul>
<li>当为name列设置索引了话，那么这时候就是行锁， 其他事务可以对其他行进行读写;</li>
<li>当没有为name列设置索引了话，那么这时候就是表锁，其他事务将不能对其他行进行写；</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/sanyuesan0000/article/details/90235335" target="_blank" rel="noopener">可重复读如何实现的</a></p>
</li>
</ul>
</li>
<li><p>问题！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">并发下单时，仓库中的库存量发生了意外的变化？？？？？</span><br><span class="line">在默认的可重复读事务隔离级别下，两个事务在快照读的情况下，都不能访问其他事务的插入，更新，和删除操作，而实际需要一个事务提交后，需要及时的获取更新后的值，因此，将事务的隔离级别设置为读提交；之所以mysql使用默认的可重复读的隔离级别，因为binlog的主从复制在读提交的隔离级别下，出现过bug,mysql5.0版本；</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h1 id="5-Innodb核心特性"><a href="#5-Innodb核心特性" class="headerlink" title="5. Innodb核心特性"></a>5. Innodb核心特性</h1><ul>
<li><p>MVCC</p>
</li>
<li><p>Clustered Index</p>
</li>
<li><p>更改缓冲</p>
</li>
<li><p>多个缓冲区</p>
</li>
<li><p>行级锁</p>
</li>
<li><p>事务</p>
</li>
<li><p>查询高速缓存</p>
</li>
<li><p>复制</p>
</li>
<li><p>备份（热备份）</p>
</li>
<li><p>自动故障恢复</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select @@default_storage_engine;  #默认存储引擎</span><br><span class="line">set default_storage_engine=innodb; #修改当前会话引擎</span><br><span class="line">set global default_storage_engine=innodb; #修改全局，在新的会话中表现出来</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span>命令在mysql重启后，失效，如果需要永久配置，设置到配置文件；</span></span><br><span class="line">/etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_storage_engine=myisam;</span><br><span class="line">存储引擎是表级别的，可以在建表的时候指定某个存储引擎，同时也可以将一个表引擎修改成其他引擎；</span><br><span class="line">select table_schema, table_name, engine from information_schema.tables where table_shcema not in ('sys', 'mysql', 'information_schema', 'performance_schema'); # 查询所有库下表的表引擎；</span><br><span class="line"></span><br><span class="line">处理的mysql问题：碎片整理（delete操作产生的，经常删除数据，导致磁盘占用空间大，不释放）</span><br><span class="line">select table_schema, table_name, data_free from information_schema.tables; #查询碎片data_free</span><br><span class="line">可以通过 alter table table_name engine=innodb; </span><br><span class="line">方案： 对表归档(pt-archive工具），使用truncate方式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何批量修改表引擎,将zabbix库中所有表 innodb替换成tokudb</span></span><br><span class="line">select concat('alter table zabbix.', table_name, " engine tokudb;") from information_schema.tables where</span><br><span class="line">table_schema='zabbix' into outfile '/tmp/tokudb.sql';</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如何将所有非innodb业务表查询出来，并修改为innodb;</span></span><br><span class="line">select concat("alter table ", table_schema, ".", table_name, " engine=innodb;") from information_schema.tables where engine != 'InnoDB' and table_schema not in ('sys', 'performance_schema'， ‘information_schema', 'mysql') into outfile '/tmp/alter.sql';</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">InnoDB 将为每张表构建聚集索引（优化主键列的查询）</span><br><span class="line">一个表就是一个段，1个段由1个或者多个区组成，这些区不一定连续；	·1</span><br><span class="line">一个区就是连续的64page，1M</span><br><span class="line">一个page就是连续的4个block,16KB</span><br><span class="line">一个block就是连续的8个扇区；512B</span><br><span class="line">1）首先主键列，</span><br><span class="line">2）再次unique列</span><br><span class="line">3）最后是根据row id构建隐藏的列；</span><br><span class="line">作用：有了聚集索引之后，以后插入数据的时候，在同一个区内，按照id的顺序，有序的在磁盘存储数据，那么将来利用了聚集索引查找数据的时候，就是顺序I/O,查找的更快；</span><br><span class="line">构建聚集索引的过程：</span><br><span class="line"></span><br><span class="line">直接将数据行所在的数据页作为叶子结点，然后根据每个叶子结点中的最小值组成的范围构建枝结点，最后构建根节点；</span><br><span class="line">当我们使用主键作为查询条件时，会从根节点的范围公平的查找记录（找到每个主键使用的i/O次数一样）;</span><br><span class="line">而没有建立索引的情况下，会把全表所有页加载到内存，遍历查询，对于大表来说，非常低效；</span><br><span class="line"></span><br><span class="line">那么非主键列的查询如何优化？通过建立  辅助索引来优化非聚集索引列的查询；</span><br><span class="line">辅助索引建立的过程：</span><br><span class="line">	将主键和辅助索引列单独申请空间，先按照辅助索引列进行排序，建立叶子节点，然后构建枝节点，最后根节点，查询时候根据辅助索引列查询到辅助索引列和id,如果辅助索引能够完全覆盖查询结果时，不需要回表；如果想查询一条记录，不能完全覆盖到，那么需要回到聚集索引树结构根据id进行再次查询，这称之为回表操作，回表操作增加了磁盘I/O,将顺序I/O变成了随机I/O,数据页不在一个区，变成随机I/O；</span><br><span class="line">- 如何减少回表：</span><br><span class="line">	1）查询尽可能使用id主键查询；</span><br><span class="line">	2）设计合理的联合索引；完全覆盖查询结果；</span><br><span class="line">辅助索引的分类：</span><br><span class="line">	单列索引</span><br><span class="line">	联合索引</span><br><span class="line">		将id和多列拿出来构建索引树，然后先对第一列进行排序，如果第一列相同，再按照第二列进行排序，排好序后构建叶子节点，然后	   根据第一列的值的范围构建枝节点，最后构建根节点；比如(a,b,c)构建了联合索引，那么实际上是建立了，a,ab,abc的索引；</span><br><span class="line">	联合索引的注意点：</span><br><span class="line">		1）查询条件中，必须要包含联合索引最左列，至于是使用的部分根据查询不同而不同，要么所有列都走索引，要么部分列走索引；</span><br><span class="line">		2）构建联合索引，一定将值重复最少的列，作为联合索引的最左列；</span><br><span class="line">	前缀索引：</span><br><span class="line">		前缀索引，针对得是对列的值长度非常长建立索引时，可能导致索引数高度增高。</span><br><span class="line">		mysql建议索引树高度3-4层，最少2层(根节点和叶子节点)。容纳的数据量800w-1000w行，表的列有20-30列。</span><br><span class="line">		这时候，可以取前面部分字符作为索引生成条件；</span><br><span class="line">	b+tree的高度影响因素：</span><br><span class="line">		1）索引字段值较长：前缀索引</span><br><span class="line">		2）数据行过多： 建立分区表，归档表（pt-archive), 分布式架构</span><br><span class="line">		3）选择合适的数据类型：变长使用varchar,能使用enum的，使用它；</span><br><span class="line">		</span><br><span class="line">索引的建立是按照业务的需求来建立的，不能建立太多的索引原因有2：</span><br><span class="line">1）：更新，和删除的时候，可能影响索引树的结构</span><br><span class="line">2）：优化器选择索引上可能出现偏差，导致没有按照预期列走索引；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询索引：</span><br><span class="line">	desc table_name;</span><br><span class="line">	Key列：  PRI(聚集索引)  UML(辅助索引)   UNI(唯一索引)</span><br><span class="line">	show index from table_name;</span><br><span class="line">建立索引：</span><br><span class="line">	alter table table_name add index idx_name(name);</span><br><span class="line">	alter table table_name add index idx_n_c(name, country);联合索引</span><br><span class="line">	alter table table_name add index idx_d(district(5)); # 大字段100个字符，取前5个，主要用于like的查询；前缀索引</span><br><span class="line">删除索引</span><br><span class="line">	alter table table_name drop index idx_name;</span><br><span class="line">	</span><br><span class="line">压测命令：100个人，并发查询200次</span><br><span class="line">mysqlslap --defaults-file=/etc/my.cnf --concurrency=100 --iterations=1 --create-schema='test'</span><br><span class="line">--query="select * from test.t100w where ke='780p'" engine=innodb</span><br><span class="line">--number-of-queries=200 -uroot -p123456 -verbose</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql InnoDB共享表空间大小查看</span><br><span class="line">select @@innodb_data_file_path;</span><br><span class="line">ibdata1:12M:autoextend</span><br><span class="line">初始化之前，在my.cnf加入配置</span><br><span class="line">innodb_data_file_path = ibdata1:1G;ibdata2:1G:autoextend;</span><br><span class="line">在运行之后，数据库扩展多个ibdata文件方式一样：</span><br><span class="line">innodb_data_file_path=ibdata1:128M;idbdata2:128M;ibdata3:128M:autoextend;</span><br><span class="line">设置过之后，可能报错，因为第一个不一定是128M,已经在使用的共享表空间要按照实际大小来设置，用完之后，使用第二个，然后第三个，使用完后，自动扩展；</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个表存储分 独立表空间，和共享表空间，每个表空间就是一个段，每个段有多个区，每个区有连续的页，每页就是连续的block,对应于连续的扇区；</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="6-利用拷贝表空间的方式恢复数据"><a href="#6-利用拷贝表空间的方式恢复数据" class="headerlink" title="6. 利用拷贝表空间的方式恢复数据"></a>6. 利用拷贝表空间的方式恢复数据</h1>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有建表语句和idb文件，就可以恢复里面的数据</span><br><span class="line"></span><br><span class="line">1) 利用建表语句创建一个一模一样的表</span><br><span class="line">   create table table_name</span><br><span class="line">2) 删除这张空表的表空间</span><br><span class="line">	alter table test.t1 discard tablespace;</span><br><span class="line">3) 拷贝准备好的ibd,修改权限，导入表空间</span><br><span class="line">	alter table test.t1 import tablespace;</span><br><span class="line">	</span><br><span class="line">备份建表语句</span><br><span class="line">mysqldump -uroot -p -B test --no-data &gt; test.sql</span><br><span class="line"></span><br><span class="line">表空间删除</span><br><span class="line">select concat(&quot;alter table &quot;, table_schema, &#39;.&#39;)</span><br></pre></td></tr></table></figure>
<h1 id="7-事务生命周期"><a href="#7-事务生命周期" class="headerlink" title="7. 事务生命周期"></a>7. 事务生命周期</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select @@autocommit;  # 1.默认提交开启 ，这个功能就是自动添加begin, commit语句在每个操作语句之前，之后；</span><br><span class="line">1）显式开启事务</span><br><span class="line">begin; start transcation; # 都可以</span><br><span class="line">DML(insert, update, delete, select)</span><br><span class="line">commit;</span><br><span class="line">rollback;</span><br><span class="line">2) 一些非事务语句将导致自动隐式提交</span><br><span class="line">DDL语句 （Alter, create, drop)</span><br><span class="line">DCL语句 （grant, revoke, set password)</span><br><span class="line">锁语句（lock tables, unlock tables)</span><br><span class="line">truncate table;</span><br><span class="line">load data infile;</span><br><span class="line">select for update;</span><br><span class="line"></span><br><span class="line">3) 隐式回滚：</span><br><span class="line">会话关闭</span><br><span class="line">数据库宕机</span><br><span class="line">事务语句执行失败；</span><br><span class="line"></span><br><span class="line">事务的隔离级别：</span><br><span class="line">RU:</span><br><span class="line">会引发：脏读，不可重复读，幻读；</span><br><span class="line">脏读：读取到了其他事务没有提交的改变，违背了事务的隔离性，一致性；</span><br><span class="line">不可重复读：读取到了其他事务提交的改变，违背了事务的隔离性，一致性；</span><br><span class="line">幻读：一个事务更新数据后，出现了其他事务插入数据的幻行； 违背了事务的隔离性，一致性；</span><br><span class="line">RC:</span><br><span class="line">会引发：不可重复读，幻读；</span><br><span class="line">RR:</span><br><span class="line">利用的是Undo的一致性快照读，是MVCC的重要功能；</span><br><span class="line">完美解决幻读的方案：加入GAP锁，next-lock，这些功能是在辅助索引上实现的；</span><br><span class="line">在索引列（name)上  update test set num=25 where num &gt; 25;</span><br><span class="line">另外一个事务插入了一个大于 num&gt;25的值，将因为GAP锁而锁住，</span><br><span class="line">SR:</span><br><span class="line">永久修改隔离级别：</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">transaction_isolation='read-committed'</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对象锁：</span><br><span class="line">	MDL:(元数据锁),修改元数据时，DDL(alter) </span><br><span class="line">	table lock: 表锁，DDL,备份（FTWRL全局表锁），lock tables t1 read;(手动加锁)，行级锁升级为表锁；</span><br><span class="line">	row lock:  行级锁，聚集索引上的锁；</span><br><span class="line">	gap lock:  间隙锁，普通辅助索引列的范围锁(也不能是唯一锁),范围超过（15%-30%），可能导致表锁；</span><br><span class="line">	next lock: 下一键锁，普通辅助索引的范围锁（gap lock + row lock)</span><br></pre></td></tr></table></figure>

<h1 id="8-存储引擎核心参数"><a href="#8-存储引擎核心参数" class="headerlink" title="8.存储引擎核心参数"></a>8.存储引擎核心参数</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">innodb_flush_log_at_trx_commit=1/0/2 redo log flush到磁盘的参数</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置1 ：每次事务提交的时候，刷到redo <span class="built_in">log</span> ，同时flsh to disk;</span></span><br><span class="line">innodb_flush_method=fsync/O_DSYNC/O_DIRECT/ ：控制mysql刷写磁盘时，是否使用 os buffer</span><br><span class="line">fsync: （默认值，当buffer pool设置太大时，有可能会发生OOM)</span><br><span class="line">	buffer pool的数据写磁盘的时候，需要先经过os buffer,然后写磁盘(经过os buffer,需要申请buffer pool的大小)</span><br><span class="line">	redo buffer的数据写磁盘的时候，需要先经过os buffer,然后写磁盘</span><br><span class="line">O_DIRECT:（防止出现问题，设置次选项,生产上设置此选项）</span><br><span class="line">	buffer pool的数据写磁盘的时候，直接写磁盘，跨过OS buffer；</span><br><span class="line">	redo buffer的数据写磁盘的时候，经过os buffer,然后写磁盘；</span><br><span class="line">	</span><br><span class="line">innodb_buffer_pool_size :数据缓冲区大小，缓冲数据也和索引页，mysql最大的内存区域；生产上75%一下；</span><br><span class="line">show engine innodb status\G</span><br></pre></td></tr></table></figure>

<h1 id="9-日志管理"><a href="#9-日志管理" class="headerlink" title="9.日志管理"></a>9.日志管理</h1><h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1.错误日志"></a>1.错误日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">默认位置 select @@datadir/hostname.err;</span><br><span class="line">配置位置：vim /etc/my.cnf</span><br><span class="line">log_error=/tmp/mysql.log</span><br></pre></td></tr></table></figure>

<h3 id="2-binlog日志：记录了数据库变化性质的日志（DDL-DCL-DML-是逻辑性质的日志"><a href="#2-binlog日志：记录了数据库变化性质的日志（DDL-DCL-DML-是逻辑性质的日志" class="headerlink" title="2.binlog日志：记录了数据库变化性质的日志（DDL,DCL,DML),是逻辑性质的日志"></a>2.binlog日志：记录了数据库变化性质的日志（DDL,DCL,DML),是逻辑性质的日志</h3><p>应用：数据恢复，主从复制中使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf  # 8.0之前，没有开启，生产上建议开启；8.0之后，默认开启 select @@log_bin;</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=7  #开启binlog需要参数</span><br><span class="line">log_bin=/data/binlog/mysql-bin # 设置和data不同的目录，路径/data/binlog要首先创建，设置mysql.mysql权限；</span><br><span class="line">sync_binlog=1 #binlog日志刷磁盘策略，每次事务提交立即刷写binlog到磁盘</span><br><span class="line">binlog_format=raw # binlog的记录格式为row模式</span><br><span class="line"></span><br><span class="line">binlog 记录sql语句的分类：</span><br><span class="line">DDL: 原封不动的记录当前DDL(statement)</span><br><span class="line">DCL: 原封不动的记录当前DDL(statement)</span><br><span class="line">DML: 只记录已经提交事务DML(insert, update, delete)</span><br><span class="line"></span><br><span class="line">binlog三种记录格式</span><br><span class="line">1）statement（5.6默认）: SBR(statement based replication)，语句模式原封不定的记录当前DML</span><br><span class="line">2) row: (5.7默认)：RBR  :记录数据行的变化（用户看不懂，需要工具分析）</span><br><span class="line">3)mixed:</span><br><span class="line"></span><br><span class="line">statement: 可读性高，日志量少，不够严谨</span><br><span class="line">（statement 只记录update t1 set xxx=xxx where id&gt;1000)</span><br><span class="line">insert into t1 values(1, now())</span><br><span class="line">row: 可读性差，日志量大，足够严谨；（update t1 set xxx=xxx where id&gt;1000  一共500w行，row模式逐行记录）</span><br><span class="line">insert into t1 values(1, 2020-0-28 16:32:06) # 记录行具体变化；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看binlog的位置</span></span><br><span class="line">select @@log_bin_basename;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前有几个日志文件</span></span><br><span class="line">show binary logs;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前在使用的binlog;</span></span><br><span class="line">show master status;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看binlog的事件行为：</span></span><br><span class="line">show binlog events in 'mysql-bin.000001';</span><br><span class="line"></span><br><span class="line"> mysql -uroot -p123 -e "show binlog events in 'mysql-bin.000001'"|grep DROP 查看binlog中drop的事件；</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看binlog中具体内容</span></span><br><span class="line">mysqlbinlog mysql-bin.000001 &gt; /tmp/a.sql;</span><br><span class="line">vim /tmp/a.sql</span><br><span class="line"></span><br><span class="line">mysqlbinlog --base64-output=decode-rows -vvv mysql-bin.000001 &gt; /tmp/b.sql # 查看加密的DML操作；</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 滚动日志</span></span><br><span class="line">flush logs; # 生成一个新的binlog日志文件；</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据恢复：找到起点和终点位置</span></span><br><span class="line">mysql/bin/mysqlbinlog --start-position=219 --stop-position=1356 mysql-bin.000002 &gt; /tmp/b.sql</span><br><span class="line"></span><br><span class="line">set sql_log_bin=0;# 当前会话，临时不记录binlog;</span><br><span class="line">source /tmp/b.sql;</span><br><span class="line">set sql_log_bin=1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有几点需要注意：</span></span><br><span class="line">1.binlog中如果有对其他库的操作，如何提取出只有目标库的操作？</span><br><span class="line">-d bindb  ：加上参数只提取出bindb库的操作</span><br><span class="line">2.需要的日志在多个文件中分布</span><br><span class="line">用起点时间，终点时间，起点位置，终点位置，混合使用去确定</span><br></pre></td></tr></table></figure>

<h1 id="10-mysqldump"><a href="#10-mysqldump" class="headerlink" title="10. mysqldump"></a>10. mysqldump</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">连接参数： -u,-p,-S</span><br><span class="line">1. 全备参数 -A</span><br><span class="line">mysqldump -uroot -p123 -A &gt; /tmp/all.sql</span><br><span class="line">2. 备份一个或者库 -B</span><br><span class="line">mysqldump -uroot -p123 -B test &gt;/tmp/test.sql #备份test下的所有表，同时自动创建test库，use test;</span><br><span class="line">3. 备份库下一个或者多个表 </span><br><span class="line">mysqldump -uroot -p123 test &gt;/tmp/test.sql   # 备份test下的所有表,这条命令需要自己去创建库，并且use test;</span><br><span class="line">4. 高级参数</span><br><span class="line"></span><br><span class="line">--master-data=2 ：</span><br><span class="line">1. 将binlog 位置和文件名作为注释的方式写入到文件中；</span><br><span class="line">2. 将自动锁表和解锁；</span><br><span class="line">3. 配合single-transaction 减少锁表时间；</span><br><span class="line"></span><br><span class="line">--single-transaction: 对于InnoDB引擎开启一个独立事务，获取一致性快照，进行备份；</span><br><span class="line">-R, -E --triggers :备份存储过程，</span><br><span class="line">--max_allowed_packet=64M： 设置服务端向客户端发送包的大小，防止因表数据太大，导致</span><br><span class="line">1153- 错误 Got a packet bigger than 'max_allowed_packet'</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p -A --master-data=2 --single-transaction -R -E --triggers --max_allowed_packet=64M &gt; backup/full_bak.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GTID(Global Transaction ID): 已提交事务的编号；GTID= server_uuid: transaction_id</span><br><span class="line">用户记录binlog 中的是事务Id,用于主从复制</span><br><span class="line"></span><br><span class="line">select @@gtid_mode; # 默认关闭</span><br><span class="line">开启 vim /etc/my.inf</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true #保证主从数据的一致性；</span><br><span class="line"></span><br><span class="line">如何利用GTID 在多个binlog中截取需要的日志：</span><br><span class="line"></span><br><span class="line">1） 确定截取的GTID范围</span><br><span class="line">mysql-bin.000005 | 356 | Gtid           |      3306 |         421 | SET @@SESSION.GTID_NEXT= '9f53c030-f496-11ea-8f73-000c2964b59f:9'</span><br><span class="line"></span><br><span class="line">| mysql-bin.000003 |  586 | Gtid           |      3306 |         651 | SET @@SESSION.GTID_NEXT= '9f53c030-f496-11ea-8f73-000c2964b59f:3' |</span><br><span class="line">| mysql-bin.000003 |  651 | Query          |      3306 |         761 | create database gtdb charset utf8mb4  </span><br><span class="line">2）确定在哪些文件中执行这些操作</span><br><span class="line">mysql-bin.000003 mysql-bin.000004 mysql-bin.000005</span><br><span class="line">3) 开始截取</span><br><span class="line">mysql/bin/mysqlbinlog --include-gtids='9f53c030-f496-11ea-8f73-000c2964b59f:3-9' mysql-bin.000003 mysql-bin.000004 mysql-bin.000005 &gt; /tmp/gtid.sql</span><br><span class="line">4)开始执行sql</span><br><span class="line"> set sql_log_bin=0; #先关闭binlog，不记录接下来的操作</span><br><span class="line"> source /tmp/gtid.sql</span><br><span class="line"> 发现并没有执行成功</span><br><span class="line"> </span><br><span class="line">5)关闭gtid的幂等性检查，一旦binlog已经存在gtid,而我们截取出来的也有相同的gtid,那么就不会再次执行，跳过；</span><br><span class="line">使用--skip-gtids 可以截取没有gtid的binlog</span><br><span class="line"></span><br><span class="line">mysql/bin/mysqlbinlog --skip-gtids --include-gtids='9f53c030-f496-11ea-8f73-000c2964b59f:3-9' mysql-bin.000003 mysql-bin.000004 mysql-bin.000005 &gt; /tmp/gtid1.sql</span><br><span class="line">6)重新执行sql,成功恢复gtid数据库</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line">source /tmp/gtid1.sql</span><br><span class="line">set sql_log_bin=1;</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Flask_wtf的再学习</title>
    <url>/2020/10/12/Flask_wtf%E7%9A%84%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Flask-wtf的再学习"><a href="#Flask-wtf的再学习" class="headerlink" title="Flask_wtf的再学习"></a><center>Flask_wtf的再学习</center></h1><a id="more"></a>

<h2 id="1-flask-wtf与原生wtforms的区别"><a href="#1-flask-wtf与原生wtforms的区别" class="headerlink" title="1. flask_wtf与原生wtforms的区别"></a>1. flask_wtf与原生wtforms的区别</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化时，自动传入 request.form中的值</span></span><br><span class="line"><span class="comment"># 对于post请求来说，自己不再需要构造表单中的值</span></span><br><span class="line"><span class="comment"># 对于 原生wtforms来说</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, form=form)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    form = RegisterForm(formdata=request.form)</span><br><span class="line">    <span class="keyword">if</span> form.validate():</span><br><span class="line">        print(form.data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(form.errors)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))  </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对于flask_wtf的请求来说</span></span><br><span class="line"></span><br><span class="line">form = RegisterForm()   <span class="comment"># 在这里对于get请求来说，什么都没做，而对于post请求来说，自动完成formdata的传值；</span></span><br><span class="line"><span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">    print(form.data)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'index'</span>))</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">'register.html'</span>, form=form)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认开启了对CSRF的支持</span></span><br><span class="line"><span class="comment"># 在渲染模板时 ，使用 &#123;&#123; form.csrf_token &#125;&#125; 来构建隐藏字段的HTML</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提供了单文件上传的验证器 FileRequired, FileAllowed</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Alembic工具使用</title>
    <url>/2020/10/12/Alembic%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Alembic工具使用"><a href="#Alembic工具使用" class="headerlink" title="Alembic工具使用"></a><center>Alembic工具使用</center></h1><a id="more"></a>

<h2 id="1-初始化一个用于迁移的目录"><a href="#1-初始化一个用于迁移的目录" class="headerlink" title="1. 初始化一个用于迁移的目录"></a>1. 初始化一个用于迁移的目录</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">3</span> <span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, create_engine</span><br><span class="line">  <span class="number">4</span> <span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line">  <span class="number">5</span>  </span><br><span class="line">  <span class="number">6</span>  </span><br><span class="line">  <span class="number">7</span> engine = create_engine(</span><br><span class="line">  <span class="number">8</span>     <span class="string">'mysql+pymysql://root:123456@localhost:3306/sutdy_alembic'</span></span><br><span class="line">  <span class="number">9</span> )</span><br><span class="line"> <span class="number">10</span>  </span><br><span class="line"> <span class="number">11</span> Base = declarative_base(bind=engine)                                                                                                                                                               </span><br><span class="line"> <span class="number">12</span>  </span><br><span class="line"> <span class="number">13</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line"> <span class="number">14</span>     __tablename__ = <span class="string">'user'</span></span><br><span class="line"> <span class="number">15</span>     id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line"> <span class="number">16</span>     name = Column(String(<span class="number">10</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"> <span class="number">17</span>     pwd = Column(String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"> <span class="number">18</span>     age = Column(Integer, default=<span class="number">18</span>)</span><br><span class="line"> <span class="number">19</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alembic init alembics</span><br><span class="line"><span class="comment"># 然后修改 alembic.ini文件</span></span><br><span class="line">sqlalchemy.url = mysql+pymysql://root:<span class="number">12345678</span>@localhost:<span class="number">3306</span>/study_alembic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改alembics/versions/env.py 中target_metadata的值</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">sys.path.append(os.path.dirname(os.path.dirname(__fiel__)))</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> Base</span><br><span class="line">target_metadata = Base.metadata</span><br></pre></td></tr></table></figure>

<h2 id="2-生成-迁移文件"><a href="#2-生成-迁移文件" class="headerlink" title="2. 生成 迁移文件"></a>2. 生成 迁移文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alembic revision --autogenerate -m <span class="string">"create table user"</span></span><br></pre></td></tr></table></figure>

<h2 id="3-按照迁移文件中的操作，生成数据表"><a href="#3-按照迁移文件中的操作，生成数据表" class="headerlink" title="3. 按照迁移文件中的操作，生成数据表"></a>3. 按照迁移文件中的操作，生成数据表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同时将迁移版本号记录到数据表 alembic_version中</span></span><br><span class="line">alembic upgrade head</span><br></pre></td></tr></table></figure>

<h2 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4.其他命令"></a>4.其他命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alembic current：当前的版本号</span><br><span class="line">alembic heads :当前head指向的版本号</span><br><span class="line">alembic downgrade <span class="number">-1</span>:向下降级到前一个版本号</span><br></pre></td></tr></table></figure>

<h2 id="5-当修改了表结构，需要重新生成迁移文件"><a href="#5-当修改了表结构，需要重新生成迁移文件" class="headerlink" title="5. 当修改了表结构，需要重新生成迁移文件"></a>5. 当修改了表结构，需要重新生成迁移文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alembic revision --autogenerate -m <span class="string">"message"</span></span><br><span class="line">alembic upgrade head</span><br><span class="line"></span><br><span class="line"><span class="comment">#每次执行alembic revision前，要保证 alembic current与alembic heads指向的版本号一致</span></span><br><span class="line"><span class="comment">#如果不一致，将出现如下错误</span></span><br><span class="line">NFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">ERROR [alembic.util.messaging] Target database <span class="keyword">is</span> <span class="keyword">not</span> up to date.</span><br><span class="line">  FAILED: Target database <span class="keyword">is</span> <span class="keyword">not</span> up to date</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 解决方案</span></span><br><span class="line">alembic upgrade head</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不小心将迁移版本脚本删除，将会出现如下错误：</span></span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">ERROR [alembic.util.messaging] Can<span class="string">'t locate revision identified by '</span>eb7194a78e21<span class="string">'</span></span><br><span class="line"><span class="string">  FAILED: Can'</span>t locate revision identified by <span class="string">'eb7194a78e21'</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 可以通过修改表 alembic_version中的版本号(读取了表中alembic_version的版本记录，但是在versions文件中没有找到这个文件),可以通过修改alembic_version表中的记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先根据 alembic heads的输出确定版本号，然后修改表alembic_version中的记录;</span></span><br><span class="line">update alembic_version set version_number=<span class="string">'版本号'</span></span><br></pre></td></tr></table></figure>

<h2 id="6-flask-migrate使用"><a href="#6-flask-migrate使用" class="headerlink" title="6. flask-migrate使用"></a>6. flask-migrate使用</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pipenv install flask-migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. flask db init 只能执行一次，如果已经执行过，再执行将输出如下：</span></span><br><span class="line">No handlers could be found <span class="keyword">for</span> logger <span class="string">"root"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. flask db migrate -m "create table ..."</span></span><br><span class="line"><span class="comment"># 这个并没有生成对应的迁移文件，</span></span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">INFO  [alembic.env] No changes <span class="keyword">in</span> schema detected.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现上面的原因是因为如下： 没有将数据表定义导入 </span></span><br><span class="line"><span class="comment"># 需要添加 from models import User</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">  <span class="number">4</span>  </span><br><span class="line">  <span class="number">5</span> <span class="keyword">from</span> extensions <span class="keyword">import</span> db, migrate</span><br><span class="line">  <span class="number">6</span> <span class="keyword">from</span> confs <span class="keyword">import</span> BasicConfig</span><br><span class="line">  <span class="number">7</span>  </span><br><span class="line">  <span class="number">8</span> <span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="number">9</span>     app = Flask(__name__)</span><br><span class="line"> <span class="number">10</span>     app.config.from_object(BasicConfig)</span><br><span class="line"> <span class="number">11</span>     db.init_app(app)</span><br><span class="line"> <span class="number">12</span>     migrate.init_app(app, db)</span><br><span class="line"> <span class="number">13</span>     <span class="keyword">return</span> app</span><br><span class="line"><span class="comment"># 正常输出：</span></span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">INFO  [alembic.autogenerate.compare] Detected added table <span class="string">'user'</span></span><br><span class="line">  Generating /home/cgn/study_second_flask/migrations/versions/<span class="number">7</span>f1b29424810_create_table_user.py ...  done</span><br><span class="line"><span class="comment">#3. 然后执行迁移文件</span></span><br><span class="line">flask db upgrade </span><br><span class="line"></span><br><span class="line">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class="line">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class="line">INFO  [alembic.runtime.migration] Running upgrade  -&gt; 7f1b29424810, create table user</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ubuntu 18.04同版本多实例开始</title>
    <url>/2020/10/12/ubuntu%2018.04%E5%90%8C%E7%89%88%E6%9C%AC%E5%A4%9A%E5%AE%9E%E4%BE%8B%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="ubuntu-18-04同版本多实例开始"><a href="#ubuntu-18-04同版本多实例开始" class="headerlink" title="ubuntu 18.04同版本多实例开始"></a>ubuntu 18.04同版本多实例开始</h1><h2 id="1-创建data目录"><a href="#1-创建data目录" class="headerlink" title="1. 创建data目录"></a>1. 创建data目录</h2><ul>
<li><p>sudo mkdir -p /space/data/330{7..9}/data</p>
</li>
<li><p>sudo mkdir -p /space/binlog/330{7..9}</p>
</li>
</ul>
<h2 id="2-创建配置文件"><a href="#2-创建配置文件" class="headerlink" title="2.创建配置文件"></a>2.创建配置文件</h2><p> cat &gt; /space/data/3307/my.cnf &lt;&lt; EOF<br>[mysqld]<br>basedir=/space/database/mysql<br>datadir=/space/data/3307/data<br>socket=/tmp/mysql3307.sock<br>log_error=/space/data/3307/mysql.log<br>port=3307<br>server_id=7<br>log_bin=/space/binlog/3307/mysql-bin</p>
<p> cat &gt; /space/data/3308/my.cnf &lt;&lt; EOF<br>[mysqld]<br>basedir=/space/database/mysql<br>datadir=/space/data/3308/data<br>socket=/tmp/mysql3308.sock<br>log_error=/space/data/3308/mysql.log<br>port=3308<br>server_id=8</p>
<p> cat &gt; /space/data/3309/my.cnf &lt;&lt; EOF<br>[mysqld]<br>basedir=/space/database/mysql<br>datadir=/space/data/3309/data<br>socket=/tmp/mysql3309.sock<br>log_error=/space/data/3309/mysql.log<br>port=3309<br>server_id=9</p>
<h2 id="3-修改属主"><a href="#3-修改属主" class="headerlink" title="3. 修改属主"></a>3. 修改属主</h2><p>space/data# chown -R mysql.mysql 330*</p>
<p>/space/binlog# chown -R mysql.mysql 330*</p>
<h2 id="4-初始化之前准备"><a href="#4-初始化之前准备" class="headerlink" title="4. 初始化之前准备"></a>4. 初始化之前准备</h2><p>mv /etc/my.cnf  /etc/my.cnf.bak  # 初始化也会读这文件；</p>
<h2 id="5-初始化数据"><a href="#5-初始化数据" class="headerlink" title="5.初始化数据"></a>5.初始化数据</h2><p>mysql/bin/mysqld –initialize-insecure –user=mysql –datadir=/space/data/3307/data –basedir=/space/database/mysql</p>
<p>mysql/bin/mysqld –initialize-insecure –user=mysql –datadir=/space/data/3308/data –basedir=/space/database/mysql</p>
<p>mysql/bin/mysqld –initialize-insecure –user=mysql –datadir=/space/data/3309/data –basedir=/space/database/mysql</p>
<h2 id="5-使用systemctl管理"><a href="#5-使用systemctl管理" class="headerlink" title="5. 使用systemctl管理"></a>5. 使用systemctl管理</h2><p>/etc/systemd/system/mysqld3307.service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 [Service]                                                                                                                                                                                  </span><br><span class="line">2 User=mysql</span><br><span class="line">3 Group=mysql</span><br><span class="line">4 ExecStart=/space/database/mysql/bin/mysqld --defaults-file=/space/data/3309/my.cnf</span><br><span class="line">5 LimitNOFILE=5000</span><br></pre></td></tr></table></figure>



<h2 id="6-开启多实例"><a href="#6-开启多实例" class="headerlink" title="6. 开启多实例"></a>6. 开启多实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1）</span><br><span class="line">systemctl start mysqld3307</span><br><span class="line">systemctl start mysqld3308</span><br><span class="line">systemctl start mysqld3309</span><br><span class="line">2）检查server_id是否不同：</span><br><span class="line">mysql -S /tmp/mysql3307.sock  -e 'select @@server_id' -uroot</span><br><span class="line">mysql -S /tmp/mysql3308.sock  -e 'select @@server_id' -uroot</span><br><span class="line">mysql -S /tmp/mysql3309.sock  -e 'select @@server_id' -uroot</span><br><span class="line">3）检查主库binlog是否开启</span><br><span class="line"> mysql -S /tmp/mysql3307.sock -e "select @@log_bin" -uroot;</span><br><span class="line"> </span><br><span class="line">4）主库建立复制用户</span><br><span class="line">mysql -S /tmp/mysql3307.sock -e "grant replication slave on *.* to repl@'192.168.0.%' identified by '123'" -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认用户是否建立成功</span></span><br><span class="line">mysql -S /tmp/mysql3307.sock -e "select user,host from mysql.user" -uroot -p </span><br><span class="line">5）主库备份恢复到从库</span><br><span class="line"> </span><br><span class="line"> mysqldump -uroot -p -S /tmp/mysql3307.sock -A --master-data=2 --single-transaction -R -E --triggers --max_allowed_packet=64M &gt; /tmp/full3307.sql</span><br><span class="line"> mysql -uroot -S /tmp/mysql3308.sock &lt; /tmp/full3307.sql </span><br><span class="line"> </span><br><span class="line">6）从库：告知从库复制连接信息和要复制的起点信息</span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST='192.168.0.111',</span><br><span class="line">  MASTER_USER='repl',</span><br><span class="line">  MASTER_PASSWORD='123',</span><br><span class="line">  MASTER_PORT=3307,</span><br><span class="line">  MASTER_LOG_FILE='mysql-bin.000002',</span><br><span class="line">  MASTER_LOG_POS=691,</span><br><span class="line"><span class="meta">#</span><span class="bash">  MASTER_CONNECT_RETRY=10;(可选参数)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看从库要复制的起点</span></span><br><span class="line">grep "\-- CHANGE MASTER TO" /tmp/full3307.sql </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000002', MASTER_LOG_POS=691;</span><br><span class="line">7） 从库：开启专用的复制线程</span><br><span class="line">mysql -S /tmp/mysql3308.sock -uroot</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">8) 从库验证主从状态：</span><br><span class="line">mysql -S /tmp/mysql3308.sock -uroot -e "show slave status\G" |grep Running:</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line">如果搭建失败：，执行以下命令，重新开始</span><br><span class="line">mysql -S /tmp/mysql3308.sock -e "stop slave;reset slave all;"</span><br></pre></td></tr></table></figure>

<h2 id="7-主从复制的原理"><a href="#7-主从复制的原理" class="headerlink" title="7.主从复制的原理"></a>7.主从复制的原理</h2><h3 id="1-从库中有关的文件"><a href="#1-从库中有关的文件" class="headerlink" title="1.从库中有关的文件"></a>1.从库中有关的文件</h3><ul>
<li>relay_log_basename ：默认在从库的数据目录中，设置此参数可自定义文件名,用来存储接收的binlog;<ul>
<li>自定义文件名: relay_log_basename=</li>
</ul>
</li>
<li>master.info: 默认在从库的数据目录中，存放的是连接主库的信息和已经接收binlog位置点信息<ul>
<li>默认以文件的形式，可以存放到表中，进行优化</li>
<li>master_info_repository=FILE/TABLE</li>
</ul>
</li>
<li>relay-info.log: 记录从库回放到relay-log的位置点，默认在从库数据目录下<ul>
<li>relay_log_info_repository=FILE/TABLE 进行配置</li>
</ul>
</li>
</ul>
<h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1) 从库： 使用change master to IP,port,user,password,binlog位置信息写入 master.info中；</span><br><span class="line">执行start slave(开启s_IO, s_SQL)</span><br><span class="line">2）从库：连接主库；</span><br><span class="line">3）主库：分配dump_thread专门和从库 s_IO通信</span><br><span class="line">	show processlist; </span><br><span class="line">4）从库： IO线程请求binlog日志</span><br><span class="line">5）主库： dump_t 接收请求，截取日志，返回s_IO</span><br><span class="line">6)从库：IO线程接收binlog，日志放到TCP/IP缓存中，返回ack给主库，主库工作完成；</span><br><span class="line">7）从库：IO线程将binlog写入到relay-info.log中，并更新master.info,IO线程完成；</span><br><span class="line">8）从库：SQL线程读取relay-info.log，获取上次执行到得到位置点</span><br><span class="line">9）从库：SQL线程向后执行新的relay-info.log,再次更新relay-info.log,表示应用到从库中的位置点信息；</span><br><span class="line"></span><br><span class="line">从库中：</span><br><span class="line">参数 relay_log_purge=ON,定期删除应用过的relay-log,默认开启</span><br><span class="line">主库：实时监测binlog变化，有变化，发信号给从库；</span><br></pre></td></tr></table></figure>

<h3 id="3-监控主从的状态"><a href="#3-监控主从的状态" class="headerlink" title="3.监控主从的状态"></a>3.监控主从的状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">主库：</span><br><span class="line">show processlist</span><br><span class="line">show slave hosts;</span><br><span class="line"></span><br><span class="line">从库：show slave status \G</span><br><span class="line">		从库连接主库的信息，来自于master.info</span><br><span class="line">                  Master_Host: 192.168.0.111</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000002</span><br><span class="line">          Read_Master_Log_Pos: 866</span><br><span class="line">          </span><br><span class="line">          从库relay-log.info的执行情况，来自于relay-log.info，用来判断主从延时的判断信息</span><br><span class="line">               Relay_Log_File: ubuntu-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 495</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000002</span><br><span class="line">                Exec_Master_Log_Pos: 866</span><br><span class="line">               Seconds_Behind_Master: 0</span><br><span class="line">        </span><br><span class="line">        从库线程状态,具体错误信息</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">                     Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">               </span><br><span class="line">               </span><br><span class="line">         过滤复制相关，只想复制某些库</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">  </span><br><span class="line">        用来设置从库延时复制的相关信息</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">   </span><br><span class="line">           GTID 相关复制信息</span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set:</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>各种算法使用</title>
    <url>/2020/10/08/%E5%90%84%E7%A7%8D%E7%AE%97%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="算法使用"><a href="#算法使用" class="headerlink" title="算法使用"></a><center>算法使用<center></h1><h2 id="1-查找算法"><a href="#1-查找算法" class="headerlink" title="1. 查找算法"></a>1. 查找算法</h2><ul>
<li><p>顺序查找，对于默认的列表方法<strong>index</strong>, 就是使用此方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂度： O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_search</span><span class="params">(li, val)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> ind, v <span class="keyword">in</span> enumerate(li):</span><br><span class="line">        <span class="keyword">if</span> v == val:</span><br><span class="line">            <span class="keyword">return</span> ind</span><br><span class="line"></span><br><span class="line">alist = range(<span class="number">10</span>)</span><br><span class="line">print(line_search(alist, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>二分查找算法, 时间复杂度 $O(log_2n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 前提条件：列表必须有序，才能使用.</span></span><br><span class="line"><span class="comment"># 时间复杂度 O(logn)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(li, val)</span>:</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = len(li) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= j:</span><br><span class="line">        mid = (i + j) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            j = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-排序算法"><a href="#2-排序算法" class="headerlink" title="2. 排序算法"></a>2. 排序算法</h2><h3 id="1-Low-算法"><a href="#1-Low-算法" class="headerlink" title="1. Low 算法"></a>1. Low 算法</h3><ul>
<li><p>冒泡排序, 时间复杂度:    $O(n^2)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    num = len(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(num -i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j + <span class="number">1</span>]:</span><br><span class="line">                li[j], li[j + <span class="number">1</span>] = li[j + <span class="number">1</span>], li[j]</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择排序, 时间复杂度: $O(n^2)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    num = len(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">1</span>): <span class="comment"># 要循环多少趟，n个元素要循环 n - 1趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, num):<span class="comment"># 从第一个元素开始，遍历到最后一个元素，和待比较区域中的第一个元素进行比较</span></span><br><span class="line">           <span class="keyword">if</span> li[j] &lt; li[i]:</span><br><span class="line">               li[i], li[j] = li[j], li[i]</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入排序，时间复杂度$O(n^2)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    num = len(li)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, num): <span class="comment"># 从第一个元素开始，遍历到最后一个元素，将每个元素都插入到手中牌中响应的位置上</span></span><br><span class="line">        i = j - <span class="number">1</span>  <span class="comment"># 手中牌中最大牌的下标</span></span><br><span class="line">        tmp = li[j]</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> li[i] &gt; tmp: <span class="comment"># 不超过界限同时，如果大于tmp时</span></span><br><span class="line">            li[i + <span class="number">1</span>] = li[i] <span class="comment"># 将li[i] 往后移，</span></span><br><span class="line">            i -= <span class="number">1</span> <span class="comment"># i向前移位</span></span><br><span class="line">        li[i + <span class="number">1</span>] = tmp <span class="comment"># 跳出循环后，将tmp值放回到对应的位置</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-厉害的算法"><a href="#2-厉害的算法" class="headerlink" title="2. 厉害的算法"></a>2. 厉害的算法</h3><ul>
<li><p>快速排序,时间复杂度 $O(nlog_2n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(li, start, end)</span>:</span></span><br><span class="line">    i = start</span><br><span class="line">    j = end</span><br><span class="line">    tmp = li[start]</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> li[j] &gt;= tmp <span class="keyword">and</span> i &lt; j:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[i] = li[j]</span><br><span class="line">        <span class="keyword">while</span> li[i] &lt;= tmp <span class="keyword">and</span> i &lt; j:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        li[j] = li[i]</span><br><span class="line">    li[i] = tmp</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(li, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        mid = partition(li, start, end)</span><br><span class="line">        quick_sort(li, start, mid - <span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid + <span class="number">1</span>, end)</span><br></pre></td></tr></table></figure>
</li>
<li><p>堆排序，时间复杂度 $O(nlog_2n)$</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向下调整函数，用来使堆结构重新成为大根堆或者小根堆 ,就是用来给堆顶元素找到一个合适的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift_down</span><span class="params">(li, low, high)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :param li: 列表结构</span></span><br><span class="line"><span class="string">    :param low: 堆顶元素</span></span><br><span class="line"><span class="string">    :param high: 堆的最后一个元素</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    i = low   <span class="comment"># i指向它的堆顶</span></span><br><span class="line">    j = <span class="number">2</span> * i + <span class="number">1</span> <span class="comment"># j指向它的左孩子节点</span></span><br><span class="line">    tmp = li[low]  <span class="comment"># 先将堆顶元素取出</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment">#循环条件，不能让它的孩子节点超过最后一个元素</span></span><br><span class="line">        <span class="comment"># 在它的孩子节点中找到最大的节点</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j + <span class="number">1</span>] &gt; li[j]: <span class="comment">#保证孩子右节点存在</span></span><br><span class="line">            j = j + <span class="number">1</span> <span class="comment"># 让j 指向右孩子</span></span><br><span class="line">        <span class="comment"># 让tmp 与他的孩子节点进行比较，</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j  <span class="comment"># i指向下一层，也就是j指向的位置</span></span><br><span class="line">            j = <span class="number">2</span> * i + <span class="number">1</span> <span class="comment"># 重新更新他的孩子节点位置</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp  <span class="comment"># tmp值归位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(li)</span>:</span></span><br><span class="line">    <span class="comment"># 1. 建立堆</span></span><br><span class="line">    num = len(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((num - <span class="number">2</span>) // <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):   <span class="comment">#从最后一个叶子节点的父节点开始，倒序循环</span></span><br><span class="line">        sift_down(li, i, num - <span class="number">1</span>)  <span class="comment"># 构建大根堆</span></span><br><span class="line">    <span class="comment"># 2. 循环取出堆顶元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        li[i], li[<span class="number">0</span>] = li[<span class="number">0</span>], li[i] <span class="comment"># 将堆顶和最后一个元素交换</span></span><br><span class="line">        sift_down(li, <span class="number">0</span>, i - <span class="number">1</span>) <span class="comment"># 交换后，重新构建大根堆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">alist = range(<span class="number">30</span>)</span><br><span class="line">random.shuffle(alist)</span><br><span class="line">print(alist)</span><br><span class="line"></span><br><span class="line">heap_sort(alist)</span><br><span class="line">print(alist)</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>人的弱点</title>
    <url>/2020/10/08/%E4%BA%BA%E7%9A%84%E5%BC%B1%E7%82%B9/</url>
    <content><![CDATA[<h1 id="伪勤奋的表现"><a href="#伪勤奋的表现" class="headerlink" title="伪勤奋的表现"></a><center>伪勤奋的表现</center></h1><a id="more"></a>

<h2 id="1-花大量的时间做事情中最容易的环节，还到处炫耀"><a href="#1-花大量的时间做事情中最容易的环节，还到处炫耀" class="headerlink" title="1. 花大量的时间做事情中最容易的环节，还到处炫耀"></a>1. 花大量的时间做事情中最容易的环节，还到处炫耀</h2><ul>
<li>没有功劳也有苦劳</li>
</ul>
<h2 id="2-以准备的名义拖延，看上去很忙但事情并没有任何进展"><a href="#2-以准备的名义拖延，看上去很忙但事情并没有任何进展" class="headerlink" title="2. 以准备的名义拖延，看上去很忙但事情并没有任何进展"></a>2. 以准备的名义拖延，看上去很忙但事情并没有任何进展</h2><h2 id="3-从来不检验工作成果，不知道做得好做得坏"><a href="#3-从来不检验工作成果，不知道做得好做得坏" class="headerlink" title="3. 从来不检验工作成果，不知道做得好做得坏"></a>3. 从来不检验工作成果，不知道做得好做得坏</h2><ul>
<li>只顾闷头拉车，不会抬头看天</li>
</ul>
<h2 id="4-读了很多书，但从不总结规律"><a href="#4-读了很多书，但从不总结规律" class="headerlink" title="4. 读了很多书，但从不总结规律"></a>4. 读了很多书，但从不总结规律</h2><ul>
<li>即使总结了规律，也没有用到实践中。</li>
</ul>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Django中Form组件</title>
    <url>/2020/09/14/Django%E4%B8%ADForm%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django中form组件"><a href="#Django中form组件" class="headerlink" title="Django中form组件"></a><center>Django中form组件</center></h1><a id="more"></a>

<h2 id="1-Django中form组件的作用"><a href="#1-Django中form组件的作用" class="headerlink" title="1. Django中form组件的作用"></a>1. Django中form组件的作用</h2><ul>
<li>验证表单中的数据</li>
<li>生成html标签</li>
<li>保留上次提交的值</li>
<li>初始化表单显示内容</li>
</ul>
<h2 id="2-如何使用form"><a href="#2-如何使用form" class="headerlink" title="2. 如何使用form"></a>2. 如何使用form</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> Form, fields</span><br><span class="line"><span class="keyword">from</span> django.forms <span class="keyword">import</span> widgets</span><br><span class="line"><span class="keyword">from</span> Two.models <span class="keyword">import</span> Grade</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = fields.CharField(label=<span class="string">'学生姓名:'</span>, max_length=<span class="number">20</span>,</span><br><span class="line">                            error_messages=&#123;</span><br><span class="line">                                <span class="string">'required'</span>: <span class="string">'学生姓名不能为空'</span>,</span><br><span class="line">                                <span class="string">'max_length'</span>: <span class="string">'学生字段最大长度为20'</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">    age = fields.IntegerField(label=<span class="string">'学生年龄:'</span>, initial=<span class="number">18</span>, min_value=<span class="number">18</span>, max_value=<span class="number">120</span>,</span><br><span class="line">                              error_messages=&#123;</span><br><span class="line">                                  <span class="string">'required'</span>: <span class="string">'学生年龄字段不能为空'</span>,</span><br><span class="line">                                  <span class="string">'min_value'</span>: <span class="string">'最小值为18'</span>,</span><br><span class="line">                                  <span class="string">'max_value'</span>: <span class="string">'最大值为120'</span>,</span><br><span class="line">                                  <span class="string">'invalid'</span>: <span class="string">'字段必须是数字'</span>,<span class="comment"># 数据格式错误的通用写法</span></span><br><span class="line">                              &#125;)</span><br><span class="line">    grade_id = fields.IntegerField(label=<span class="string">'班级:'</span>, widget=widgets.Select(choices=Grade.objects.values_list(<span class="string">'id'</span>, <span class="string">'name'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Field 字段</span></span><br><span class="line">	required=<span class="literal">True</span>  <span class="comment">#字段不能为空</span></span><br><span class="line">    widget=<span class="literal">None</span>    <span class="comment">#生成html使用的插件      </span></span><br><span class="line">    error_messages=<span class="literal">None</span>  <span class="comment">#自定义错误信息</span></span><br><span class="line">    initial=<span class="literal">None</span>         <span class="comment">#初始值   </span></span><br><span class="line">    validators=() <span class="comment">#自定义验证规则</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#下面这些基本不使用，这是当&#123;&#123; form.as_p &#125;&#125;才会用到的字段</span></span><br><span class="line">    label=<span class="literal">None</span>           <span class="comment"># label标签对应的值</span></span><br><span class="line">    help_text=<span class="string">''</span>         <span class="comment"># 生成的html后添加一段帮助信息</span></span><br><span class="line">    show_hidden_initial=<span class="literal">False</span> </span><br><span class="line">    localize=<span class="literal">False</span>   <span class="comment">#本地化</span></span><br><span class="line">    disabled=<span class="literal">False</span>   <span class="comment">#是否可编辑</span></span><br><span class="line">    label_suffix=<span class="literal">None</span> <span class="comment">#标签的后缀 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">CharField(Field)</span><br><span class="line">	max_length = <span class="literal">None</span></span><br><span class="line">    min_length = <span class="literal">None</span></span><br><span class="line">    strip = <span class="literal">True</span>  <span class="comment">#去掉用户输入空白</span></span><br><span class="line">    </span><br><span class="line">IntegerField(Field)</span><br><span class="line">	max_value = <span class="literal">None</span></span><br><span class="line">    min_value = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">DateField(BaseTemporalField)   <span class="comment"># 格式如2016-09-11</span></span><br><span class="line"></span><br><span class="line">RegexField(CharField):</span><br><span class="line">    regex   <span class="comment"># 自定义验证规则</span></span><br><span class="line">    max_length = <span class="literal">None</span></span><br><span class="line">    min_length = <span class="literal">None</span></span><br><span class="line">    error_message = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">EmailField(CharField)</span><br><span class="line"></span><br><span class="line">ImageField(CharField)</span><br><span class="line">	<span class="comment"># 需要PIL模块</span></span><br><span class="line">    <span class="comment"># 注意两点：</span></span><br><span class="line">    	<span class="comment"># 1. form表单中的定义 enctype="multipart/form-data"</span></span><br><span class="line">        <span class="comment"># 2. view函数中， obj = MyForm(request.POST, request.FILES)</span></span><br><span class="line">FileField(Field):</span><br><span class="line">    allow_empty_file = <span class="literal">False</span>  <span class="comment">#是否允许空文件</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">GenericIPAddressField</span><br><span class="line">SlugField(CharField)  <span class="comment"># 数字，字母，下划线，减号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用插件</span></span><br><span class="line">widget = widgets.RaidoSelect(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>))) <span class="comment">#提交到后台的值是1， 2</span></span><br><span class="line">widget = widgets.Select(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)))</span><br><span class="line"><span class="comment">#其他写法</span></span><br><span class="line">fields.CharField(choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)), initial=<span class="number">2</span>, widget=widgets.Select)</span><br><span class="line">widget = widgets.MultipleChoiceField(</span><br><span class="line">choices =((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)), initial=[<span class="number">1</span>], widget=widgets.SelectMultiple)</span><br><span class="line"></span><br><span class="line">widget = widgets.CheckboxInput()</span><br><span class="line"></span><br><span class="line">fields.MultipleChoiceField(</span><br><span class="line">initial=[<span class="number">2</span>],</span><br><span class="line">choices=((<span class="number">1</span>, <span class="string">'上海'</span>), (<span class="number">2</span>, <span class="string">'北京'</span>)),</span><br><span class="line">widget = widgets.CheckboxSelectMultiple</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用选择标签时，如何实时更新选项中的内容?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = fields.CharField(label=<span class="string">'学生姓名:'</span>, max_length=<span class="number">20</span>,</span><br><span class="line">                            error_messages=&#123;</span><br><span class="line">                                <span class="string">'required'</span>: <span class="string">'学生姓名不能为空'</span>,</span><br><span class="line">                                <span class="string">'max_length'</span>: <span class="string">'学生字段最大长度为20'</span>,</span><br><span class="line">                            &#125;)</span><br><span class="line">    age = fields.IntegerField(label=<span class="string">'学生年龄:'</span>, initial=<span class="number">18</span>, min_value=<span class="number">18</span>, max_value=<span class="number">120</span>,</span><br><span class="line">                              error_messages=&#123;</span><br><span class="line">                                  <span class="string">'required'</span>: <span class="string">'学生年龄字段不能为空'</span>,</span><br><span class="line">                                  <span class="string">'min_value'</span>: <span class="string">'最小值为18'</span>,</span><br><span class="line">                                  <span class="string">'max_value'</span>: <span class="string">'最大值为120'</span>,</span><br><span class="line">                                  <span class="string">'invalid'</span>: <span class="string">'字段必须是数字'</span>,</span><br><span class="line">                              &#125;)</span><br><span class="line">    grade_id = fields.ChoiceField(label=<span class="string">'班级:'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(StudentForm, self).__init__(*args, **kwargs)</span><br><span class="line">        self.fields[<span class="string">'grade_id'</span>].widget.choices = Grade.objects.values_list(<span class="string">'id'</span>, <span class="string">'name'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-验证表单中的数据"><a href="#3-验证表单中的数据" class="headerlink" title="3. 验证表单中的数据"></a>3. 验证表单中的数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditStudentView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        stu = Student.objects.filter(id=id).values().first()</span><br><span class="line">        print(stu)</span><br><span class="line">        <span class="comment"># form = StudentForm(initial=&#123;'name': stu.name, 'age': stu.age, 'grade_id': stu.grade_id&#125;)</span></span><br><span class="line">        form = StudentForm(initial=stu)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'edit_student.html'</span>, dict(form=form))</span><br><span class="line">        <span class="comment"># return HttpResponse('test')</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, id)</span>:</span></span><br><span class="line">        form = StudentForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid(): <span class="comment"># 进行验证表单中的数据</span></span><br><span class="line">            <span class="comment"># 验证通过的数据通过form.cleaned_data获取</span></span><br><span class="line">            Student.objects.filter(id=id).update(**form.cleaned_data)</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">'two:student_list'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'edit_student.html'</span>, dict(form=form))</span><br></pre></td></tr></table></figure>

<h2 id="4-生成HTML标签"><a href="#4-生成HTML标签" class="headerlink" title="4. 生成HTML标签"></a>4. 生成HTML标签</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.name.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.name &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> form.errors.name %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.name %&#125;</span><br><span class="line">            &#123;&#123; error &#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;&#123; form.age.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.age &#125;&#125;&lt;br&gt;</span><br><span class="line">    &#123;% <span class="keyword">if</span> form.errors.age %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> error <span class="keyword">in</span> form.errors.age %&#125;</span><br><span class="line">            &#123;&#123; error &#125;&#125;&lt;br&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;&#123; form.grade_id.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.grade_id &#125;&#125;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交修改"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="5-保留上次填写的值"><a href="#5-保留上次填写的值" class="headerlink" title="5. 保留上次填写的值"></a>5. 保留上次填写的值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 &#123;&#123; form.age &#125;&#125;&lt;br&gt;  保证有上次填写的值</span></span><br></pre></td></tr></table></figure>

<h2 id="6-初始化表单显示的值"><a href="#6-初始化表单显示的值" class="headerlink" title="6.初始化表单显示的值"></a>6.初始化表单显示的值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grade = Grade.objects.filter(id=id).first()</span><br><span class="line"> <span class="keyword">if</span> grade:</span><br><span class="line">     <span class="comment"># 初始字段的值如果再做校验，使用data参数</span></span><br><span class="line">     <span class="comment"># 如果不做校验，使用initial参数</span></span><br><span class="line">     form = GradeForm(initial=&#123;<span class="string">'name'</span>: grade.name&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="7-自定义验证规则"><a href="#7-自定义验证规则" class="headerlink" title="7. 自定义验证规则"></a>7. 自定义验证规则</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.validators <span class="keyword">import</span> RegexValidator</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字段中有validators属性使用已有的RegexValidator</span></span><br><span class="line">name = fields.CharField(</span><br><span class="line">        label=<span class="string">'测试'</span>,</span><br><span class="line">        validators= [RegexValidator(<span class="string">r'^\d+$'</span>, <span class="string">'请输入数字'</span>)]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mobile_validate</span><span class="params">(value)</span>:</span></span><br><span class="line">    mobile_re = re.compile(<span class="string">r'^(13\d|15\d\|17[6-8]|18\d|14[57])\d&#123;8&#125;$'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> mobile_re.match(value):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'手机格式错误'</span>)</span><br><span class="line">        </span><br><span class="line">phone = fields.CharField(validators=[mobile_validate],</span><br><span class="line">                        <span class="comment"># 指定class属性和placeholder 为这个input</span></span><br><span class="line">                        widget=widgets.TextInput(attrs=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;,</span><br><span class="line">                                                 <span class="string">'placeholder'</span>: <span class="string">'手机号码'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="8-使用ajax提交数据"><a href="#8-使用ajax提交数据" class="headerlink" title="8. 使用ajax提交数据"></a>8. 使用ajax提交数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> id=<span class="string">"f1"</span>&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;用户名:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="text" name="username" value="&#123;&#123; form.data.username &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.username.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;密码:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="password" name="pwd" value="&#123;&#123; form.data.pwd &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.pwd.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;重复密码:&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="password" name="pwd_repeat" value="&#123;&#123; form.data.pwd_repeat &#125;&#125;"&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; form.errors.pwd_repeat.0 &#125;&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; error &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type="submit" value="注册" id="submit"&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;a onclick="submitForm();"&gt;提交&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script src="&#123;% static 'js/jquery.min.js' %&#125;"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &#123;<span class="comment">#$(function () &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#  $('#submit').click(function (event) &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      event.preventDefault();#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      $.post(&#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          url: '/one/ajax_login/',#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          data: $('#f1').serialize(),#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          success: function (data) &#123;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#              console.log(data);#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#          &#125;#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#      &#125;)#&#125;</span></span><br><span class="line">    &#123;<span class="comment">#  &#125;)#&#125;</span></span><br><span class="line"></span><br><span class="line">    function submitForm() &#123;</span><br><span class="line">        $(<span class="string">'.c1'</span>).remove(); <span class="comment">#先移除之前生成的标签（错误信息）</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'/one/ajax_login/'</span>,</span><br><span class="line">            type: <span class="string">'POST'</span>,</span><br><span class="line">            dataType: <span class="string">'json'</span>, <span class="comment">#将返回的数据装变为json对象</span></span><br><span class="line">            data: $(<span class="string">'#f1'</span>).serialize(), <span class="comment"># 将表单中的所有字段进行提交，包括csrf_token</span></span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data.status)&#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">#遍历data.msg #封装了错误信息</span></span><br><span class="line">                    $.each(data.msg, function (index, value) &#123;</span><br><span class="line">                        console.log(index, value);</span><br><span class="line">                        <span class="comment"># 创建&lt;span&gt;标签，指定它的内容</span></span><br><span class="line">                        var tag = $(<span class="string">'&lt;span class="c1"&gt;&lt;/span&gt;'</span>).text(value[<span class="number">0</span>]);</span><br><span class="line">                        console.log(tag);</span><br><span class="line">                        <span class="comment"># 然后将这个标签添加到指定标签的后面</span></span><br><span class="line">                        $(<span class="string">'input[name="'</span> + index + <span class="string">'"]'</span>).after(tag);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 处理ajax请求，并返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_login</span><span class="params">(request)</span>:</span></span><br><span class="line">    res = &#123;</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'OK'</span>,</span><br><span class="line">        <span class="string">'msg'</span>: <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'register.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        form = forms.RegisterForm(request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            print(form.cleaned_data)</span><br><span class="line">            res[<span class="string">'msg'</span>] = form.cleaned_data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">            print(type(form.errors))</span><br><span class="line">            res[<span class="string">'status'</span>] = <span class="literal">False</span></span><br><span class="line">            res[<span class="string">'msg'</span>] = form.errors</span><br><span class="line">        <span class="keyword">import</span> json</span><br><span class="line">        str_json = json.dumps(res)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(str_json)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中的session</title>
    <url>/2020/09/10/django%E4%B8%AD%E7%9A%84session/</url>
    <content><![CDATA[<h1 id="Django-中的session"><a href="#Django-中的session" class="headerlink" title="Django 中的session"></a><center>Django 中的session</center></h1><a id="more"></a>

<h2 id="1-Django中的session原理"><a href="#1-Django中的session原理" class="headerlink" title="1. Django中的session原理"></a>1. Django中的session原理</h2><p>session是保存在服务器段的数据，用来保持会话，记住登录状态，由于cookie使请求可以携带查询信息，与session配合实现有状态的请求；</p>
<p>实现过程：</p>
<ul>
<li>生成随机字符串</li>
<li>设置cookie发送给客户端</li>
<li>同时在服务器端进行保存，将随机字符串作为session的key</li>
<li>实现过程通过设置就完成上面的操作：request.session[‘user_id’] = user.id</li>
</ul>
<p>当浏览器携带cookie再次进行访问，可以通过cookie找到对应的值进行匹配</p>
<ul>
<li>从cookie中获取值</li>
<li>根据这个值与存储session中的值进行比较，找到就通过</li>
<li>通过request.session.get(‘user_id’) ，找到就通过</li>
</ul>
<h2 id="2-session的默认配置"><a href="#2-session的默认配置" class="headerlink" title="2. session的默认配置"></a>2. session的默认配置</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cookie name. This can be whatever you want.</span></span><br><span class="line">SESSION_COOKIE_NAME = <span class="string">'sessionid'</span> <span class="comment"># 浏览器中设置的cookie的键名</span></span><br><span class="line">SESSION_COOKIE_AGE = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">2</span> <span class="comment"># 默认过期时间是14天</span></span><br><span class="line"><span class="comment"># A string like ".example.com", or None for standard domain cookie.</span></span><br><span class="line">SESSION_COOKIE_DOMAIN = <span class="literal">None</span></span><br><span class="line"><span class="comment"># Whether the session cookie should be secure (https:// only).</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># The path of the session cookie.</span></span><br><span class="line">SESSION_COOKIE_PATH = <span class="string">'/'</span></span><br><span class="line"><span class="comment"># Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)</span></span><br><span class="line">SESSION_COOKIE_HTTPONLY = <span class="literal">True</span></span><br><span class="line"><span class="comment"># Whether to save the session data on every request.</span></span><br><span class="line">SESSION_SAVE_EVERY_REQUEST = <span class="literal">False</span> <span class="comment">#如果为True,每次请求，将以当前的时间为准更新过期时间</span></span><br><span class="line"><span class="comment"># Whether a user's session cookie expires when the Web browser is closed.</span></span><br><span class="line">SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="literal">False</span></span><br><span class="line"><span class="comment"># The module to store session data</span></span><br><span class="line"><span class="comment"># session存储的位置 django_session表中</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br><span class="line"><span class="comment"># Directory to store session files if using the file session module. If None,</span></span><br><span class="line"><span class="comment"># the backend will use a sensible default.</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span></span><br><span class="line"><span class="comment"># class to serialize session data</span></span><br><span class="line">SESSION_SERIALIZER = <span class="string">'django.contrib.sessions.serializers.JSONSerializer'</span></span><br></pre></td></tr></table></figure>

<h2 id="3-session支持5种存储后端"><a href="#3-session支持5种存储后端" class="headerlink" title="3. session支持5种存储后端"></a>3. session支持5种存储后端</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 数据库(默认)</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.db'</span></span><br><span class="line"><span class="comment"># 2. 缓存</span></span><br><span class="line"><span class="comment"># 一旦过期，redis中的key将自动删除</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cache'</span></span><br><span class="line">SESSION_CACHE_ALIAS = <span class="string">'default'</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'BACKEND': 'django.core.cache.backends.db.DatabaseCache',</span></span><br><span class="line">        <span class="comment"># 'LOCATION': 'test_cache',</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'redis://127.0.0.1:6379/1'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'CLIENT_CLASS'</span>: <span class="string">'django_redis.client.DefaultClient'</span>,</span><br><span class="line">            <span class="string">'PASSWORD'</span>: <span class="string">'test'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 文件</span></span><br><span class="line"><span class="comment"># 默认通过在tempfil.gettempdir() 也就是/tmp目录下创建一个文件（文件名是由sessionid与值组成）</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.file'</span></span><br><span class="line"><span class="comment"># Directory to store session files if using the file session module. If None,</span></span><br><span class="line"><span class="comment"># the backend will use a sensible default.</span></span><br><span class="line">SESSION_FILE_PATH = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 缓存+数据库(同时将session存放到缓存和数据库中)</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.cached_db'</span>	</span><br><span class="line"><span class="comment"># 5. 加密cookie</span></span><br><span class="line">SESSION_ENGINE = <span class="string">'django.contrib.sessions.backends.signed_cookies'</span></span><br></pre></td></tr></table></figure>

<h2 id="4-session的操作"><a href="#4-session的操作" class="headerlink" title="4. session的操作"></a>4. session的操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据库中过期的session删除，不会将通过文件存储的session删除</span></span><br><span class="line">request.session.clear_expired()</span><br><span class="line"></span><br><span class="line"><span class="comment"># session 生成的随机字符串</span></span><br><span class="line">request.session.session_key</span><br><span class="line"><span class="comment"># 删除当前用户数据库中的所有session数据，可以有参数 session_key仅仅对session_key指定的删除</span></span><br><span class="line">request.session.delete()</span><br><span class="line"><span class="comment"># 设置超时时间</span></span><br><span class="line">request.session.set_expiry(value)</span><br><span class="line"><span class="comment"># 可以设置整数，多少秒过期</span></span><br><span class="line"><span class="comment"># 可以设置timedelta，具体的日期</span></span><br></pre></td></tr></table></figure>

<h2 id="5-自动让session过期的思路："><a href="#5-自动让session过期的思路：" class="headerlink" title="5. 自动让session过期的思路："></a>5. 自动让session过期的思路：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过让cookie过期或者删除cookie</span></span><br><span class="line">request.session.flush() <span class="comment"># 通过删除cookie的方式，数据库中的记录存在</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过在数据库中删除session对应的key，或者value都可以完成</span></span><br><span class="line">request.session.clear()  <span class="comment"># 删除session中key对应的值,数据库中的记录还在，只能通过过期的方法进行删除了</span></span><br><span class="line"><span class="keyword">del</span> request.session[<span class="string">'user_id'</span>] <span class="comment">#同上</span></span><br></pre></td></tr></table></figure>

<h2 id="6-cookie原理"><a href="#6-cookie原理" class="headerlink" title="6. cookie原理"></a>6. cookie原理</h2><p>客户端浏览器保存的键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set_cookie(self, key, value=<span class="string">''</span>, max_age=<span class="literal">None</span>, expires=<span class="literal">None</span>, path=<span class="string">'/'</span>,</span><br><span class="line">                   domain=<span class="literal">None</span>, secure=<span class="literal">False</span>, httponly=<span class="literal">False</span>):</span><br><span class="line">set_signed_cookie(self, key, value, salt=<span class="string">''</span>, **kwargs)</span><br><span class="line"><span class="comment"># 参数：</span></span><br><span class="line"><span class="comment"># key:键名</span></span><br><span class="line"><span class="comment"># value:键值</span></span><br><span class="line"><span class="comment">#max_age: 过期秒</span></span><br><span class="line"><span class="comment"># expires: datetime对象</span></span><br><span class="line"><span class="comment"># path：cookie生效的路径，默认可以被所有URI访问</span></span><br><span class="line"><span class="comment"># domain: 指定哪个域名可以使用，默认当前域名</span></span><br><span class="line"><span class="comment"># secure: 只有通过HTTPS才能使用这个cookie</span></span><br><span class="line"><span class="comment"># httponly: 能否被javascrit访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器端获取cookie</span></span><br><span class="line">request.COOKIES.get(key)</span><br><span class="line">request.get_signed_cookie(key, salt=<span class="string">'vlaue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除cookie</span></span><br><span class="line">response.delete_cookie(key)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中间件</title>
    <url>/2020/09/08/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="Django中间件"><a href="#Django中间件" class="headerlink" title="Django中间件"></a><center>Django中间件</center></h1><a id="more"></a>

<h1 id="1-Django中间件"><a href="#1-Django中间件" class="headerlink" title="1. Django中间件"></a>1. Django中间件</h1><p>django就是一个类，然后通过注册的方式进行使用，这个类有一些特殊方法</p>
<p>应用：对所有请求或者部分请求做批量化操作；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'my process_request'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_view'</span>)</span><br><span class="line">        print(callback, callback_args, callback_kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self,request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_exception '</span>)</span><br><span class="line">        print(exception)</span><br><span class="line">	<span class="comment"># 当访问的URI 返回的对象有render方法，那么将在执行render方法之前，会调用这个方法，然后执行render方法；</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_template_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_template_response'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, req)</span>:</span></span><br><span class="line">        self.req = req</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(self.req, <span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(request)</span>:</span></span><br><span class="line">    print(<span class="string">'test view func'</span>)</span><br><span class="line">    <span class="comment"># raise TypeError('test')</span></span><br><span class="line">    obj = Test(request)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware2</span><span class="params">(MiddlewareMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        print(<span class="string">'my process_reqeust 2'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_response 222'</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_view 222'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span><span class="params">(self, request, exception)</span>:</span></span><br><span class="line">        print(<span class="string">'test process_exception 222'</span>)</span><br><span class="line">        print(exception)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#setting.py进行注册使用         </span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">    <span class="string">'One.views.MyMiddleware'</span>,</span><br><span class="line">    <span class="string">'One.views.MyMiddleware2'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行顺序:当请求到来的时候，先执行所有中间件中的process_request,如果process_request有返回值，那么将直接停止向下执行，从当前的中间件开始从下到上，执行所有中间件的process_response返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># process_resposne必须有返回值</span></span><br><span class="line"><span class="comment"># 如果process_request没有返回值，那么执行顺序如下：</span></span><br><span class="line"><span class="comment">#从上到下 执行所有中间件的process_request, 如果有process_view,那么再从上到下执行所有中间件的process_view,接着执行当前URI对应的视图函数，如果没有process_exception，那么将返回响应，从下到上执行所有中间件的process_response</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在执行过程中出现异常，而中间件的执行顺序将如下：</span></span><br><span class="line"><span class="comment"># 如果中间件有process_exception,那么将从下到上开始执行所有中间件的process_exception,接着再从下到上执行所有中间件的process_response;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django缓存</title>
    <url>/2020/09/08/django%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Django缓存框架"><a href="#Django缓存框架" class="headerlink" title="Django缓存框架"></a><center>Django缓存框架</center></h1><a id="more"></a>

<h2 id="1-Django官方文档位置-django缓存"><a href="#1-Django官方文档位置-django缓存" class="headerlink" title="1. Django官方文档位置 django缓存"></a>1. Django官方文档位置 <a href="https://docs.djangoproject.com/en/3.1/topics/cache/" target="_blank" rel="noopener">django缓存</a></h2><h2 id="2-Django提供的内置缓存后端"><a href="#2-Django提供的内置缓存后端" class="headerlink" title="2. Django提供的内置缓存后端"></a>2. Django提供的内置缓存后端</h2><ul>
<li>database cache</li>
<li>filesystem cache</li>
<li>dummy cache</li>
<li>memcache </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用数据库缓存</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.core.cache.backends.db.DatabaseCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'test_cache'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立缓存表</span></span><br><span class="line">python manage.py createcachetable test_cache --dry-run <span class="comment">#查看建表语句</span></span><br><span class="line">python manage.py createcachetable test_cache  <span class="comment"># 创建缓存表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存使用</span></span><br><span class="line"><span class="comment"># 针对视图函数的使用</span></span><br><span class="line"><span class="comment"># timeout位置参数，时间s</span></span><br><span class="line"><span class="comment"># cache缓存后端，默认值 default</span></span><br><span class="line"><span class="comment"># key_prefix: 缓存key前缀</span></span><br><span class="line"><span class="meta">@cache_page(timeout, cache=default, key_prefix=None)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存某个key的使用</span></span><br><span class="line">value = cache.get(<span class="string">'key'</span>)</span><br><span class="line"><span class="keyword">if</span> value:</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    cache.set(<span class="string">'key'</span>, <span class="string">'hello, world'</span>, timeout=DEFAULT_TIMEOUT, version=<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">cache.add(<span class="string">'test_key'</span>, <span class="string">'new value'</span>) </span><br><span class="line"><span class="comment"># 当test_key不存在，添加这个key,返回True,</span></span><br><span class="line"><span class="comment"># 当test_key存在，返回False,不会添加或者修改已存在的test_key</span></span><br><span class="line">cache.get_many</span><br><span class="line">cache.set_many</span><br><span class="line">cache.delete(key, version=<span class="literal">None</span>) <span class="comment"># 删除指定的key，返回None,当key不存在，也返回None</span></span><br><span class="line">cache.delete_many()</span><br><span class="line">cache.clear() <span class="comment"># 删除所有key</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Django使用第三方-django-redis-作为缓存后端"><a href="#3-Django使用第三方-django-redis-作为缓存后端" class="headerlink" title="3. Django使用第三方 django-redis 作为缓存后端"></a>3. Django使用第三方 django-redis 作为缓存后端</h2><p> 查看<a href="https://github.com/jazzband/django-redis/blob/master/CHANGES.rst" target="_blank" rel="noopener">django-redis各个版本的改变</a>，找到适合Django版本的django-redis</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 django-redis为了支持 django1.11版本的使用，使用4.8.0版本</span></span><br><span class="line"><span class="comment"># 最新的django-redis 至少需要 django 2.2</span></span><br><span class="line"> pipenv install django-redis==<span class="number">4.8</span><span class="number">.0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="comment"># 'BACKEND': 'django.core.cache.backends.db.DatabaseCache',</span></span><br><span class="line">        <span class="comment"># 'LOCATION': 'test_cache',</span></span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'redis://127.0.0.1:6379/1'</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'CLIENT_CLASS'</span>: <span class="string">'django_redis.client.DefaultClient'</span>,</span><br><span class="line">            <span class="string">'PASSWORD'</span>: <span class="string">'test'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#其他的不需要改变，</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中csrf使用</title>
    <url>/2020/08/29/django%E4%B8%ADcsrf%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="django中csrf使用"><a href="#django中csrf使用" class="headerlink" title="django中csrf使用"></a><center>django中csrf使用</center></h1><a id="more"></a>

<h2 id="1-在视图函数中使用"><a href="#1-在视图函数中使用" class="headerlink" title="1. 在视图函数中使用"></a>1. 在视图函数中使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @csrf_exempt  # 跳过csrf验证</span></span><br><span class="line"><span class="meta">@csrf_protect   # 开启csrf验证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_form</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'use_form.html'</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        username = request.POST.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        print(username, password)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post success'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2-在类视图中使用"><a href="#2-在类视图中使用" class="headerlink" title="2. 在类视图中使用"></a>2. 在类视图中使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.utils.decorators <span class="keyword">import</span> method_decorator</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt, csrf_protect</span><br><span class="line"></span><br><span class="line"><span class="meta">@method_decorator(csrf_exempt, name='dispatch') #跳过csrf验证</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'login.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        username = request.POST.get(<span class="string">'user'</span>)</span><br><span class="line">        pwd = request.POST.get(<span class="string">'pwd'</span>)</span><br><span class="line">        print(username, pwd)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">'post success'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-使用ajax请求时，如何保证csrf"><a href="#3-使用ajax请求时，如何保证csrf" class="headerlink" title="3. 使用ajax请求时，如何保证csrf"></a>3. 使用ajax请求时，如何保证csrf</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 作为ajax的请求数据提交请求</span></span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(<span class="string">"#submit"</span>).click(function (event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            var csrf_token = $(<span class="string">'input[name=csrfmiddlewaretoken]'</span>).val();</span><br><span class="line">            var user = $(<span class="string">'input[name=user]'</span>).val();</span><br><span class="line">            var pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                <span class="string">'url'</span>: <span class="string">'&#123;% url '</span>use_class<span class="string">' %&#125;'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">"POST"</span>,</span><br><span class="line">                <span class="string">'data'</span>: &#123;</span><br><span class="line">                    <span class="string">'user'</span>: user,</span><br><span class="line">                    <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                    <span class="string">'csrfmiddlewaretoken'</span>: csrf_token,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'success'</span>: function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在请求头中添加，第二种方式</span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(<span class="string">'#submit'</span>).click(function (event) &#123;</span><br><span class="line">            event.preventDefault();</span><br><span class="line">            var cookie = $.cookie(<span class="string">'csrftoken'</span>);</span><br><span class="line">            var user = $(<span class="string">'input[name=user]'</span>).val();</span><br><span class="line">            var pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'&#123;% url '</span>use_class<span class="string">' %&#125;'</span>,</span><br><span class="line">                type: <span class="string">'POST'</span>,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    <span class="string">'X-CSRFToken'</span>: cookie,</span><br><span class="line">                &#125;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    <span class="string">'user'</span>: user,</span><br><span class="line">                    <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'success'</span>: function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'error'</span>: function (e) &#123;</span><br><span class="line">                    console.log(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="4-原理同flask相同"><a href="#4-原理同flask相同" class="headerlink" title="4. 原理同flask相同"></a>4. 原理同flask相同</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">通过在表单中添加&#123;% csrf_token %&#125;</span><br><span class="line">设置键为csrftoken的cookie;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中分页使用</title>
    <url>/2020/08/29/django%E4%B8%AD%E5%88%86%E9%A1%B5%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="django中分页"><a href="#django中分页" class="headerlink" title="django中分页"></a><center>django中分页</center></h1><a id="more"></a>

<h2 id="1-django内置分页"><a href="#1-django内置分页" class="headerlink" title="1. django内置分页"></a>1. django内置分页</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">        page_num = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">        article = Article.objects.all()</span><br><span class="line">        paginator = Paginator(article, <span class="number">10</span>)</span><br><span class="line">    <span class="comment"># per_page 每也显示的数据个数</span></span><br><span class="line">    <span class="comment"># count: 数据总数</span></span><br><span class="line">    <span class="comment"># num_pages: 总页数</span></span><br><span class="line">    <span class="comment"># page_range :页数的范围</span></span><br><span class="line">        print(<span class="string">'paginator.per_page is &#123;&#125;'</span>.format(paginator.per_page))</span><br><span class="line">        print(<span class="string">'paginator.count is &#123;&#125;'</span>.format(paginator.count))</span><br><span class="line">        print(<span class="string">'paginator.num_pages is &#123;&#125;'</span>.format(paginator.num_pages))</span><br><span class="line">        print(<span class="string">'paginator.page_range is &#123;&#125;'</span>.format(paginator.page_range))</span><br><span class="line">        page = paginator.page(page_num)</span><br><span class="line">    <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">        page = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> EmptyPage:</span><br><span class="line">        page = paginator.page(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'articles.html'</span>, dict(page=page))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> article <span class="keyword">in</span> page.object_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; article.id &#125;&#125; &#123;&#123; article.title &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&#123;% <span class="keyword">if</span> page.has_previous %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page.previous_page_number &#125;&#125;"&gt;上一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> page_number <span class="keyword">in</span> page.paginator.page_range %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page_number &#125;&#125;"&gt;&#123;&#123; page_number &#125;&#125;&lt;/a&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> page.has_next %&#125;</span><br><span class="line">    &lt;a href="&#123;% url 'get_articles' %&#125;?page=&#123;&#123; page.next_page_number &#125;&#125;"&gt;下一页&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以实现诸如上一页，下一页的功能，或者列出所有页码</span></span><br></pre></td></tr></table></figure>



<h2 id="2-自定义分页实现"><a href="#2-自定义分页实现" class="headerlink" title="2. 自定义分页实现"></a>2. 自定义分页实现</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每页展示固定页数的分页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageInfo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, page, per_page, total_count, display_page=<span class="number">11</span>)</span>:</span></span><br><span class="line">        <span class="comment"># page表示当前页, 防止出现无效字符串，负数页码</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.current_page = int(page)</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.current_page &lt;= <span class="number">0</span>:</span><br><span class="line">            self.current_page = <span class="number">1</span></span><br><span class="line">        <span class="comment"># per_page 表示每页的数量</span></span><br><span class="line">        self.per_page = per_page</span><br><span class="line">        <span class="comment"># total_count表示总的数据量</span></span><br><span class="line">        self.total_count = total_count</span><br><span class="line">        <span class="comment"># total_page 表示总页数</span></span><br><span class="line">        self.total_page = <span class="number">0</span></span><br><span class="line">        <span class="comment"># display_page 表示要显示的页数量</span></span><br><span class="line">        self.display_page = display_page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据索引的开始位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page</span><br><span class="line">    <span class="comment"># 数据结束的结束位置</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page</span><br><span class="line">    <span class="comment"># 计算数据的总页数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pages</span><span class="params">(self)</span>:</span></span><br><span class="line">        a, b = divmod(self.total_count, self.per_page)</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            self.total_page = a</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.total_page = a + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.total_page</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以当前页为准，总共要显示的页码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        half_page = (self.display_page - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        start_page = self.current_page - half_page</span><br><span class="line">        end_page = self.current_page + half_page + <span class="number">1</span></span><br><span class="line">        total_page = self.pages()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> total_page &lt; self.display_page:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = total_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.current_page &lt;= half_page:</span><br><span class="line">            start_page = <span class="number">1</span></span><br><span class="line">            end_page = self.display_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.current_page &gt;= (total_page - half_page):</span><br><span class="line">            start_page = total_page + <span class="number">1</span> - self.display_page</span><br><span class="line">            end_page = total_page + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> range(start_page, end_page)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_prev_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page - <span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">have_next_page</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page + <span class="number">1</span> &lt;= self.pages()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>django中的级联操作</title>
    <url>/2020/08/23/django%E4%B8%AD%E7%9A%84%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Django中的级联操作"><a href="#Django中的级联操作" class="headerlink" title="Django中的级联操作"></a><center>Django中的级联操作</center></h1><a id="more"></a>

<h2 id="1-一对一关系中的建立及默认级联操作"><a href="#1-一对一关系中的建立及默认级联操作" class="headerlink" title="1. 一对一关系中的建立及默认级联操作"></a>1. 一对一关系中的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Capital</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">40</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># c_country = models.OneToOneField(Country, null=True, on_delete=models.SET(9))</span></span><br><span class="line">    c_country = models.OneToOneField(Country, null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实现一对一关系原理：</span></span><br><span class="line"><span class="comment"># 建立外键c_country_id，同时加上unique约束；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认级联操作： on_delete默认值是models.CASCADE,当主表数据删除时，与主表有关联的从表数据也一同删除；</span></span><br><span class="line"><span class="comment">#其他级联操作有：</span></span><br><span class="line"><span class="comment"># on_delete:models.PROTECT ,设置受保护，当主表数据删除时，一旦存在有关联的从表数据，那么将受到保护，不会删除，同时报错；</span></span><br><span class="line"><span class="comment"># on_delete: models.DO_NOTHING，当主表数据删除，一旦有关联的从表数据，那么将报错IntegrityError，因为存在外键约束；</span></span><br><span class="line"><span class="comment"># on_delete: models.set_NULL, 当主表数据删除，一旦有关联的从表数据，那么将设置为NULL(前提是可以为NULL,否则也会报错)</span></span><br><span class="line"><span class="comment"># on_delete: models.set_DEFAULT，当主表数据删除，一旦有关联的从表数据，那么将设置为此字段的default值（前提是有default约束，否则也报错）</span></span><br><span class="line"><span class="comment"># on_delete: models.set(value),设置为一个值，主表数据删除，一旦有关联的从表数据时，那么将设置为value值；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于一对一关系来说，通过级联数据的获取：</span></span><br><span class="line"><span class="comment"># 通过主表对象获取从表对象：  主表object.从表表名(隐性属性，相当于flask中的backref)</span></span><br><span class="line"><span class="comment"># 通过从表对象获取主表对象：  从表object.级联字段(显性属性，默认根据此字段生成外键id(c_country_id))</span></span><br></pre></td></tr></table></figure>

<h2 id="2-一对多关系中的建立及默认级联操作"><a href="#2-一对多关系中的建立及默认级联操作" class="headerlink" title="2. 一对多关系中的建立及默认级联操作"></a>2. 一对多关系中的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_title = models.CharField(max_length=<span class="number">50</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 创建时间（当object.save(),此字段值将自动添加）</span></span><br><span class="line">    ctime = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 修改时间（当object.save(),此字段值将自动添加，修改的时候，自动将当前时间时间修改此字段）</span></span><br><span class="line">    atime = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line">    a_author = models.ForeignKey(Author)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 一对多关系来说，默认的级联行为也是 models.CASCADE</span></span><br><span class="line"><span class="comment"># 其他关系同上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过级联关系字段，获取关联的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过主表对象获取从表对象：  object.从表名_set.all()  (关系属性是隐性属性)</span></span><br><span class="line"><span class="comment"># 从表名_set 是 RelatedManager类实例；</span></span><br><span class="line"><span class="comment">#通过从表对象获取主表对象：  object.级联字段(显性属性，默认将使用此字段生成外键id)</span></span><br></pre></td></tr></table></figure>

<h2 id="3-多对多关系的建立及默认级联操作"><a href="#3-多对多关系的建立及默认级联操作" class="headerlink" title="3. 多对多关系的建立及默认级联操作"></a>3. 多对多关系的建立及默认级联操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 这个字段一方面用来作为第三张表的一部分，一方面还可以作为连表属性使用，表示teacher对象的学生记录</span></span><br><span class="line">    t_student= models.ManyToManyField(Student)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#实现方式，根据t_student作为第三张关联表的一部分存在，第三张关联表中自动将 两个外键字段作为联合唯一约束来实现；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认级联行为也是 CASCADE</span></span><br><span class="line"><span class="comment"># 通过级联关系字段，获取关联的对象：</span></span><br><span class="line"><span class="comment"># 主表获取从表： 依然是通过隐性属性表_set 来操作：</span></span><br><span class="line"><span class="comment"># 在多对多关系中，只有通过内置的多对多关系才能通过add 建立关系；</span></span><br><span class="line">teacher = Teacher.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">student.teacher_set.add(<span class="number">1</span>)  建立联系，<span class="comment"># 可以是多个参数add(1, 2, 3)</span></span><br><span class="line">student.teacher_set.add(teacher) 建立联系</span><br><span class="line"><span class="comment"># 如果想重置多个关系对象，使用set，参数必须是列表或者元祖</span></span><br><span class="line"> student.teacher_set.set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 这将以前的关系全部删除，然后设置新的关系</span></span><br><span class="line"><span class="comment"># 也可以通过对象 student.teacher_set.set((obj1, obj2, obj3))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除关系 通过 student.teacher_set.remove(1) 或者student.teacher_set.remove(teacher) 直接在数据库中生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部移除通过 student.teacher_set.clear()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#从表获取主表数据：</span></span><br><span class="line">teacher = Teacher.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line"><span class="comment"># 方法和主获取从的方式一模一样</span></span><br><span class="line">teacher.t_student.add()</span><br><span class="line">teacher.t_student.remove()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># values('id', 's_name')   获取查询字典的列表</span></span><br><span class="line"><span class="comment"># values_list('id', 's_name') 获取查询元祖的列表</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 另外可以通过自定义的方式定义多对多，自定义多对多关系，不能通过add建立关系</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher_Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t = models.ForeignKey(Teacher)  <span class="comment"># 加不加引号都可以</span></span><br><span class="line">    s = models.ForeignKey(<span class="string">'Student'</span>)</span><br><span class="line">    <span class="comment"># 自定义 联合唯一约束</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        unique_together = [</span><br><span class="line">            (<span class="string">'t'</span>, <span class="string">'s'</span>)</span><br><span class="line">        ]</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_students</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment">#第一种实现方案，低效，每次都要进行连表查询</span></span><br><span class="line">    teacher = Teacher.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line">    students = teacher.teacher_student_set.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> students:</span><br><span class="line">        print(item.s.s_name)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'get students'</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#还可以通过</span></span><br><span class="line">    student_list = Teacher_Student.objects.filter(s__s_name=<span class="string">'test2'</span>).values(<span class="string">'s__s_name'</span>, <span class="string">'t__t_name'</span>)</span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> student_list:</span><br><span class="line">        print(student[s__s_name], student[t__t_name])</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 也可以通过进行查询：</span></span><br><span class="line">    student_list = Teacher_Student.objects.filter(s__s_name=<span class="string">'test2'</span>).select_related(<span class="string">'t'</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对多和多对多的使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    a_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    c_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title  = models.CharField(<span class="string">'标题'</span>, max_length=<span class="number">50</span>)</span><br><span class="line">    category = models.ForeignKey(Category, verbose_name=<span class="string">'分类'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    tags = models.ManyToManyField(<span class="string">'Tag'</span>, verbose_name=<span class="string">'标签集合'</span>)</span><br><span class="line">    author = models.ForeignKey(Author, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">30</span>, null=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询所有文章对应的标签，分类，以及作者信息如何实现？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_articles</span><span class="params">(request)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 为了减少sql查询次数，减低响应时间，可以通过select_related 或者prefetch_related来实现</span></span><br><span class="line"><span class="comment"># select_related() 可以为空，或者可选的一个或者多个外键字段，不能对多对多字段使用；</span></span><br><span class="line"><span class="comment"># prefetch_related() 可以作用于外键或者多对多的字段</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查询id=3的文章对应的信息及分类和标签信息</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.filter(id=3).select_related('category').prefetch_related('tags')</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查询分类为category3下的所有文章信息及标签信息，</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.filter(category__c_name='category3').prefetch_related('tags')</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询分类为category3下的所有文章信息，同时标签是以tag开头的标签</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.all().filter(category__c_name='category3').prefetch_related(</span></span><br><span class="line">    <span class="comment">#     Prefetch('tags', queryset=Tag.objects.filter(t_name__startswith='tag')),</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line"><span class="comment"># 查询所有文章对应的分类，作者及其标签信息    </span></span><br><span class="line">    <span class="comment"># articles = Article.objects.select_related('category', 'author').prefetch_related('tags')</span></span><br><span class="line">    <span class="comment"># articles = Article.objects.select_related('category').prefetch_related('author')</span></span><br><span class="line">    articles = Article.objects.select_related(<span class="string">'category'</span>).select_related(<span class="string">'author'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'articles.html'</span>, dict(articles=articles))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对多关系 的第三种用法（借助内置ManyToManyField来实现自定义第三张表）</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 注意这里字段的书写顺序(先写Teacher表的外键，否则报错)</span></span><br><span class="line">    <span class="comment"># 通过使用students这个多对多字段，可以轻易实现查询和删除操作(也只能这样使用)</span></span><br><span class="line">    <span class="comment"># 不支持add,set,remove, 只能通过all,filter..clear</span></span><br><span class="line">    students = models.ManyToManyField(<span class="string">'Student'</span>, through=<span class="string">'Teacher_Student'</span>, through_fields=(<span class="string">'t'</span>, <span class="string">'s'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    s_name = models.CharField(max_length=<span class="number">20</span>, null=<span class="literal">False</span>)</span><br><span class="line">    teachers = models.ManyToManyField(<span class="string">'Teacher'</span>, through=<span class="string">'Teacher_Student'</span>, through_fields=(<span class="string">'s'</span>, <span class="string">'t'</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher_Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    t = models.ForeignKey(Teacher)</span><br><span class="line">    s = models.ForeignKey(<span class="string">'Student'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        unique_together = [</span><br><span class="line">            (<span class="string">'t'</span>, <span class="string">'s'</span>)</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 使用：</span></span><br><span class="line"><span class="comment"># 查询所有学生，同时和他们的老师名字信息等</span></span><br><span class="line"></span><br><span class="line">    student_list = Student.objects.prefetch_related(<span class="string">'teachers'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># return render(request, 'student.html', dict(teacher_list=teacher_list))</span></span><br><span class="line">   <span class="keyword">return</span> render(request, <span class="string">'student.html'</span>, dict(student_list=student_list))</span><br><span class="line"><span class="comment"># student.html文件如下：</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% <span class="keyword">for</span> student <span class="keyword">in</span> student_list %&#125;</span><br><span class="line">        &lt;li&gt;&#123;&#123; student.s_name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">for</span> teacher <span class="keyword">in</span> student.teachers.all %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; teacher.t_name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有老师，以及所教的所有学生，和上面的类似；</span></span><br></pre></td></tr></table></figure>

<h2 id="4-一对多关系的建立"><a href="#4-一对多关系的建立" class="headerlink" title="4. 一对多关系的建立"></a>4. 一对多关系的建立</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 使用related_name代替隐性属性article_set 来查询</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">'Author'</span>, related_name=<span class="string">'articles'</span>, null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 在一对多关系中，不能通过add方法建立关系</span></span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> article_list:</span><br><span class="line">        article.author_id = random.randint(<span class="number">1</span>, counts)</span><br><span class="line">        article.save()</span><br></pre></td></tr></table></figure>

<h2 id="5-extra使用"><a href="#5-extra使用" class="headerlink" title="5. extra使用"></a>5. extra使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中，where表示添加额外的查询条件，这个条件就是原生的sql语句，params是where的实际参数</span></span><br><span class="line"><span class="comment"># 其中 select表示添加额外的查询字段，select_params是select的实际参数</span></span><br><span class="line"><span class="comment"># order_by 添加排序字段</span></span><br><span class="line"></span><br><span class="line">articles = Article.objects.extra(</span><br><span class="line">        where=[<span class="string">"id=%s or id=%s"</span>],</span><br><span class="line">        params=[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">        select=&#123;<span class="string">'counts'</span>: <span class="string">'select count(1) from One_article where id &gt; %s'</span>&#125;,</span><br><span class="line">        select_params=[<span class="number">1</span>],</span><br><span class="line">        order_by=[<span class="string">'-id'</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        print(article.title, article.counts)</span><br></pre></td></tr></table></figure>

<h2 id="6-F-与Q"><a href="#6-F-与Q" class="headerlink" title="6. F 与Q"></a>6. F 与Q</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F, Q</span><br><span class="line"><span class="comment">#F用于引用表中的字段，更新时，获取原来的值</span></span><br><span class="line"></span><br><span class="line">Author.objects.all().update(age=F(<span class="string">"age"</span>) + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># Q 用来做复杂的逻辑运算</span></span><br><span class="line">articles = Article.objects.filter(Q(id=<span class="number">1</span>) | Q(title=<span class="string">'test7'</span>))</span><br><span class="line"><span class="comment"># 第二种方式</span></span><br><span class="line"></span><br><span class="line">    q1 = Q()</span><br><span class="line">    q1.connector = <span class="string">'OR'</span></span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">1</span>))</span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">2</span>))</span><br><span class="line">    q1.children.append((<span class="string">'id'</span>, <span class="number">9</span>))</span><br><span class="line"></span><br><span class="line">    q2 = Q()</span><br><span class="line">    q2.connector = <span class="string">'AND'</span></span><br><span class="line">    q2.children.append((<span class="string">'author_id'</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    con = Q()</span><br><span class="line">    con.add(q1, <span class="string">'AND'</span>)</span><br><span class="line">    con.add(q2, <span class="string">'AND'</span>)</span><br><span class="line"></span><br><span class="line">    articles = Article.objects.filter(con)</span><br></pre></td></tr></table></figure>

<h2 id="7-自关联如何定义和使用"><a href="#7-自关联如何定义和使用" class="headerlink" title="7. 自关联如何定义和使用"></a>7. 自关联如何定义和使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于一对多关系 定义 自关联</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 评论的内容</span></span><br><span class="line">    content = models.TextField()</span><br><span class="line">    <span class="comment"># 评论的作者</span></span><br><span class="line">    author = models.ForeignKey(<span class="string">'User'</span>)</span><br><span class="line">    <span class="comment"># 评论对应的文章</span></span><br><span class="line">    article = models.ForeignKey(<span class="string">'Article'</span>)</span><br><span class="line">    <span class="comment"># 评论对应的回复</span></span><br><span class="line">    comment = models.ForeignKey(<span class="string">'Comment'</span>, related_name=<span class="string">'replies'</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立关系 comment1的回复是comment2</span></span><br><span class="line">comment1 = Comment.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">comment2 = Comment.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">comment2.comment = comment1</span><br><span class="line">comment2.save()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 查询评论对应的所有回复</span></span><br><span class="line">comment = Comemnt.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">reply_list = comment.replies.all()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 对于多对多关系定义自关联</span></span><br><span class="line"><span class="comment"># 第一种，通过自定义的方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">20</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'女'</span>)</span><br><span class="line">    )</span><br><span class="line">    gender = models.BooleanField(choices=gender_choices)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">U2U</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    boy = models.ForeignKey(<span class="string">'User'</span>, related_name=<span class="string">'girls'</span>)</span><br><span class="line">    girl = models.ForeignKey(<span class="string">'User'</span>, related_name=<span class="string">'boys'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立多对多关系</span></span><br><span class="line">U2U.objects.create(boy_id=user_id, girl_id=id) <span class="comment">#第一种通过id</span></span><br><span class="line">U2U.objects.create(boy=boy_obj, girl=girl_obj) <span class="comment">#第二种通过obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">    <span class="keyword">if</span> gender: <span class="comment"># 如果是女生,查询对应的男生有哪些</span></span><br><span class="line">        user_list = user.boys.all()  <span class="comment"># 返回的是 U2Ud的QuerySet</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="comment"># 如果是男生，查询对应的女生有哪些</span></span><br><span class="line">        user_list = user.girls.all()</span><br><span class="line"><span class="comment"># 在对应的模板文件中遍历对应的元素</span></span><br><span class="line">    &#123;% <span class="keyword">for</span> user <span class="keyword">in</span> user_list %&#125;</span><br><span class="line">        &#123;% <span class="keyword">if</span> request.session.user_info.user_gender %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; user.boy.username &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">            &lt;li&gt;&#123;&#123; user.girl.username &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">        &lt;h2&gt;暂时没有&lt;/h2&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">#第二种方式使用内置的ManyToMany来建立</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">20</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    username = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    gender_choices = (</span><br><span class="line">        (<span class="number">0</span>, <span class="string">'男'</span>),</span><br><span class="line">        (<span class="number">1</span>, <span class="string">'女'</span>)</span><br><span class="line">    )</span><br><span class="line">    gender = models.BooleanField(choices=gender_choices)</span><br><span class="line">    m = models.ManyToManyField(<span class="string">'User'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 建立关系</span></span><br><span class="line">    user = User.objects.filter(id=<span class="number">1</span>).first()</span><br><span class="line">    girl1 = User.objects.filter(id=<span class="number">2</span>).first()</span><br><span class="line">    girl2 = User.objects.filter(id=<span class="number">3</span>).first()</span><br><span class="line">    girl3 = User.objects.filter(id=<span class="number">4</span>).first()</span><br><span class="line">    user.m.add(girl1)</span><br><span class="line">    user.m.add(girl2)</span><br><span class="line">    girl3.user_set.add(user)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line">    girls = user.m.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> girls:</span><br><span class="line">        print(item.username)</span><br><span class="line">    boys = girl1.user_set.all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> boys:</span><br><span class="line">        print(item.username)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_restful使用</title>
    <url>/2020/08/22/flask-restful%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Flask-restful使用"><a href="#Flask-restful使用" class="headerlink" title="Flask_restful使用"></a><center>Flask_restful使用</center></h1><a id="more"></a>

<h2 id="1-Rest-API规范是什么，在falsk中究竟如何实现？"><a href="#1-Rest-API规范是什么，在falsk中究竟如何实现？" class="headerlink" title="1. Rest API规范是什么，在falsk中究竟如何实现？"></a>1. Rest API规范是什么，在falsk中究竟如何实现？</h2><h2 id="2-flask中如何基于蓝图来实现rest-api"><a href="#2-flask中如何基于蓝图来实现rest-api" class="headerlink" title="2. flask中如何基于蓝图来实现rest api"></a>2. flask中如何基于蓝图来实现rest api</h2><h2 id="3-flask-restful如何对请求的数据进行类型检查？"><a href="#3-flask-restful如何对请求的数据进行类型检查？" class="headerlink" title="3. flask restful如何对请求的数据进行类型检查？"></a>3. flask restful如何对请求的数据进行类型检查？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>使用url定义资源，一般会将api作为url前缀或者将api加入主机名中，作为子域名；</span><br><span class="line"><span class="comment"># http://example.com/api  url前缀</span></span><br><span class="line"><span class="comment"># http://api.example.com  子域名</span></span><br><span class="line"><span class="number">2.</span>使用http方法描述操作</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取资源集合或者集合中某个元素，使用get方法，返回响应： 资源的表现层，200响应</span></span><br><span class="line"><span class="comment"># 集合中创建一个新成员，使用post方法，返回的响应是：指向新地址的表现层，首部Location字段为指向资源的url,201响应</span></span><br><span class="line"><span class="comment"># put方法： 更新某个资源，提供完整的资源数据，返回响应：空数据，204响应</span></span><br><span class="line"><span class="comment"># patch方法： 更新某个资源，只提供更新部分的数据，返回响应：空数据，204响应（No Content)</span></span><br><span class="line"><span class="comment"># delete方法：删除某个资源，(请求被接收，删除操作未执行，返回202（Accepted)响应；删除操作已经执行，返回204响应；删除操作已经执行，返回包含状态信息的表现层，返回200响应；</span></span><br><span class="line"><span class="number">3.</span>使用json交换数据</span><br><span class="line"><span class="number">4.</span>设置api版本</span><br><span class="line"><span class="comment"># 可以通过添加url前缀或者直接使用子域名来实现</span></span><br><span class="line"><span class="comment"># http://example.com/v1</span></span><br><span class="line"><span class="comment"># http://example.com/v2</span></span><br><span class="line"><span class="comment"># http://v1.example.com</span></span><br><span class="line"><span class="comment"># http://v2.example.com</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中使用signal</title>
    <url>/2020/08/21/signal/</url>
    <content><![CDATA[<h1 id="Flask中如何使用信号"><a href="#Flask中如何使用信号" class="headerlink" title="Flask中如何使用信号"></a><center>Flask中如何使用信号</center></h1><a id="more"></a>
<h2 id="1-自定义信号"><a href="#1-自定义信号" class="headerlink" title="1. 自定义信号"></a>1. 自定义信号</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义信号：</span></span><br><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line">namespace = Namespace()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个信号</span></span><br><span class="line">test_signal = namespace.signal(<span class="string">'test_signal'</span>）</span><br><span class="line">                               </span><br><span class="line"><span class="comment"># 定义信号处理函数（至少一个位置参数sender),根据发送信号函数传入的参数来决定是否带参数，不确定的话，使用**kwargs来接收任意多个参数）                              </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_start</span><span class="params">(sender, access_log)</span>:</span> <span class="comment"># 参数名和发送函数的参数名要一致</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'access.log'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(access_log + <span class="string">'\n'</span>)</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># 订阅一个信号</span></span><br><span class="line">test_signal.connect(request_start)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送信号 </span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    log_str = access_log(index.__name__)</span><br><span class="line">    test_signal.send(<span class="string">'test'</span>, access_log=log_str)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>

<h2 id="2-flask内置信号使用"><a href="#2-flask内置信号使用" class="headerlink" title="2. flask内置信号使用"></a>2. flask内置信号使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered, before_render_template, got_request_exception</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_template_rendered</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    print(<span class="string">'template rendered'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_before_render</span><span class="params">(sender, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(kwargs)</span><br><span class="line">    print(<span class="string">'before render'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">r_exc_log</span><span class="params">(sender, *args, **kwargs)</span>:</span></span><br><span class="line">    print(sender)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">template_rendered.connect(test_template_rendered) <span class="comment"># 当模板渲染完成后将触发这里的信号</span></span><br><span class="line">before_render_template.connect(test_before_render)<span class="comment"># 当模板渲染之前触发</span></span><br><span class="line">got_request_exception.connect(r_exc_log)<span class="comment"># 在请求过程中抛出异常触发</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/render')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_render</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/error')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_error</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">raise</span> TypeError</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>signal</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中的csrf原理</title>
    <url>/2020/08/21/flask%E4%B8%AD%E7%9A%84csrf%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask中的csrf防御"><a href="#Flask中的csrf防御" class="headerlink" title=" Flask中的csrf防御"></a><center> Flask中的csrf防御</center></h1><a id="more"></a>

<p><strong>三种方式来实现csrf中的防御</strong></p>
<p><strong>为了应对CSRF攻击，当需要创建，修改，删除数据时，需要将这类请求通过<code>post</code>方法提交，同时在提交请求的表单中添加<code>CSRF令牌</code>。</strong></p>
<h3 id="1-通过原生wtfroms-构造的表单，借助flask-wtf提供的CSRFProtect"><a href="#1-通过原生wtfroms-构造的表单，借助flask-wtf提供的CSRFProtect" class="headerlink" title="1. 通过原生wtfroms 构造的表单，借助flask_wtf提供的CSRFProtect"></a>1. 通过原生wtfroms 构造的表单，借助flask_wtf提供的<code>CSRFProtect</code></h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = StringField(<span class="string">'name'</span>, validators=[DataRequired()])</span><br><span class="line">    submit = SubmitField(<span class="string">'提交'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化    </span></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> CSRFProtect</span><br><span class="line">csrf = CSRFProtect()</span><br><span class="line">csrf.init_app(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在表单中使用它提供的生成csrf_token函数</span></span><br><span class="line">&lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">	&lt;input type=<span class="string">"hidden"</span> name=<span class="string">"csrf_token"</span> value=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;名称:&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="text" name="name"&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;提交：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type="submit" value="提交"&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用Flask-wtf-构造的表单"><a href="#2-使用Flask-wtf-构造的表单" class="headerlink" title="2. 使用Flask_wtf 构造的表单"></a>2. 使用Flask_wtf 构造的表单</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskFrom</span><br><span class="line"><span class="comment"># 默认提供了csrf生成的支持</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransferForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    dis_account = StringField(<span class="string">'end'</span>, validators=[DataRequired()])</span><br><span class="line">    mount = StringField(<span class="string">'money'</span>, validators=[DataRequired()])</span><br><span class="line">    sumbit = SubmitField(<span class="string">u'转账'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 模板渲染，将生成csrf_token</span></span><br><span class="line"> &lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">     &#123;&#123; <span class="keyword">from</span>.csrf_token &#125;&#125;</span><br><span class="line">     &#123;&#123; form_field(form.email) &#125;&#125;</span><br><span class="line">     &#123;&#123; form_field(form.pwd) &#125;&#125;</span><br><span class="line">     &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"> &lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-当前端使用ajax发送请求时，实现csrf-token保护"><a href="#3-当前端使用ajax发送请求时，实现csrf-token保护" class="headerlink" title="3. 当前端使用ajax发送请求时，实现csrf_token保护"></a>3. 当前端使用ajax发送请求时，实现csrf_token保护</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 针对当前页面的html当发送 ajax请求时，如何构造csrf_token令牌</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"csrf-token"</span> content=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;邮箱:<span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">                &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;密码：&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">            &lt;tr&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;&lt;input type="submit" name="登录" id="submit"&gt;&lt;/</span>td&gt;</span><br><span class="line">            &lt;<span class="regexp">/tr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>tbody&gt;</span><br><span class="line">    &lt;<span class="regexp">/table&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line"># 实现发送ajax请求的同时，构造csrf_token令牌</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#submit'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 阻止默认的发送请求行为</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">        <span class="keyword">var</span> email = $(<span class="string">'input[name=email]'</span>).val();</span><br><span class="line">        <span class="keyword">var</span> pwd = $(<span class="string">'input[name=pwd]'</span>).val();</span><br><span class="line">        <span class="comment">// var csrftoken = $('input[name=csrf_token]').val();</span></span><br><span class="line">        <span class="keyword">var</span> csrf_token = $(<span class="string">'meta[name=csrf_token]'</span>).attr(<span class="string">'content'</span>)</span><br><span class="line"></span><br><span class="line">        $.ajaxSetup(&#123;</span><br><span class="line">            beforeSend: <span class="function"><span class="keyword">function</span> (<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/i</span>.test(settings.type) &amp;&amp; !<span class="keyword">this</span>.crossDomain) &#123;</span><br><span class="line">                xhr.setRequestHeader(<span class="string">"X-CSRFToken"</span>, csrf_token);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        $.post(&#123;</span><br><span class="line">            <span class="string">'url'</span>: <span class="string">'/login/'</span>,</span><br><span class="line">            <span class="string">'data'</span>: &#123;</span><br><span class="line">                <span class="string">'email'</span>: email,</span><br><span class="line">                <span class="string">'pwd'</span>: pwd,</span><br><span class="line">                <span class="comment">// 'csrf_token': csrftoken,</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'fail'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="4-flask中的csrf-token令牌的防御原理"><a href="#4-flask中的csrf-token令牌的防御原理" class="headerlink" title="4.flask中的csrf_token令牌的防御原理"></a>4.flask中的csrf_token令牌的防御原理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> safe_str_cmp(session[field_name], token):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">'The CSRF tokens do not match.'</span>)</span><br><span class="line">        </span><br><span class="line"> <span class="comment"># 模板中的csrf_token 一旦被调用，将同时生成一段随机字符串作为字段的data和将这个值加密存放到session[csrf_token]中，</span></span><br><span class="line"><span class="comment"># 当调用validate()函数进行验证字段时，将比较字段中的数据和session[csrf_token]中的数据是否一致。</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>python 属性访问顺序</title>
    <url>/2020/07/20/python-%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="Python-属性访问顺序"><a href="#Python-属性访问顺序" class="headerlink" title=" Python - 属性访问顺序 "></a><center> Python - 属性访问顺序 </center></h1><a id="more"></a>

<p>属性访问优先级的顺序如下：</p>
<ul>
<li>类属性</li>
<li>数据描述符 (实现了<code>__get__</code> 和<code>__set__</code>方法的描述符)</li>
<li>实例属性</li>
<li>非数据描述符(仅仅实现了<code>__get__</code>方法的描述符)</li>
<li>默认为<code>__getattr__</code></li>
</ul>
<p>针对描述符，注意事项如下：</p>
<ul>
<li>描述符本身应定义成新式类，被代理的类也应该是新式类</li>
<li>把描述符定义为被代理类的类属性</li>
<li>访问属性优先级先后顺序如上</li>
</ul>
<p>实例如下：</p>
<ol>
<li>利用描述符实现类在初始化进行类型检查</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckInit</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, expected_type)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.expected_type = expected_type</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get--&gt;'</span>, instance, owner)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set--&gt;'</span>, instance)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected %s'</span> % str(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(<span class="string">'delete--&gt;'</span>, instance)</span><br><span class="line">        instance.__dict__.pop(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typecheck</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name, expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            setattr(cls, name, CheckInit(name, expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck(name=str, age=int, salary=float)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, salary)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1 = Test(<span class="string">'hello'</span>, <span class="number">23</span>, <span class="number">23423.0</span>)</span><br></pre></td></tr></table></figure>

<p>在看flask源码时，也可以看到这样的用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用描述符可以自己实现 <code>@property</code> , <code>@classmethod</code>, <code>@staticmethod</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">		self.func = func</span><br><span class="line">        </span><br><span class="line">   	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        setattr(instance, self.func.__name__, value)  <span class="comment">#第一次调用执行__get__,第二次调用实例已经有属性了，不会调用这个方法</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @Myproperty   # 等价于 area = Myproperty(area)   相当于类属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">    </span><br><span class="line">t1 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t1.area)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想每次都要调用__get__ 获取值可以使用数据描述符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myproperty2</span><span class="params">(Myproperty)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        value = self.func(instance)</span><br><span class="line">        instance.__dict__[self.func.__name__] = value</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'this is a data-descriptor'</span>)</span><br><span class="line">        </span><br><span class="line">t2 = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">print(t2.area)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实现<code>@classmethod</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclassmethod</span><span class="params">(object)</span>:</span></span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(owner)</span>：</span></span><br><span class="line"><span class="function">        	<span class="title">print</span><span class="params">(<span class="string">'这里可以添加功能！！！'</span>)</span></span></span><br><span class="line"><span class="function">        	<span class="title">return</span> <span class="title">self</span>.<span class="title">func</span><span class="params">(owner)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">decorator</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, width, length)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.width = width</span><br><span class="line">        self.length = length</span><br><span class="line"><span class="meta">    @Myclassmethod    # area = Myclassmethod(area)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.length</span><br><span class="line">   </span><br><span class="line">Test.area()</span><br><span class="line">t = Test(<span class="string">'test'</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">t.area()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask 信号机制</title>
    <url>/2020/07/20/Flask-%E4%BF%A1%E5%8F%B7%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Flask-信号机制"><a href="#Flask-信号机制" class="headerlink" title=" Flask 信号机制 "></a><center> Flask 信号机制 </center></h1><a id="more"></a>
<ol>
<li><p>Flask内置的核心信号:  <a href="http://docs.jinkan.org/docs/flask/signals.html" target="_blank" rel="noopener">flask信号</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模板成功渲染后，信号发出</span></span><br><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)</span><br><span class="line"><span class="comment"># 模板渲染之前，信号发出</span></span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>)</span><br><span class="line"><span class="comment"># request_started: 建立请求下上文之后在任何请求处理之前发送此信号</span></span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line"><span class="comment"># request_finished 请求发送给客户端之前发送此信号</span></span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)</span><br><span class="line"><span class="comment"># request_tearing_down 在请求销毁时发送（总是被调用，即使发生异常）</span></span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)</span><br><span class="line"><span class="comment"># 请求处理中抛出异常时发送</span></span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)</span><br><span class="line"><span class="comment"># 应用上下文销毁时发送（总是被调用，即使发生异常）</span></span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)</span><br><span class="line"><span class="comment"># 应用上下文压入栈时发送</span></span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)</span><br><span class="line"><span class="comment"># 应用上下万弹出栈时发送</span></span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)</span><br><span class="line"><span class="comment"># 闪现消息时发送</span></span><br><span class="line">message_flashed = _signals.signal(<span class="string">"message-flashed"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求过程中的执行顺序如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用上下文压入栈后发送</span></span><br><span class="line">appcontext_pushed.send(self.app)</span><br><span class="line"><span class="comment"># 请求上下文建立之后执行的</span></span><br><span class="line">a. @before_first_request</span><br><span class="line">b. request_started.send(self)</span><br><span class="line">c. @before_request</span><br><span class="line">d. @after_request</span><br><span class="line">e. request_finished.send(self, response=response)</span><br><span class="line">f. got_request_exception.send(self, exception=e)</span><br><span class="line">g. @teardown_request</span><br><span class="line">h. request_tearing_down.send(self, exc=exc)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>使用Flask中信号三步</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.定义一个信号</span></span><br><span class="line"> request_started = _signals.signal(<span class="string">"request-started"</span>)</span><br><span class="line"> <span class="comment"># 2.发送端</span></span><br><span class="line"> request_started.send(self)  <span class="comment">#第一个必要参数表示发送端 ，其他参数是推送到信号订阅者的可选关键字参数</span></span><br><span class="line"> <span class="comment"># 3.订阅</span></span><br><span class="line"> request_started.connect(func) <span class="comment">#第一个参数表示信号发出时要执行的函数，第二个参数可选，用于确定信号发送端</span></span><br><span class="line"> <span class="comment"># 4.退订</span></span><br><span class="line"> disconnect()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用范例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> template_rendered</span><br><span class="line"><span class="meta">   @template_rendered.connect_via(app)</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">when_template_rendered</span><span class="params">(sender, template, context, **extra)</span>:</span></span><br><span class="line">   	print(<span class="string">'Template %s is rendered with %s'</span> % (template.name, context))</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
  </entry>
  <entry>
    <title>Flask上下文管理</title>
    <url>/2020/07/20/Flask%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask上下文管理"><a href="#Flask上下文管理" class="headerlink" title=" Flask上下文管理"></a><center> Flask上下文管理</center></h1><a id="more"></a>

<h2 id="1-WSGI-协议"><a href="#1-WSGI-协议" class="headerlink" title="1. WSGI 协议"></a>1. WSGI 协议</h2><p>WSGI(Web Server Gateway Interface)是开发Python Web程序的标准，所有的Python Web框架都需要按照WSGI规范来编写程序，Flask框架也不例外。</p>
<p>WSGI规定如下：</p>
<p>   1.1 web程序必须是一个可调用对象，这个可调用对象接收两个参数：<code>environ</code> 和 <code>start_response</code></p>
<p>   1.2 这个可调用对象返回值是一个可迭代对象</p>
<ol start="3">
<li>3 WSGI服务器调用这个可调用对象时传入这两个参数。</li>
</ol>
<p>使用一个函数作为可调用对象来实现WSGI程序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">	status = <span class="string">'200 OK'</span></span><br><span class="line">	response_headers = [(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)]</span><br><span class="line">	start_response(status, response_headers)</span><br><span class="line">	<span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;Hello, Web&lt;/h1&gt;'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用WSGI服务器启动这个程序</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line">server = make_server(<span class="string">'localhost'</span>, <span class="number">5000</span>, hello)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>



<p>Flask的上下文有程序上下文和请求上下文，原理实现类似于<code>threading.local()</code> ，通过定义了<code>LocalStack</code> 和<code>Local</code> 类，实现了根据线程id来获取每个请求相关的数据。当请求到来时，把请求相关的数据封装到<code>RequestContext</code> 类中，然后通过<code>push</code>方法将封装的请求数据根据线程id 存储到<code>Local</code>对象中；在处理请求的视图函数中，通过调用<code>print(request)</code> 将调用<code>LocalProxy</code> 的<code>__str__</code> 方法，然后调用<code>_get_current_object()</code> 去找到请求上下文栈顶元素存储的request对象；请求结束后，通过<code>pop()</code>删除这次请求的所有数据。</p>
<h2 id="2-Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的-call-方法。"><a href="#2-Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的-call-方法。" class="headerlink" title="2. Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的__call__ 方法。"></a>2. Flask将类的实例作为可调用对象来实现WSGI规范，当请求到来时，将执行Flask类的<code>__call__</code> 方法。</h2><ol>
<li>请求到来后</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">"""The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">    wrapped to applying middleware."""</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment"># 将请求相关的数据封装到ctx对象中</span></span><br><span class="line">    ctx = self.request_context(environ)</span><br><span class="line">    error = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 执行push方法，将封装的请求相关数据存储到Local对象中</span></span><br><span class="line">            ctx.push()</span><br><span class="line">            response = self.full_dispatch_request()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            error = e</span><br><span class="line">            response = self.handle_exception(e)</span><br><span class="line">        <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">            error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">            error = <span class="literal">None</span></span><br><span class="line">        ctx.auto_pop(error)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ)</span><br><span class="line">        <span class="comment">#解析environ 封装到Request对象中</span></span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line">        <span class="keyword">except</span> HTTPException <span class="keyword">as</span> e:</span><br><span class="line">            self.request.routing_exception = e</span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line">        self.session = session</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">      top = _request_ctx_stack.top</span><br><span class="line">      <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved:</span><br><span class="line">          top.pop(top._preserved_exc)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Before we push the request context we have to ensure that there</span></span><br><span class="line">      <span class="comment"># is an application context.</span></span><br><span class="line">      app_ctx = _app_ctx_stack.top</span><br><span class="line">      <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">          <span class="comment"># 产生一个AppContext对象</span></span><br><span class="line">          app_ctx = self.app.app_context()</span><br><span class="line">          app_ctx.push()</span><br><span class="line">          self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          self._implicit_app_ctx_stack.append(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">          sys.exc_clear()</span><br><span class="line"><span class="comment">#将请求上下文对象存储到Local对象中</span></span><br><span class="line">      _request_ctx_stack.p                                                                                                                                                     ush(self)</span><br><span class="line">      <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          session_interface = self.app.session_interface</span><br><span class="line">          self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">              self.session = session_interface.make_null_session(self.app)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> self.url_adapter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          self.match_request()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line">        self.url_adapter = app.create_url_adapter(<span class="literal">None</span>)</span><br><span class="line">        self.g = app.app_ctx_globals_class()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Like request context, app contexts can be pushed multiple times</span></span><br><span class="line">        <span class="comment"># but there a basic "refcount" is enough to track them.</span></span><br><span class="line">        self._refcnt = <span class="number">0</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Binds the app context to the current context."""</span></span><br><span class="line">        self._refcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">            sys.exc_clear()</span><br><span class="line">         <span class="comment"># 将AppContext对象也存储到Local中</span></span><br><span class="line">        _app_ctx_stack.push(self)</span><br><span class="line">        appcontext_pushed.send(self.app)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        	<span class="comment"># 这时候Local对象中就存储了这样的数据</span></span><br><span class="line">        	<span class="comment"># &#123; </span></span><br><span class="line">        	<span class="comment">#    get_indent(): &#123;</span></span><br><span class="line">            <span class="comment">#          'stack': [RequestContxt()]</span></span><br><span class="line">        	<span class="comment"># &#125;</span></span><br><span class="line">        	<span class="comment"># &#125;</span></span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>



<h2 id="3-在视图函数中处理请求"><a href="#3-在视图函数中处理请求" class="headerlink" title="3. 在视图函数中处理请求"></a>3. 在视图函数中处理请求</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 这时候将调用 LocalProxy的__str__方法</span></span><br><span class="line">	print(request)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"hello， web"</span></span><br></pre></td></tr></table></figure>

<p>分析导入的全局变量<code>request</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalProxy</span><span class="params">(object)</span>:</span></span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, local, name=None)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"_LocalProxy__local"</span>, local)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__name__"</span>, name)</span><br><span class="line">        <span class="keyword">if</span> callable(local) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(local, <span class="string">"__release_local__"</span>):</span><br><span class="line">            <span class="comment"># "local" is a callable that is not an instance of Local or</span></span><br><span class="line">            <span class="comment"># LocalManager: mark it as a wrapped function.</span></span><br><span class="line">            object.__setattr__(self, <span class="string">"__wrapped__"</span>, local)</span><br><span class="line">            </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the current object.  This is useful if you want the real</span></span><br><span class="line"><span class="string">        object behind the proxy at a time for performance reasons or because</span></span><br><span class="line"><span class="string">        you want to pass the object into a different context.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self.__local, <span class="string">"__release_local__"</span>):</span><br><span class="line">            <span class="keyword">return</span> self.__local()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__local, self.__name__)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"no object bound to %s"</span> % self.__name__)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">     __str__ = <span class="keyword">lambda</span> x: str(x._get_current_object())</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用web访问多app应用时，依然是一样的流程，Local对象中存储依然的一个请求上下文对象的列表；</p>
</li>
<li><p>对于使用离线脚本来操作上下文时候</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    print(_app_ctx_stack._local.__storage__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> app2.app_context():</span><br><span class="line">        print(_app_ctx_stack._local.__storage__)</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出如下：这时候才会出现'stack'中的值有两个的情况</span></span><br><span class="line">&#123;<span class="number">6916</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1BE0</span>&gt;]&#125;&#125;</span><br><span class="line">&#123;<span class="number">6916</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1BE0</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x000002A52DBF1EB8</span>&gt;]&#125;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-请求结束后-执行pop-请求上下文和应用上下文都将pop"><a href="#4-请求结束后-执行pop-请求上下文和应用上下文都将pop" class="headerlink" title="4. 请求结束后,执行pop() ,请求上下文和应用上下文都将pop"></a>4. 请求结束后,执行<code>pop()</code> ,请求上下文和应用上下文都将<code>pop</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">      app_ctx = self._implicit_app_ctx_stack.pop()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          clear_request = <span class="literal">False</span></span><br><span class="line">          <span class="keyword">if</span> <span class="keyword">not</span> self._implicit_app_ctx_stack:</span><br><span class="line">              self.preserved = <span class="literal">False</span></span><br><span class="line">              self._preserved_exc = <span class="literal">None</span></span><br><span class="line">              <span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel:</span><br><span class="line">                  exc = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">              self.app.do_teardown_request(exc)</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">                  sys.exc_clear()</span><br><span class="line"></span><br><span class="line">              request_close = getattr(self.request, <span class="string">"close"</span>, <span class="literal">None</span>)</span><br><span class="line">              <span class="keyword">if</span> request_close <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                  request_close()</span><br><span class="line">              clear_request = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">finally</span>:</span><br><span class="line">          rv = _request_ctx_stack.pop()</span><br><span class="line"></span><br><span class="line">          <span class="comment"># get rid of circular dependencies at the end of the request</span></span><br><span class="line">          <span class="comment"># so that we don't require the GC to be active.</span></span><br><span class="line">          <span class="keyword">if</span> clear_request:</span><br><span class="line">              rv.request.environ[<span class="string">"werkzeug.request"</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># Get rid of the app as well if necessary.</span></span><br><span class="line">          <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">              app_ctx.pop(exc)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">"Popped wrong request context. (%r instead of %r)"</span> % (</span><br><span class="line">              rv,</span><br><span class="line">              self,</span><br><span class="line">          )</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask session原理</title>
    <url>/2020/07/20/Flask-session%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Flask-session原理"><a href="#Flask-session原理" class="headerlink" title=" Flask session原理 "></a><center> Flask session原理 </center></h1><a id="more"></a>
<h2 id="1-当请求上下文被push-之后，接下来就开始操作session"><a href="#1-当请求上下文被push-之后，接下来就开始操作session" class="headerlink" title="1. 当请求上下文被push 之后，接下来就开始操作session"></a>1. 当请求上下文被<code>push</code> 之后，接下来就开始操作<code>session</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            session_interface = self.app.session_interface</span><br><span class="line">            self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># 用来处理 app.secret_key 未设置的情况，这时候初始化一个NullSession对象</span></span><br><span class="line">                self.session = session_interface.make_null_session(self.app)</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSessionInterface</span><span class="params">(SessionInterface)</span>:</span>              </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">        s = self.get_signing_serializer(app)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 如果没有设置app.secret_key, 将返回None</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 从cookie中取出键名为session的值</span></span><br><span class="line">        val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">        <span class="comment"># 值不存在，返回一个 SecureCookieSession对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br><span class="line">        max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 值存在，通过loads方法将随机字符串 解密成一个python对象，也就是一个字典</span></span><br><span class="line">            data = s.loads(val, max_age=max_age)</span><br><span class="line">            <span class="keyword">return</span> self.session_class(data)</span><br><span class="line">        <span class="keyword">except</span> BadSignature:</span><br><span class="line">            <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<h2 id="2-在视图函数中处理session"><a href="#2-在视图函数中处理session" class="headerlink" title="2. 在视图函数中处理session"></a>2. 在视图函数中处理<code>session</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从flask 导入全局代理对象</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session, Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(session)  <span class="comment"># 最终将调用 CallbackDict类的__repr__()</span></span><br><span class="line">    session[<span class="string">'test'</span>] = <span class="string">'hello'</span> <span class="comment"># 最终调用的是 UpdateDictMixin 类中的__setitem__()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello test sessionk"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSession</span><span class="params">(CallbackDict, SessionMixin)</span>:</span></span><br><span class="line">    </span><br><span class="line">    modified = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    accessed = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial=None)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">on_update</span><span class="params">(self)</span>:</span></span><br><span class="line">            self.modified = <span class="literal">True</span></span><br><span class="line">            self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># print(self.__class__)</span></span><br><span class="line">        <span class="comment"># print(self.__class__.mro())</span></span><br><span class="line">        <span class="comment"># 对于多继承来说，super() 返回的是要寻找的哪个父类</span></span><br><span class="line">        <span class="string">'''[&lt;class 'flask.sessions.SecureCookieSession'&gt;, &lt;class 'werkzeug.datastructures.CallbackDict'&gt;, &lt;class 'werkzeug.datastructures.UpdateDictMixin'&gt;, &lt;class 'dict'&gt;, &lt;class 'flask.sessions.SessionMixin'&gt;, &lt;class 'collections.abc.MutableMapping'&gt;, &lt;class 'collections.abc.Mapping'&gt;, &lt;class 'collections.abc.Collection'&gt;, &lt;class 'collections.abc.Sized'&gt;, &lt;class 'collections.abc.Iterable'&gt;, &lt;class 'collections.abc.Container'&gt;, &lt;class 'object'&gt;]</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line">        super(SecureCookieSession, self).__init__(initial, on_update)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).__getitem__(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).get(key, default)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        self.accessed = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> super(SecureCookieSession, self).setdefault(key, default)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackDict</span><span class="params">(UpdateDictMixin, dict)</span>:</span></span><br><span class="line">    <span class="string">"""A dict that calls a function passed every time something is changed.</span></span><br><span class="line"><span class="string">    The function is passed the dict instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial=None, on_update=None)</span>:</span></span><br><span class="line">        dict.__init__(self, initial <span class="keyword">or</span> ())</span><br><span class="line">        self.on_update = on_update</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print('print session')</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;%s %s&gt;"</span> % (self.__class__.__name__, dict.__repr__(self))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateDictMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes dicts call `self.on_update` on modifications.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :private:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    on_update = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calls_update</span><span class="params">(name)</span>:</span>  <span class="comment"># noqa: B902</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">oncall</span><span class="params">(self, *args, **kw)</span>:</span></span><br><span class="line">            rv = getattr(super(UpdateDictMixin, self), name)(*args, **kw)</span><br><span class="line">            <span class="keyword">if</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                self.on_update(self)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        oncall.__name__ = name</span><br><span class="line">        <span class="keyword">return</span> oncall</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, key, default=None)</span>:</span></span><br><span class="line">        modified = key <span class="keyword">not</span> <span class="keyword">in</span> self</span><br><span class="line">        rv = super(UpdateDictMixin, self).setdefault(key, default)</span><br><span class="line">        <span class="keyword">if</span> modified <span class="keyword">and</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.on_update(self)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, key, default=_missing)</span>:</span></span><br><span class="line">        modified = key <span class="keyword">in</span> self</span><br><span class="line">        <span class="keyword">if</span> default <span class="keyword">is</span> _missing:</span><br><span class="line">            rv = super(UpdateDictMixin, self).pop(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = super(UpdateDictMixin, self).pop(key, default)</span><br><span class="line">        <span class="keyword">if</span> modified <span class="keyword">and</span> self.on_update <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.on_update(self)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    __setitem__ = calls_update(<span class="string">"__setitem__"</span>)</span><br><span class="line">    __delitem__ = calls_update(<span class="string">"__delitem__"</span>)</span><br><span class="line">    clear = calls_update(<span class="string">"clear"</span>)</span><br><span class="line">    popitem = calls_update(<span class="string">"popitem"</span>)</span><br><span class="line">    update = calls_update(<span class="string">"update"</span>)</span><br><span class="line">    <span class="keyword">del</span> calls_update</span><br></pre></td></tr></table></figure>

<h2 id="3-在请求处理完成，返回响应时候，对于session处理"><a href="#3-在请求处理完成，返回响应时候，对于session处理" class="headerlink" title="3. 在请求处理完成，返回响应时候，对于session处理"></a>3. 在请求处理完成，返回响应时候，对于session处理</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">      <span class="string">"""Can be overridden in order to modify the response object</span></span><br><span class="line"><span class="string">      before it's sent to the WSGI server.  By default this will</span></span><br><span class="line"><span class="string">      call all the :meth:`after_request` decorated functions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      .. versionchanged:: 0.5</span></span><br><span class="line"><span class="string">         As of Flask 0.5 the functions registered for after request</span></span><br><span class="line"><span class="string">         execution are called in reverse order of registration.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      :param response: a :attr:`response_class` object.</span></span><br><span class="line"><span class="string">      :return: a new response object or the same, has to be an</span></span><br><span class="line"><span class="string">               instance of :attr:`response_class`.</span></span><br><span class="line"><span class="string">      """</span></span><br><span class="line">      ctx = _request_ctx_stack.top</span><br><span class="line">      bp = ctx.request.blueprint</span><br><span class="line">      funcs = ctx._after_request_functions</span><br><span class="line">      <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">          funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">      <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">          funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">      <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">          response = handler(response)</span><br><span class="line">      <span class="comment"># 判断是否是 NullSession对象(也就是是否设置secret_key)</span></span><br><span class="line">      <span class="comment"># 如果没有设置secret_key 直接跳过</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">          self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">      domain = self.get_cookie_domain(app)</span><br><span class="line">      path = self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># If the session is modified to be empty, remove the cookie.</span></span><br><span class="line">      <span class="comment"># If the session is empty, return without setting the cookie.</span></span><br><span class="line">      <span class="comment"># 删除 session时候</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">          <span class="keyword">if</span> session.modified:</span><br><span class="line">              response.delete_cookie(</span><br><span class="line">                  app.session_cookie_name, domain=domain, path=path</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Add a "Vary: Cookie" header if the session was accessed at all.</span></span><br><span class="line">      <span class="keyword">if</span> session.accessed:</span><br><span class="line">          response.vary.add(<span class="string">"Cookie"</span>)</span><br><span class="line"><span class="comment"># 这个条件表示 当session没有修改过，一旦设置session.permanent为True,那么也要重新set_cookie</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.should_set_cookie(app, session):</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      httponly = self.get_cookie_httponly(app)</span><br><span class="line">      secure = self.get_cookie_secure(app)</span><br><span class="line">      samesite = self.get_cookie_samesite(app)</span><br><span class="line">      expires = self.get_expiration_time(app, session)</span><br><span class="line">      print(<span class="string">'expires is '</span>, expires)</span><br><span class="line">      val = self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">      response.set_cookie(</span><br><span class="line">          app.session_cookie_name,</span><br><span class="line">          val,</span><br><span class="line">          expires=expires,</span><br><span class="line">          httponly=httponly,</span><br><span class="line">          domain=domain,</span><br><span class="line">          path=path,</span><br><span class="line">          secure=secure,</span><br><span class="line">          samesite=samesite,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

<p>至此，<code>flask</code>中的<code>session</code> 完成。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>flask框架内置的<code>session</code>  通过<code>cookie</code> 进行设置的。</p>
<ul>
<li><p><code>session</code> 的过期时间，默认情况下，当浏览器关闭时，<code>session</code> 过期；但是当设置了<code>session.permanent = True</code>后，默认的过期时间根据<code>PERMANENT_SESSION_LEFETIME</code>  来计算，默认情况下是 <code>timedelta(days=31)</code> ; 这里再来提一下，对于chrome浏览器，有时候浏览器关闭后，<code>session</code> 并没有被清除的解释 <a href="http://blog.petersondave.com/cookies/Session-Cookies-in-Chrome-Firefox-and-Sitecore/" target="_blank" rel="noopener">Session Cookies in Chrome, Firefox, and Sitecore</a> ;中间有关于chrome浏览器的介绍:</p>
<ul>
<li><p>Since version 19, Chrome has altered how it runs in the background which has an immediate impact on how you expect Chrome to handle session cookies when you close your browser. Under <em>advanced settings &gt; System</em>, the option “Continue running background apps when Google Chrome is closed” is checked by default. In other words, if you close your browser, it will continue to run in the background (to support Chrome applications and extensions). Allowing Google Chrome to run in the background keeps the Chrome application session alive and prevents session cookies from being cleared.</p>
</li>
<li><p>The issue has been entered and marked as “won’t fix”, recognized as <a href="https://code.google.com/p/chromium/issues/detail?id=128513" target="_blank" rel="noopener">expected behavior by the development team</a>.</p>
</li>
</ul>
</li>
<li><p>flask 这种将<code>session</code> 存储在客户端的默认方式，并不安全，即使不知道密钥的情况下也可以轻易的解析出数据来，因此，不能用来存储敏感数据，或者存储到其他地方</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line">s = <span class="string">'eyJ0ZXN0IjoiaGVsbG8ifQ.XxUYlQ.2J3BtV8aACUDCaddD-ZxFlIEtRI'</span></span><br><span class="line">data, timestamp, secret = s.split(<span class="string">'.'</span>)</span><br><span class="line">base64_decode(data)</span><br><span class="line"><span class="comment"># 就可以解析出 '&#123;"test":"hello"&#125;'</span></span><br></pre></td></tr></table></figure>



<h2 id="5-使用第三方插件，将session-存放到redis-中如何操作"><a href="#5-使用第三方插件，将session-存放到redis-中如何操作" class="headerlink" title="5. 使用第三方插件，将session 存放到redis 中如何操作"></a>5. 使用第三方插件，将<code>session</code> 存放到<code>redis</code> 中如何操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">'test'</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">app.config[<span class="string">'SESSION_REDIS'</span>] = Redis(password=<span class="string">'studyredis'</span>)</span><br><span class="line"></span><br><span class="line">sess = Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(session)</span><br><span class="line">    session[<span class="string">'test'</span>] = <span class="string">'hello'</span> <span class="comment">#此时就能在redis数据库中找到session: 开头的key；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-restful扩展使用</title>
    <url>/2020/02/29/flask-restful%E6%89%A9%E5%B1%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="flask-restful扩展使用"><a href="#flask-restful扩展使用" class="headerlink" title="flask-restful扩展使用"></a><center>flask-restful扩展使用</center></h2><a id="more"></a>

<h3 id="1-flask-restful基本使用"><a href="#1-flask-restful基本使用" class="headerlink" title="1. flask-restful基本使用"></a>1. flask-restful基本使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api, Resource, reqparse</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">api = Api(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginView</span><span class="params">(Resource)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 验证传入的参数</span></span><br><span class="line">        <span class="comment"># type值还可以是url, regex, date</span></span><br><span class="line">        <span class="comment"># 参数有：</span></span><br><span class="line">        <span class="comment"># required = False默认为False,可以不传，此时默认值None</span></span><br><span class="line">        <span class="comment"># help:定制错误信息</span></span><br><span class="line">        <span class="comment"># action='append', 以列表得方式获取所有的同名参数，默认只取第一个参数</span></span><br><span class="line">        <span class="comment"># type 数据类型，可以是python标准数据类型或者inputs中的数据类型，或者自定义方法验证</span></span><br><span class="line">        <span class="comment"># location用于指定数据来源，args, headers, cookies, json, form, files,或者这些值的列表；</span></span><br><span class="line">        parser = reqparse.RequestParser()</span><br><span class="line">        parser.add_argument(<span class="string">'username'</span>, type=str, help=<span class="string">"用户名验证错误"</span>, default=<span class="string">'cgn'</span>， trim=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'password'</span>, type=str, help=<span class="string">'密码验证错误'</span>, required=<span class="literal">True</span>)</span><br><span class="line">        parser.add_argument(<span class="string">'sex'</span>, type=str, help=<span class="string">'性别验证错误'</span>, choices=[<span class="string">'male'</span>, <span class="string">'female'</span>, <span class="string">'secret'</span>])</span><br><span class="line">         parser.add_argument(<span class="string">'birthday'</span>, type=inputs.date)</span><br><span class="line">        args = parser.parse_args()</span><br><span class="line">        print(args)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">api.add_resource(LoginView, <span class="string">'/login'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-返回指定的参数"><a href="#2-返回指定的参数" class="headerlink" title="2. 返回指定的参数"></a>2. 返回指定的参数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="comment"># 必须返回的键值对，如果没有提供，将使用默认值</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'content'</span>: fields.String</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="comment"># 返回给客户端的键值对</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'title'</span>: fields.String,</span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields) </span></span><br><span class="line">    <span class="comment"># 序列化时，也可以使用 envelope这个参数，所有结果都将放到envelope里面</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, article_id)</span>:</span></span><br><span class="line">        article = Article.query.get(article_id)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line">api.add_resource(ArticleView, <span class="string">'/article/&lt;int:article_id&gt;'</span>, endpoint=<span class="string">'article'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">resource_fields = &#123;</span><br><span class="line">        <span class="string">'article_title'</span>: fields.String(attribute=<span class="string">'title'</span>), <span class="comment">#对字段title重命名</span></span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;)),</span><br><span class="line"></span><br><span class="line">        <span class="string">'test'</span>:fields.String(default=<span class="string">'test'</span>) <span class="comment"># 字段不存在时的默认值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 结果如下	</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"article_title"</span>: <span class="string">"hello"</span>,</span><br><span class="line"><span class="attr">"content"</span>: <span class="string">"this is  a test"</span>,</span><br><span class="line"><span class="attr">"tags"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"flask"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"test"</span>: <span class="string">"test"</span>,</span><br><span class="line"><span class="attr">"user"</span>: &#123;</span><br><span class="line"><span class="attr">"email"</span>: <span class="string">"xxx@qq.com"</span>,</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"cgn"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-在蓝本中使用api"><a href="#3-在蓝本中使用api" class="headerlink" title="3. 在蓝本中使用api"></a>3. 在蓝本中使用api</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_bp = Blueprint(<span class="string">'user_bp'</span>, __name__, url_prefix=<span class="string">'/user'</span>)</span><br><span class="line"></span><br><span class="line">api = Api(user_bp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.representation('text/html')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output_html</span><span class="params">(data, code, headers)</span>:</span></span><br><span class="line">    print(data)</span><br><span class="line">    response = make_response(data)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    resource_fields = &#123;</span><br><span class="line">        <span class="string">'article_title'</span>: fields.String(attribute=<span class="string">'title'</span>),</span><br><span class="line">        <span class="string">'content'</span>: fields.String,</span><br><span class="line">        <span class="string">'user'</span>: fields.Nested(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'id'</span>: fields.String,</span><br><span class="line">                <span class="string">'name'</span>: fields.String,</span><br><span class="line">                <span class="string">'email'</span>: fields.String</span><br><span class="line">            &#125;</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'tags'</span>: fields.List(fields.Nested(&#123;</span><br><span class="line">            <span class="string">'id'</span>: fields.String,</span><br><span class="line">            <span class="string">'name'</span>: fields.String</span><br><span class="line">        &#125;)),</span><br><span class="line"></span><br><span class="line">        <span class="string">'test'</span>:fields.String(default=<span class="string">'test'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @marshal_with(resource_fields)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, article_id)</span>:</span></span><br><span class="line">        article = Article.query.get(article_id)</span><br><span class="line">        <span class="keyword">return</span> article</span><br><span class="line"></span><br><span class="line">api.add_resource(ArticleView, <span class="string">'/article/&lt;int:article_id&gt;'</span>, endpoint=<span class="string">'article'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(Resource)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'test.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">api.add_resource(TestView, <span class="string">'/test'</span>, endpoint=<span class="string">'test'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-sqlalchemy与alembic学习</title>
    <url>/2020/02/27/flask-sqlalchemy%E4%B8%8Ealembic%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="flask-sqlalchemy-与alembic-学习"><a href="#flask-sqlalchemy-与alembic-学习" class="headerlink" title="flask-sqlalchemy 与alembic 学习"></a><center>flask-sqlalchemy 与alembic 学习</center></h2><a id="more"></a>

<h3 id="1-flask-sqlalchemy"><a href="#1-flask-sqlalchemy" class="headerlink" title="1. flask-sqlalchemy"></a>1. flask-sqlalchemy</h3><ul>
<li>安装flask-sqlalchemy ,这是flask与sqlalchemy的集成，简化了sqlalchemy的使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install flask-sqlalchemy</span><br></pre></td></tr></table></figure>

<ul>
<li>首先定义数据库模型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql+pymysql://root:123456@localhost:3306/flask_sqlalchemy_demo'</span></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">   id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">   username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">'&lt;User username:%s&gt;'</span> % self.username</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = db.Column(db.DateTime, default=datetime.now)</span><br><span class="line">    uid = db.Column(db.Integer, db.ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">    author = db.relationship(<span class="string">'User'</span>, backref=<span class="string">'articles'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>增删改查操作如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    user = User(username=<span class="string">'cgn'</span>)</span><br><span class="line">    article1 = Article(title=<span class="string">'hello world'</span>)</span><br><span class="line">    article2 = Article(title=<span class="string">'生命不能承受之轻'</span>)</span><br><span class="line">    user.articles.extend((article1, article2))</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/check')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">    user = User.query.filter_by(id=<span class="number">1</span>).first()</span><br><span class="line">    print(user) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'check success'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/update')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    user = User.query.get(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        user.username = <span class="string">'声明'</span></span><br><span class="line">        db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'update success'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    article = Article.query.get(<span class="number">1</span>)</span><br><span class="line">    db.session.delete(article)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"delete success"</span></span><br></pre></td></tr></table></figure>

<h3 id="2-alembic-是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；"><a href="#2-alembic-是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；" class="headerlink" title="2. alembic 是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；"></a>2. alembic 是用来在不删除数据库中数据的前提下，对数据库模型进行修改的工具；</h3><ul>
<li><p>原理:将ORM模型先生成迁移脚本文件，然后按照迁移文件中的操作映射到数据库中；</p>
</li>
<li><p>常常使用的命令：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步</span></span><br><span class="line">alembic init self_dir</span><br><span class="line"><span class="comment"># 第二步</span></span><br><span class="line"><span class="comment"># 修改alembic.ini文件</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"> <span class="number">38</span> sqlalchemy.url = mysql+pymysql://root:<span class="number">123456</span>@localhost:<span class="number">3306</span>/hello_alembic</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步</span></span><br><span class="line"><span class="comment"># 进入 self_dir/env.py 修改</span></span><br><span class="line">  <span class="number">1</span> <span class="keyword">import</span> sys                             </span><br><span class="line">  <span class="number">2</span> <span class="keyword">import</span> os                              </span><br><span class="line">  <span class="number">3</span> sys.path.append(os.path.dirname(os.path.dirname(__file__)))</span><br><span class="line">  <span class="number">4</span> <span class="keyword">import</span> use_alembic </span><br><span class="line">    target_metadata = alembic.Base.metadata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步 生成迁移文件</span></span><br><span class="line">  alembic revision --autogenerate -m <span class="string">"create table user"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五步 映射数据库</span></span><br><span class="line">  alembic upgrade head</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 其他命令</span></span><br><span class="line">alembic heads  <span class="comment">#查看head 指向的位置， 类似于 git中的head</span></span><br><span class="line">alembic current <span class="comment"># 查看当前指向的位置， 只有当current 与head 指向的位置相同，才能执行 alembic revision</span></span><br><span class="line">alembic history <span class="comment"># 可以查看执行的操作</span></span><br><span class="line">alembic downgrade 某个位置  <span class="comment"># 执行以前的某个操作</span></span><br></pre></td></tr></table></figure>

<h3 id="3-使用flask-migrate-简化alembic的操作"><a href="#3-使用flask-migrate-简化alembic的操作" class="headerlink" title="3. 使用flask-migrate 简化alembic的操作"></a>3. 使用flask-migrate 简化alembic的操作</h3><ul>
<li>第一步使用：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">migrate = Migrate(app, db)</span><br></pre></td></tr></table></figure>

<ul>
<li>生成仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask db init  <span class="comment"># 在当前目录生成 migrations目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成迁移文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flask db migrate -m &quot;first use&quot;  # 因为之前已经创建过数据库表，所以没有任何变化，没有任何输出</span><br></pre></td></tr></table></figure>

<ul>
<li>执行映射到数据库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask db upgrade</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlalchemy学习</title>
    <url>/2020/02/25/sqlalchemy%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="sqlalchemy学习"><a href="#sqlalchemy学习" class="headerlink" title="sqlalchemy学习"></a><center>sqlalchemy学习</center></h3><a id="more"></a>

<h3 id="1-session与scoped-session"><a href="#1-session与scoped-session" class="headerlink" title="1. session与scoped_session"></a>1. session与scoped_session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scoped_session用在多线程环境下，内部通过threading.local()对象存储session,是线程隔离的,在同一线程中，多次创建的session对象是相同的，也就是可以同时操作同一个数据对象；</span><br><span class="line">而原生的session，多次创建都不同，而数据对象只能add到一个session对象中，不能同时被多个不同的session 操作，只有当一个session.close()之后，这个数据对象才能被其他session使用；</span><br><span class="line">而且同一个数据对象多次add,多次提交，在数据库中也只有一条记录；</span><br></pre></td></tr></table></figure>



<h3 id="2-session中authflash-autocommit参数默认值是什么？意义是什么？"><a href="#2-session中authflash-autocommit参数默认值是什么？意义是什么？" class="headerlink" title="2. session中authflash, autocommit参数默认值是什么？意义是什么？"></a>2. session中authflash, autocommit参数默认值是什么？意义是什么？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个参数用来表示在执行查询之前，自动将session中累计的状态改变发送到数据库</span></span><br><span class="line"><span class="comment"># 就是执行session.query()之前，会自动执行session.flush(),将session中累计的改变通过sql语句的形式</span></span><br><span class="line"><span class="comment"># 发送到数据库，</span></span><br><span class="line">autoflash = <span class="literal">True</span> <span class="comment">#默认值，</span></span><br><span class="line"><span class="comment"># 因此执行sesion.add()后，在执行session.commit()之前，使用session.query()就能查询到这次的改变；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对事务，不会自动提交，需要手动 session.commit()提交到数据库，</span></span><br><span class="line">autocommit = <span class="literal">False</span> <span class="comment">#默认值</span></span><br></pre></td></tr></table></figure>

<h3 id="3-常用数据类型："><a href="#3-常用数据类型：" class="headerlink" title="3.常用数据类型："></a>3.常用数据类型：</h3><ul>
<li>Integer</li>
<li>Float (默认总共6位)</li>
<li>Boolean — tinyint</li>
<li>DECIMAL(10, 6)  —  总共10位，有6位是小数位，超过截取，没超过补0；</li>
<li>Enum(“python”, “flask”, “django”) 只能取这三个值；</li>
<li>Date :  使用 datetime.date.today()</li>
<li>DateTime: 使用 datetime.datetime.now()</li>
<li>Time: datetime.time(2, 3, 5)</li>
<li>Text</li>
<li>LONGTEXT</li>
</ul>
<h3 id="4-Column-的常用参数"><a href="#4-Column-的常用参数" class="headerlink" title="4. Column 的常用参数"></a>4. Column 的常用参数</h3><ul>
<li>primary_key</li>
<li>autoincrement   # 对于主键自动为True</li>
<li>nullable 默认为True</li>
<li>default 设置默认值</li>
<li>onupdate=datetime.now :当修改带这个参数的字段时，这个字段的此属性将自动更新时间；</li>
<li>name 参数自定义设置字段名</li>
</ul>
<h3 id="5-query参数"><a href="#5-query参数" class="headerlink" title="5. query参数"></a>5. query参数</h3><ul>
<li>表格类 query(Article)</li>
<li>表格类对象 query(Article.id, Article.price)</li>
<li>聚合函数 func.avg(Ariticle.price)</li>
</ul>
<h3 id="6-filter-参数"><a href="#6-filter-参数" class="headerlink" title="6. filter 参数"></a>6. filter 参数</h3><ul>
<li>filter( == )</li>
<li>filter(!=)</li>
<li>filter(Article.title.like=’%’)  ilike (大小写无关)</li>
<li>in_([])  在这里面， 不在这里面是 <code>~ in_([])</code></li>
<li><code>and_()</code>  </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(and_(Note.body == <span class="string">'foo'</span>, Note.title == <span class="string">'Foo'</span>))</span><br><span class="line">filter(Note.body == <span class="string">'foo'</span>, Note.title == <span class="string">'Foo'</span>)</span><br><span class="line">filter(Note.body == <span class="string">'foo'</span>).filter(Note.title == <span class="string">'Foo'</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>or_()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">filter(or_(Note.body == <span class="string">'foo'</span>, Note.body == <span class="string">'bar'</span>))</span><br></pre></td></tr></table></figure>

<h3 id="7-外键约束的ondelete参数有哪些"><a href="#7-外键约束的ondelete参数有哪些" class="headerlink" title="7.外键约束的ondelete参数有哪些"></a>7.外键约束的ondelete参数有哪些</h3><ul>
<li><pre><code class="python">uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>), nullable=<span class="literal">False</span>) <span class="comment"># 下面的功能通过原生的sql得出的，在通过ORM操作时，不一样；</span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ondelete&#x3D;&quot;RESTRICT&quot; ,默认值，当删除父表中的对象时，与它有关的子表中的对象因为这个约束不能删除，报错；</span><br><span class="line">- ondelete&#x3D;&quot;NO ACTION&quot;, 行为与&quot;RESTRICT&quot;一致；</span><br><span class="line">- ondelete&#x3D;&quot;CASCADE&quot;  ,当删除父类的对象，与它有关的子表记录也被删除；</span><br><span class="line">- ondelete&#x3D;&quot;SET NULL&quot;, 当删除父类的对象，与它有关的子表记录设置为NULL, 如果此时还设置nullable&#x3D;False,那么不能创建这样的外键；</span><br><span class="line"></span><br><span class="line">### 8. 通过relationship 这个关系属性来获取对应的对象</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">class User(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;user&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    name &#x3D; Column(String(20))</span><br><span class="line">    # articles &#x3D; relationship(&#39;Article&#39;, backref&#x3D;&#39;user&#39;)</span><br><span class="line">    # 这是关系属性，不会添加到数据库中，可以任意修改它，而不用修改数据库</span><br><span class="line">    # 查看用户的所有文章</span><br><span class="line">    # 可以省略 back_populates&#x3D;&#39;user&#39;这个属性；</span><br><span class="line">    # 一旦使用backref&#x3D;&#39;user&#39;，那么另一侧一定不能再定义user属性，否则报错；</span><br><span class="line">    </span><br><span class="line">    articles &#x3D; relationship(&#39;Article&#39;)  </span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;User&lt;name:%s&gt;&quot; % self.name</span><br><span class="line"></span><br><span class="line">class Article(Base):</span><br><span class="line">    __tablename__ &#x3D; &#39;article&#39;</span><br><span class="line">    id &#x3D; Column(Integer, primary_key&#x3D;True)</span><br><span class="line">    title &#x3D; Column(String(20), nullable&#x3D;False)</span><br><span class="line">    price &#x3D; Column(Float, nullable&#x3D;False)</span><br><span class="line">    # ondelete&#x3D;&quot;RESTRICT&quot;, &quot;NO ACTION&quot;</span><br><span class="line">    # ondelete&#x3D;&quot;CASCADE&quot;</span><br><span class="line">    # ondelete&#x3D;&quot;SET NULL&quot;</span><br><span class="line">    uid &#x3D; Column(Integer, ForeignKey(&#39;user.id&#39;))</span><br><span class="line">    # user &#x3D; relationship(&#39;User&#39;, back_populates&#x3D;&#39;articles&#39;)</span><br><span class="line">    # 查看文章对应的用户</span><br><span class="line">    user &#x3D; relationship(&#39;User&#39;)</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;&lt;Article(title:%s&gt;&quot; % self.title</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上面的两个表建立联系，除了使用uid的方式</span></span><br><span class="line">article = Article(title=<span class="string">'test'</span>, price=<span class="number">23.42</span>, uid=<span class="number">1</span>) </span><br><span class="line"><span class="comment"># 通过relationship来建立关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以为作者的文章赋值：</span></span><br><span class="line">user = User(name=<span class="string">'cgn'</span>)</span><br><span class="line">article1 = Article(title=<span class="string">'三国演义'</span>, price=<span class="number">234.23</span>)</span><br><span class="line">article2 = Article(title=<span class="string">'水浒传'</span>, price=<span class="number">232.10</span>)</span><br><span class="line"></span><br><span class="line">user.articles.append(article1)</span><br><span class="line">user.articles.append(article2)</span><br><span class="line"></span><br><span class="line">session.add(user)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以通过为文章的作者赋值</span></span><br><span class="line">article = Article(title=<span class="string">'红楼梦'</span>, price=<span class="number">23.234</span>)</span><br><span class="line"></span><br><span class="line">user = session.query(User).filter_by(id=<span class="number">1</span>).first()</span><br><span class="line">article.author = user</span><br><span class="line">session.add(article)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<ul>
<li>如何定义一对一关系：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>))</span><br><span class="line">    articles = relationship(<span class="string">'Article'</span>)</span><br><span class="line">    <span class="comment"># 定义User与UserExtend的一对一关系，通过在没有ForeignKey的这一侧，定义relationship时</span></span><br><span class="line">    <span class="comment"># 使用userlist=False来说明；这时候 user.u_extend没有append方法，只能</span></span><br><span class="line">    <span class="comment"># 通过user.u_extend = userextend_obj 来进行赋值</span></span><br><span class="line">    u_extend = relationship(<span class="string">'UserExtend'</span>, uselist=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;User&lt;name:%s&gt;"</span> % self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtend</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'userextend'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    school = Column(String(<span class="number">20</span>))</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line">    ue_user = relationship(<span class="string">'User'</span>) <span class="comment"># 默认不能使用 append方法，可以认为默认就是uselist=False</span></span><br></pre></td></tr></table></figure>

<ul>
<li>简化一对一关系的书写：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在有外键的表中定义关系属性时，使用</span><br><span class="line">ue_user = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'u_extend'</span>, uselist=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>使用sql语句删除时，将参考外键的参数进行删除；</li>
<li><strong>当使用<code>orm</code> 进行删除时，情况有变化：</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果外键的字段可以为NULL，那么将设置NULL, 同时user删除</span></span><br><span class="line"><span class="comment"># 如果外键的字段不可以为NULL, 那么删除时将报错；行为和执行sql语句一样；</span></span><br><span class="line">session.delete(user)  </span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>

<ul>
<li>还可以使用<code>cascade</code> 参数，定义删除一个父对象时(使用cascade的一侧)，子对象如何操作？</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cascade： 默认取值， save-update, merge</span><br><span class="line">save-update: 作用是，当为父对象执行 session.add()操作时，子对象也同时被添加到session中；</span><br><span class="line">其他参数：</span><br><span class="line">delete: 当父对象执行删除操作时，子对象也将被删除(而在一对多关系时，默认的删除行为是父对象删除时，子对象设置为NULL)</span><br><span class="line">delete-orphan: 参数表示当父对象和子对象关系解除后，子对象也删除(而默认的行为是设置为NULL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge的作用就是可以插入并更新数据，当执行merge时候，子对象也将执行merge操作；</span></span><br><span class="line">user = User(name=<span class="string">'testmerge'</span>, id=<span class="number">10</span>)</span><br><span class="line">article1 = Article(title=<span class="string">'test1'</span>, id=<span class="number">32</span>)</span><br><span class="line">article2 = Article(title=<span class="string">'test2'</span>, id=<span class="number">80</span>)</span><br><span class="line">user.articles.append(article1)</span><br><span class="line">user.articles.append(article2)</span><br><span class="line">session.merge(user)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure>



<h3 id="9-定义多对多关系"><a href="#9-定义多对多关系" class="headerlink" title="9. 定义多对多关系"></a>9. 定义多对多关系</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">article_tag = Table(</span><br><span class="line">    <span class="string">'article_tag'</span>, </span><br><span class="line">    Base.metadata,</span><br><span class="line">    <span class="comment"># 定义联合主键</span></span><br><span class="line">    Column(<span class="string">'article_id'</span>, Integer, ForeignKey(<span class="string">'article.id'</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">    Column(<span class="string">'tag_id'</span>, Integer, ForeignKey(<span class="string">'tag.id'</span>), primary_key=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    tags = relationship(<span class="string">'Tag'</span>, secondary=article_tag, backref=<span class="string">'articles'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Article: title:%s"</span> % self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tag'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&lt;Tag: name:%s&gt;"</span> % self.name</span><br></pre></td></tr></table></figure>

<h3 id="10-排序方式"><a href="#10-排序方式" class="headerlink" title="10. 排序方式"></a>10. 排序方式</h3><ul>
<li>默认升序(asc)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(Article.create_time.desc()).all() <span class="comment"># 倒序</span></span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(text(<span class="string">"create_time"</span>)).all() <span class="comment"># 升序</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article).order_by(text(<span class="string">"-create_time"</span>)).all() <span class="comment"># 降序</span></span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = Column(DateTime, default=datetime.now)</span><br><span class="line"></span><br><span class="line">    __mapper_args__ = &#123;</span><br><span class="line">        <span class="string">"order_by"</span>: -create_time   <span class="comment"># 倒序  create_time.desc()</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    articles = session.query(<span class="string">'Article'</span>).all()</span><br><span class="line">    print(articles)  <span class="comment"># 按照 __mapper_args__ 的排序方式输出；</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以使用如下方式：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'article'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    create_time = Column(DateTime, default=datetime.now)</span><br><span class="line">    uid = Column(Integer, ForeignKey(<span class="string">'user.id'</span>))</span><br><span class="line"></span><br><span class="line">    author = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'articles'</span>, order_by=create_time.desc()))</span><br></pre></td></tr></table></figure>

<h3 id="11-limit-offset"><a href="#11-limit-offset" class="headerlink" title="11. limit, offset"></a>11. limit, offset</h3><ul>
<li>取前10篇文章：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">articles = session.query(Article)[<span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">articles = session.query(Article).offset(<span class="number">10</span>).limit(<span class="number">10</span>).all()</span><br><span class="line">articles = session.query(Article).slice(<span class="number">0</span>, <span class="number">10</span>).all()</span><br></pre></td></tr></table></figure>

<h3 id="12-使用-lazy-’dynamic’"><a href="#12-使用-lazy-’dynamic’" class="headerlink" title="12. 使用 lazy=’dynamic’"></a>12. 使用 lazy=’dynamic’</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当调用关系属性会返回大量的数据记录，并且总是需要对关系属性返回的结果附加额外的查询时才需要使用动态加载：</span><br><span class="line">lazy=<span class="string">'dynamic'</span>;</span><br><span class="line">author = relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'articles'</span>, lazy=<span class="string">'dynamic'</span>))</span><br></pre></td></tr></table></figure>

<h3 id="13-group-by-与having"><a href="#13-group-by-与having" class="headerlink" title="13. group_by  与having"></a>13. group_by  与having</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询每个年龄段中年龄小于18的人数；</span></span><br><span class="line">session.query(User.age, func.count(User.id)).group_by(User.age).having(User.age &lt; <span class="number">18</span>).all()</span><br></pre></td></tr></table></figure>

<h3 id="14-join"><a href="#14-join" class="headerlink" title="14. join"></a>14. join</h3><ul>
<li>join是内连接</li>
<li>按照用户发表的文章数量进行排序，如果文章数量相同，按照id的降序排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session.query(User).join(Article, User.id == Article.uid).group_by(User.id).order_by(func.count(Article.id).desc(), User.id.desc()).all()</span><br></pre></td></tr></table></figure>

<h3 id="15-子查询"><a href="#15-子查询" class="headerlink" title="15. 子查询"></a>15. 子查询</h3><ul>
<li>一次查询的条件依赖于另一个查询的结果时，就是子查询</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用两次查询，传统上</span></span><br><span class="line">user = session.query(User).filter_by(username=<span class="string">'李四'</span>).first()</span><br><span class="line">result = session.query(User).filter_by(city=user.city, age=user.age).all()</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用子查询， 只查找一次</span></span><br><span class="line">stmt = session.query(User.city.label(<span class="string">'city'</span>), User.age.label(<span class="string">'age'</span>)).filter_by(username=<span class="string">'李四'</span>).subquery()</span><br><span class="line"></span><br><span class="line">result = session.query(User).filter(User.city == stmt.c.city, User.age == stmt.c.age).all()</span><br><span class="line"><span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>flask wtfroms 组件源码分析</title>
    <url>/2020/02/22/flask-wtforms-%E7%BB%84%E4%BB%B6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="flask-wtforms-源码分析"><a href="#flask-wtforms-源码分析" class="headerlink" title=" flask wtforms 源码分析"></a><center> flask wtforms 源码分析</center></h2><a id="more"></a>

<h3 id="1-WTForms-组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示-默认没有开启CSRF保护"><a href="#1-WTForms-组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示-默认没有开启CSRF保护" class="headerlink" title="1. WTForms 组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示(默认没有开启CSRF保护)"></a>1. WTForms 组件使用类定义表单，验证用户输入的内容，向用户显示错误信息提示(默认没有开启CSRF保护)</h3><ul>
<li>安装组件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install flask-wtf</span><br><span class="line"><span class="comment"># flask-wtf 默认开启CSRF保护，文件上传功能与Flask集成</span></span><br><span class="line"><span class="comment"># 同时也按照了依赖包 wtforms;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>从定义表单类开始分析流程</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    name = StringField(</span><br><span class="line">        label=<span class="string">'用户名'</span>,  <span class="comment"># &lt;label for="name"&gt;用户名&lt;/label&gt;</span></span><br><span class="line">        validators=[validators.DataRequired()],</span><br><span class="line">        widget=widgets.TextInput(), <span class="comment"># 可以不用，有默认值</span></span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;, <span class="comment"># 为生成的&lt;input type="text" class="from-control"&gt;设置class</span></span><br><span class="line">        default=<span class="string">'alex'</span> <span class="comment"># 默认值</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd = PasswordField(</span><br><span class="line">        label=<span class="string">'密码'</span>,</span><br><span class="line">        validators=[validators.DataRequired(message=<span class="string">'密码不能为空.'</span>)],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    pwd_confirm = PasswordField(</span><br><span class="line">        label=<span class="string">'重复密码'</span>,</span><br><span class="line">        validators=[</span><br><span class="line">            validators.DataRequired(message=<span class="string">'重复密码不能为空.'</span>),</span><br><span class="line">            validators.EqualTo(<span class="string">'pwd'</span>, message=<span class="string">'两次密码不一致.'</span>)</span><br><span class="line">        ],</span><br><span class="line">        widget=widgets.PasswordInput(),</span><br><span class="line">        render_kw=&#123;<span class="string">'class'</span>: <span class="string">'form-control'</span>&#125;</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<ul>
<li>Form类继承了元类的子类，所以它的子类都要调用元类的<code>__init__</code> 方法；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Form继承了一个使用元类创建的类，那么类定义的时候就会执行元类的__init__方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span><span class="params">(with_metaclass<span class="params">(FormMeta, BaseForm)</span>)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="comment"># class NewBase(metaclass=FormMeta, BaseForm):  # python3写法</span></span><br><span class="line"><span class="comment">#		pass</span></span><br><span class="line"><span class="comment"># class NewBase(BaseForm):   # python2 写法</span></span><br><span class="line"><span class="comment">#		__metaclass__ = FormMeta</span></span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_metaclass</span><span class="params">(meta, base=object)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> meta(<span class="string">"NewBase"</span>, (base,), &#123;&#125;) <span class="comment">#等价于创建一个名字是NewBase的类，同时指定了base为父类，没有传入任何类属性</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里就是元类的定义，就是为子类增加了两条属性；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, name, bases, attrs)</span>:</span></span><br><span class="line">        <span class="comment"># cls就是一个类对象，就是子类对象</span></span><br><span class="line">        <span class="comment"># name 就是类名</span></span><br><span class="line">        <span class="comment"># bases 就是cls的父类</span></span><br><span class="line">        <span class="comment"># attrs 就是类中定义的属性</span></span><br><span class="line">        type.__init__(cls, name, bases, attrs)</span><br><span class="line">        cls._unbound_fields = <span class="literal">None</span></span><br><span class="line">        cls._wtforms_meta = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这些所做的工作就是找出定义的所有字段，然后给类添加一个_unbound_fields的属性，属性值就是</span></span><br><span class="line">        <span class="comment"># [(字段名字， 字段的值)]  并且这个列表是按照你定义字段的上下顺序排过序的；</span></span><br><span class="line">        <span class="keyword">if</span> cls._unbound_fields <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            fields = []</span><br><span class="line">            <span class="comment"># dir(cls) 获取cls 以及它的父类，祖先类中定义的所有属性，除了元类中定义的类属性；</span></span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> dir(cls):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">                    unbound_field = getattr(cls, name)</span><br><span class="line">                    <span class="keyword">if</span> hasattr(unbound_field, <span class="string">'_formfield'</span>):</span><br><span class="line">                        fields.append((name, unbound_field))</span><br><span class="line">			<span class="comment"># 根据fields中的每个元素，对下标为1的子元素的creation_counter值进行排序，如果相同，则</span></span><br><span class="line">            <span class="comment"># 根据下标为0的元素排序</span></span><br><span class="line">            fields.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>].creation_counter, x[<span class="number">0</span>]))</span><br><span class="line">            cls._unbound_fields = fields</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls._wtforms_meta <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bases = []</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> mro_class <span class="keyword">in</span> cls.__mro__:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">'Meta'</span> <span class="keyword">in</span> mro_class.__dict__:</span><br><span class="line">                    bases.append(mro_class.Meta)</span><br><span class="line">            <span class="comment"># 为cls添加一个属性，属性值是一个类，这个类是Meta,Meta的父类为bases,没有任何类属性</span></span><br><span class="line">            <span class="comment"># 等价于</span></span><br><span class="line">            <span class="comment"># class Meta(bases):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            <span class="comment"># 这里如果定义的LoginForm没有Meta 属性的话，那么这里就只有一个类</span></span><br><span class="line">            <span class="comment"># class Meta(DefaultMeta):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            <span class="comment"># 如果定义的LoginForm添加了Meta类，用于修改Meta类的行为的话，那么这时候就会变成</span></span><br><span class="line">            <span class="comment"># class Meta(Meta, DefaultMeta):</span></span><br><span class="line">            <span class="comment"># 		pass</span></span><br><span class="line">            cls._wtforms_meta = type(<span class="string">'Meta'</span>, tuple(bases), &#123;&#125;)</span><br><span class="line">        <span class="comment">#   cls._wtforms_meta = Meta(bases)</span></span><br><span class="line">        <span class="keyword">return</span> type.__call__(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<h3 id="2-执行初始化如何做的"><a href="#2-执行初始化如何做的" class="headerlink" title="2.执行初始化如何做的"></a>2.执行初始化如何做的</h3><ul>
<li>当调用<code>form = LoginForm()</code>  发生了什么?</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/login', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="comment"># 这里的调用顺序为</span></span><br><span class="line">        <span class="comment"># 如果这个类或者它的父类是由元类创建，那么先调用元类的__call__ 方法</span></span><br><span class="line">        <span class="comment"># 类或者父类中是否有__new__,有的话将调用__new__方法；</span></span><br><span class="line">        <span class="comment"># 接下来根据__new__的返回值调用响应的__init__方法；</span></span><br><span class="line">        form = LoginForm()</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, form=form)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = LoginForm(formdata=request.form)</span><br><span class="line">        <span class="keyword">if</span> form.validate():</span><br><span class="line">            print(<span class="string">"用户提交数据通过格式验证,提交的值为:"</span>, form.data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(form.errors)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">'login.html'</span>, form=form)</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行Form类的<code>__init__</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span><span class="params">(with_metaclass<span class="params">(FormMeta, BaseForm)</span>)</span>:</span></span><br><span class="line">    Meta = DefaultMeta</span><br><span class="line">	<span class="comment"># 可以传递formdata , obj, data 这三个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, formdata=None, obj=None, prefix=<span class="string">''</span>, data=None, meta=None, **kwargs)</span>:</span></span><br><span class="line"> 		<span class="comment"># 生成一个DefaultMet对象,与CSRF有关，默认没有开启</span></span><br><span class="line">        meta_obj = self._wtforms_meta() </span><br><span class="line">        <span class="keyword">if</span> meta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> isinstance(meta, dict):</span><br><span class="line">            meta_obj.update_values(meta)</span><br><span class="line">        <span class="comment"># 根据我们定义的LoginForm的__mro__属性值作为查找列表，从Form开始，找到它的下一个类，执行</span></span><br><span class="line">        <span class="comment"># __init__方法</span></span><br><span class="line">        super(Form, self).__init__(self._unbound_fields, meta=meta_obj, prefix=prefix)</span><br><span class="line">		<span class="comment"># 根据上面的结果，此时form._fields已经存储了&#123;'name': StringField_obj, 'pwd':PasswordField_obj&#125; 这样的信息</span></span><br><span class="line">        <span class="comment"># </span></span><br><span class="line">        <span class="keyword">for</span> name, field <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">            <span class="comment"># 为form对象设置属性，如果定义了name字段，pwd字段，那么</span></span><br><span class="line">            <span class="comment"># form.name = StringField()</span></span><br><span class="line">            <span class="comment"># form.pwd = StringField()</span></span><br><span class="line">            setattr(self, name, field)</span><br></pre></td></tr></table></figure>

<ul>
<li><span style="color:red">self.process(formdata, obj, data=data, **kwargs) </span> 接下来将执行后面的<a id="return"><a href="#process">process</a> </a></li>
<li>根据上一步找到的父类，执行这里的<code>__init__</code> 方法：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseForm</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="comment"># 传过来的是 </span></span><br><span class="line">    <span class="comment"># fields = [('name', unbound_obj), ('pwd', unbound_obj)]</span></span><br><span class="line">    <span class="comment"># meta = DefaultMeta()</span></span><br><span class="line">    <span class="comment"># prefix = ''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fields, prefix=<span class="string">''</span>, meta=DefaultMeta<span class="params">()</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prefix <span class="keyword">and</span> prefix[<span class="number">-1</span>] <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">'-_;:/.'</span>:</span><br><span class="line">            prefix += <span class="string">'-'</span></span><br><span class="line"></span><br><span class="line">        self.meta = meta</span><br><span class="line">        self._prefix = prefix</span><br><span class="line">        self._errors = <span class="literal">None</span></span><br><span class="line">        self._fields = OrderedDict()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hasattr(fields, <span class="string">'items'</span>):</span><br><span class="line">            fields = fields.items()</span><br><span class="line"></span><br><span class="line">        translations = self._get_translations()</span><br><span class="line">        extra_fields = []</span><br><span class="line">        <span class="comment"># 如果为True的话，那么 extra_fields = [('csrf_token', unbound_obj)]</span></span><br><span class="line">        <span class="keyword">if</span> meta.csrf:</span><br><span class="line">            self._csrf = meta.build_csrf(self)</span><br><span class="line">            extra_fields.extend(self._csrf.setup_form(self))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, unbound_field <span class="keyword">in</span> itertools.chain(fields, extra_fields):</span><br><span class="line">            options = dict(name=name, prefix=prefix, translations=translations)</span><br><span class="line">            field = meta.bind_field(self, unbound_field, options)</span><br><span class="line">            <span class="comment"># 给form对象的_fields属性赋值为 &#123;'name': StringField(), 'pwd': PasswordField()&#125;</span></span><br><span class="line">            <span class="comment"># 至此初始化完成</span></span><br><span class="line">            self._fields[name] = field</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行<code>class DefaultMeta(object):</code> 的<code>bind_field</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind_field</span><span class="params">(self, form, unbound_field, options)</span>:</span></span><br><span class="line">	<span class="comment"># 这里就是执行定义的StringField, PassworldField的bind 方法</span></span><br><span class="line">       <span class="comment"># options=&#123;'name': name, 'prefix': prefix, 'translations': translations&#125;</span></span><br><span class="line">       <span class="keyword">return</span> unbound_field.bind(form=form, **options)</span><br></pre></td></tr></table></figure>

<ul>
<li>接着调用<code>class UnboundField(object):</code> 的<code>bind</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里的参数名必须与 options的键名一致</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, form, name, prefix=<span class="string">''</span>, translations=None, **kwargs)</span>:</span></span><br><span class="line">      kw = dict(</span><br><span class="line">          self.kwargs,  <span class="comment"># 这里的就是定义字段的各个参数值，如valiations,label ...</span></span><br><span class="line">          _form=form,</span><br><span class="line">          _prefix=prefix,</span><br><span class="line">          _name=name,</span><br><span class="line">          _translations=translations,</span><br><span class="line">          **kwargs <span class="comment"># 目前为&#123;&#125;</span></span><br><span class="line">      )</span><br><span class="line">      <span class="comment"># 接下来再次调用各自field_class类的初始化函数</span></span><br><span class="line">      <span class="comment"># 比如: 调用StringField()的初始化函数，在自己定义关键字参数的基础上添加了</span></span><br><span class="line">      <span class="comment"># _from,_prefix,_name, _translations参数</span></span><br><span class="line">      <span class="keyword">return</span> self.field_class(*self.args, **kw)</span><br></pre></td></tr></table></figure>

<ul>
<li>接着调用这里的<code>__new__</code> 函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Field base class</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    errors = tuple()</span><br><span class="line">    process_errors = tuple()</span><br><span class="line">    raw_data = <span class="literal">None</span></span><br><span class="line">    validators = tuple()</span><br><span class="line">    widget = <span class="literal">None</span></span><br><span class="line">    _formfield = <span class="literal">True</span></span><br><span class="line">    _translations = DummyTranslations()</span><br><span class="line">    do_not_call_in_templates = <span class="literal">True</span>  <span class="comment"># Allow Django 1.4 traversal</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'_form'</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'_name'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            <span class="comment"># 这时候执行这个条件，也就是执行各自的__init__方法</span></span><br><span class="line">            <span class="keyword">return</span> super(Field, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># label='用户名',</span></span><br><span class="line">        <span class="comment"># validators=[</span></span><br><span class="line">        <span class="comment">#     validators.DataRequired('用户名不能为空.'),</span></span><br><span class="line">        <span class="comment">#     validators.Length(min=6, max=18, message='用户名长度必须大于%(min)d且小于%(max)d')</span></span><br><span class="line">        <span class="comment"># ],</span></span><br><span class="line">        <span class="comment"># widget=widgets.TextInput(),</span></span><br><span class="line">        <span class="comment"># render_kw=&#123;'class': 'form-control'&#125;</span></span><br><span class="line">            <span class="keyword">return</span> UnboundField(cls, *args, **kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>__init__</code> 方法终于可以执行了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, label=None, validators=None, filters=tuple<span class="params">()</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              description=<span class="string">''</span>, id=None, default=None, widget=None,</span></span></span><br><span class="line"><span class="function"><span class="params">              render_kw=None, _form=None, _name=None, _prefix=<span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _translations=None, _meta=None)</span>:</span></span><br><span class="line">   </span><br><span class="line">     <span class="keyword">if</span> _translations <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self._translations = _translations</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> _meta <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.meta = _meta</span><br><span class="line">     <span class="keyword">elif</span> _form <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.meta = _form.meta</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">raise</span> TypeError(<span class="string">"Must provide one of _form or _meta"</span>)</span><br><span class="line"></span><br><span class="line">     self.default = default</span><br><span class="line">     self.description = description</span><br><span class="line">     self.render_kw = render_kw</span><br><span class="line">     self.filters = filters</span><br><span class="line">     self.flags = Flags()</span><br><span class="line">     self.name = _prefix + _name</span><br><span class="line">     self.short_name = _name</span><br><span class="line">     self.type = type(self).__name__</span><br><span class="line">     self.validators = validators <span class="keyword">or</span> list(self.validators)</span><br><span class="line"></span><br><span class="line">     self.id = id <span class="keyword">or</span> self.name</span><br><span class="line">     self.label = Label(self.id, label <span class="keyword">if</span> label <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> self.gettext(_name.replace(<span class="string">'_'</span>, <span class="string">' '</span>).title()))</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> widget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">         self.widget = widget</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> v <span class="keyword">in</span> itertools.chain(self.validators, [self.widget]):</span><br><span class="line">         flags = getattr(v, <span class="string">'field_flags'</span>, ())</span><br><span class="line">         <span class="keyword">for</span> f <span class="keyword">in</span> flags:</span><br><span class="line">             <span class="comment"># 为 self.flags 设置 required = True</span></span><br><span class="line">             setattr(self.flags, f, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><a id="process">这里就是处理process的逻辑</a> , <a href="#return">返回上面调用的process</a> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(self, formdata=None, obj=None, data=None, **kwargs)</span>:</span></span><br><span class="line">      formdata = self.meta.wrap_formdata(self, formdata)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="comment"># XXX we want to eventually process 'data' as a new entity.</span></span><br><span class="line">          <span class="comment">#     Temporarily, this can simply be merged with kwargs.</span></span><br><span class="line">          kwargs = dict(data, **kwargs)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> name, field, <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">          <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> hasattr(obj, name):</span><br><span class="line">              field.process(formdata, getattr(obj, name))</span><br><span class="line">          <span class="keyword">elif</span> name <span class="keyword">in</span> kwargs:</span><br><span class="line">              field.process(formdata, kwargs[name])</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              field.process(formdata)</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def process(self, formdata, data&#x3D;unset_value):</span><br><span class="line"></span><br><span class="line">      self.process_errors &#x3D; []</span><br><span class="line">      if data is unset_value:</span><br><span class="line">          try:</span><br><span class="line">              data &#x3D; self.default()</span><br><span class="line">          except TypeError:</span><br><span class="line">              data &#x3D; self.default</span><br><span class="line"></span><br><span class="line">      self.object_data &#x3D; data</span><br><span class="line"></span><br><span class="line">      try:</span><br><span class="line">          self.process_data(data)</span><br><span class="line">      except ValueError as e:</span><br><span class="line">          self.process_errors.append(e.args[0])</span><br><span class="line"></span><br><span class="line">      if formdata is not None:</span><br><span class="line">          if self.name in formdata:</span><br><span class="line">              self.raw_data &#x3D; formdata.getlist(self.name)</span><br><span class="line">          else:</span><br><span class="line">              self.raw_data &#x3D; []</span><br><span class="line"></span><br><span class="line">          try:</span><br><span class="line">              self.process_formdata(self.raw_data)</span><br><span class="line">          except ValueError as e:</span><br><span class="line">              self.process_errors.append(e.args[0])</span><br><span class="line"></span><br><span class="line">      try:</span><br><span class="line">          for filter in self.filters:</span><br><span class="line">              self.data &#x3D; filter(self.data)</span><br><span class="line">      except ValueError as e:</span><br><span class="line">          self.process_errors.append(e.args[0])</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="3-如何使用它？"><a href="#3-如何使用它？" class="headerlink" title="3. 如何使用它？"></a>3. 如何使用它？</h3><ul>
<li><code>print(form.name)</code> 将执行<code>StringField</code> 的<code>__str__</code> 方法 </li>
<li>同时在模板文件中使用 <code></code> 也将自动调用 <code>__str__</code> 方法，将转化为<code>HTML</code> 代码；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self()  <span class="comment"># 执行__call__</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, **kwargs)</span>:</span> <span class="comment"># 这里也可以直接 form.name() 可以传入关键字参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> self.meta.render_field(self, kwargs)</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>DefaultMeta</code> 的<code>render_field</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">render_field</span><span class="params">(self, field, render_kw)</span>:</span></span><br><span class="line"></span><br><span class="line">    other_kw = getattr(field, <span class="string">'render_kw'</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> other_kw <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        render_kw = dict(other_kw, **render_kw)</span><br><span class="line">    <span class="keyword">return</span> field.widget(field, **render_kw)  </span><br><span class="line"></span><br><span class="line"> widget = widgets.TextInput()  <span class="comment"># 对于 StringField类来说就是它</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>TextInput</code> 的<code>__call__()</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, field, **kwargs)</span>:</span></span><br><span class="line">     <span class="comment"># 这里可以传入自定义'id' 和'type'</span></span><br><span class="line">     kwargs.setdefault(<span class="string">'id'</span>, field.id)  </span><br><span class="line">     kwargs.setdefault(<span class="string">'type'</span>, self.input_type)</span><br><span class="line">     <span class="keyword">if</span> <span class="string">'value'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">         kwargs[<span class="string">'value'</span>] = field._value()</span><br><span class="line">     <span class="keyword">if</span> <span class="string">'required'</span> <span class="keyword">not</span> <span class="keyword">in</span> kwargs <span class="keyword">and</span> <span class="string">'required'</span> <span class="keyword">in</span> getattr(field, <span class="string">'flags'</span>, []):</span><br><span class="line">         kwargs[<span class="string">'required'</span>] = <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> HTMLString(<span class="string">'&lt;input %s&gt;'</span> % self.html_params(name=field.name, **kwargs))</span><br></pre></td></tr></table></figure>

<ul>
<li>当执行<code>form.validate()</code> 函数时，执行字段的验证功能；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 作用就是查找类中是否自定义了 validate_字段名 这样的方法；</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self)</span>:</span></span><br><span class="line">     extra = &#123;&#125;</span><br><span class="line">     <span class="comment"># self._fields = &#123;'name': StingField(), 'pwd': PasswordField()&#125;</span></span><br><span class="line">     <span class="keyword">for</span> name <span class="keyword">in</span> self._fields: </span><br><span class="line">         inline = getattr(self.__class__, <span class="string">'validate_%s'</span> % name, <span class="literal">None</span>)</span><br><span class="line">         <span class="keyword">if</span> inline <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">             extra[name] = [inline]</span><br><span class="line">     <span class="keyword">return</span> super(Form, self).validate(extra)</span><br></pre></td></tr></table></figure>

<ul>
<li>最终会调用 <code>BaseForm</code> 中的<code>validate</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, extra_validators=None)</span>:</span></span><br><span class="line"></span><br><span class="line">     self._errors = <span class="literal">None</span></span><br><span class="line">     success = <span class="literal">True</span></span><br><span class="line">     <span class="keyword">for</span> name, field <span class="keyword">in</span> iteritems(self._fields):</span><br><span class="line">         <span class="keyword">if</span> extra_validators <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> name <span class="keyword">in</span> extra_validators:</span><br><span class="line">             extra = extra_validators[name]</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             extra = tuple()</span><br><span class="line">         <span class="comment"># 这里会最终去每个StringField, PasswordField中调用 validate(form, extra)</span></span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> field.validate(self, extra):</span><br><span class="line">             success = <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> success</span><br></pre></td></tr></table></figure>

<ul>
<li>最终调用validate(), 将错误存放在errors 这个列表中；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, form, extra_validators=tuple<span class="params">()</span>)</span>:</span></span><br><span class="line"> </span><br><span class="line">      self.errors = list(self.process_errors)</span><br><span class="line">      stop_validation = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Call pre_validate</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          self.pre_validate(form)</span><br><span class="line">      <span class="keyword">except</span> StopValidation <span class="keyword">as</span> e:</span><br><span class="line">          <span class="keyword">if</span> e.args <span class="keyword">and</span> e.args[<span class="number">0</span>]:</span><br><span class="line">              self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line">          stop_validation = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">          self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Run validators</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> stop_validation:</span><br><span class="line">          chain = itertools.chain(self.validators, extra_validators)</span><br><span class="line">          stop_validation = self._run_validation_chain(form, chain)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># Call post_validate</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          self.post_validate(form, stop_validation)</span><br><span class="line">      <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">          self.errors.append(e.args[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> len(self.errors) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="4-对于获取表单中的数据方式"><a href="#4-对于获取表单中的数据方式" class="headerlink" title="4. 对于获取表单中的数据方式:"></a>4. 对于获取表单中的数据方式:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果使用formdata 参数传递，需要用request.form来进行赋值</span><br><span class="line"><span class="number">2.</span> 如果使用data参数传递，需要使用字典来进行赋值；</span><br><span class="line"><span class="number">3.</span> 获取表单中各个字段的数据通过 form.name.data来获取</span><br></pre></td></tr></table></figure>

<h3 id="5-使用flask-wtf扩展开启CSRF"><a href="#5-使用flask-wtf扩展开启CSRF" class="headerlink" title="5. 使用flask-wtf扩展开启CSRF"></a>5. 使用<code>flask-wtf</code>扩展开启CSRF</h3><p>总结：看源码学到的关于函数传递变参的知识：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, **kwargs)</span>:</span></span><br><span class="line">	print(a, kwargs)</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 这时候传参数的时候，不能仅仅认为kwargs就是一个字典，而直接传过去一个字典</span></span><br><span class="line"><span class="comment"># func(10, &#123;'hello': 'world'&#125;) # 这时候就会报错，它会说传递了两个参数，但是只能接收一个；</span></span><br><span class="line"><span class="comment"># 注意一定要是关键字参数的形式: kwargs=&#123;'hello': 'world'&#125;</span></span><br><span class="line"><span class="comment"># 或者func(a, **&#123;'hello': 'world'&#125;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二点就是在传递多个参数的时候可以这样做：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcA</span><span class="params">(a, b)</span>:</span></span><br><span class="line">	bdict = dict(name=<span class="string">'name'</span>, world=<span class="string">'w'</span>, translations=<span class="string">'trans'</span>)</span><br><span class="line">	funcB(**bdict) <span class="comment"># funcB 必须要有name, world，translations参数，或者其他的关键字参数也可以</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcB</span><span class="params">(name, world, translations, **kwargs)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>wtforms</tag>
      </tags>
  </entry>
  <entry>
    <title>python 多重继承与MRO</title>
    <url>/2020/02/21/python-%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E4%B8%8EMRO/</url>
    <content><![CDATA[<h2 id="python多重继承-混入-Mixin-以及MRO"><a href="#python多重继承-混入-Mixin-以及MRO" class="headerlink" title="python多重继承,混入(Mixin),以及MRO"></a><center>python多重继承,混入(Mixin),以及MRO</center></h2><a id="more"></a>

<h3 id="1-不同python版本对Class-不同的解释"><a href="#1-不同python版本对Class-不同的解释" class="headerlink" title="1. 不同python版本对Class 不同的解释"></a>1. 不同python版本对<code>Class</code> 不同的解释</h3><ul>
<li>python2.7 中存在有经典类和新式类</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span>  <span class="comment"># 经典类</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: len(dir(A))</span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span><span class="keyword">pass</span>　<span class="comment"># 新式类</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: len(dir(B))</span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">18</span></span><br></pre></td></tr></table></figure>

<ul>
<li>python3.x版本中,所有定义的类都是新式类，即便写法不一样；</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span><span class="keyword">pass</span>      <span class="comment"># 新式类                                                                                                      </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: len(dir(A))                                                                                                              </span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">26</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(object)</span>:</span><span class="keyword">pass</span>   <span class="comment"># 新式类                                                                                                  </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: len(dir(B))                                                                                                              </span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">26</span></span><br></pre></td></tr></table></figure>

<ul>
<li>判断一个实例是否是一个类的对象时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isinstance(obj, Class) # 用来判断obj是否是class或者其父类的一个实例；</span><br><span class="line">type(obj) is Class  # 可以用来判断obj是否是Class创建，不能用来判断有继承关系的父类</span><br></pre></td></tr></table></figure>

<ul>
<li>与继承有关的特殊类方法，实例对象没有此方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__base__  <span class="comment"># 第一个父类</span></span><br><span class="line">__bases__  <span class="comment"># 父类组成的元祖</span></span><br><span class="line">__mro__ <span class="comment"># 方法解析顺序组成的元祖</span></span><br><span class="line">mro()   <span class="comment"># 返回方法解析顺序组成的列表</span></span><br><span class="line">__subclasses__() <span class="comment"># 类的子类组成的列表</span></span><br></pre></td></tr></table></figure>

<ul>
<li>私有属性在定义时，就会自动转变为<code>_class__attr</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span><span class="params">(object)</span>:</span></span><br><span class="line">	__COUNT = <span class="number">100</span>   <span class="comment"># 内部已经转化为 _Animal__COUNT = 100</span></span><br><span class="line">    HEIGHT = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ini__</span><span class="params">(self, age, weight, height)</span>:</span></span><br><span class="line">            self.__COUNT += <span class="number">1</span>  <span class="comment"># 内部转化为self._Animal__COUNT = self._Animal__COUNT + 1</span></span><br><span class="line"> <span class="number">10</span>         self.age = age</span><br><span class="line"> <span class="number">11</span>         self.__weight = weight <span class="comment"># 内部转化为　self._Animal__weight = weight</span></span><br><span class="line"> <span class="number">12</span>         self.HEIGHT = height</span><br><span class="line"> <span class="number">13</span>  </span><br><span class="line"> <span class="number">14</span>     <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">15</span>         print(<span class="string">'&#123;&#125; eat'</span>.format(self.__class__.__name__))</span><br><span class="line"> <span class="number">16</span>  </span><br><span class="line"> <span class="number">17</span>     <span class="function"><span class="keyword">def</span> <span class="title">__getweight</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">18</span>         print(self.__weight) <span class="comment"># self._Animal__weight</span></span><br><span class="line"> <span class="number">19</span>  </span><br><span class="line"> <span class="number">20</span>     @classmethod</span><br><span class="line"> <span class="number">21</span>     <span class="function"><span class="keyword">def</span> <span class="title">showcount1</span><span class="params">(cls)</span>:</span>  </span><br><span class="line"> <span class="number">22</span>         print(cls)</span><br><span class="line"> <span class="number">23</span>         print(cls.__dict__) </span><br><span class="line"> <span class="number">24</span>         print(cls.__COUNT)  <span class="comment"># cls._Animal__COUNT</span></span><br><span class="line"> <span class="number">25</span>  </span><br><span class="line"> <span class="number">26</span>     @classmethod</span><br><span class="line"> <span class="number">27</span>     <span class="function"><span class="keyword">def</span> <span class="title">__showcount2</span><span class="params">(cls)</span>:</span>  <span class="comment"># self._Animal__showcount2(cls)</span></span><br><span class="line"> <span class="number">28</span>         print(cls.__COUNT)</span><br><span class="line"> <span class="number">29</span>  </span><br><span class="line"> <span class="number">30</span>     <span class="function"><span class="keyword">def</span> <span class="title">showcount3</span><span class="params">(self)</span>:</span></span><br><span class="line"> <span class="number">31</span>         print(self.__COUNT) <span class="comment"># self._Animal__COUNT</span></span><br><span class="line"> <span class="number">32</span>  </span><br><span class="line"> <span class="number">33</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line"> <span class="number">34</span>     NAME = <span class="string">'CAT'</span>   </span><br><span class="line"> <span class="number">35</span>     __COUNT = <span class="number">200</span>  <span class="comment"># self._Cat__COUNT</span></span><br><span class="line"> c = Cat(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: c.__dict__</span><br><span class="line">Out[<span class="number">5</span>]: &#123;<span class="string">'HEIGHT'</span>: <span class="number">5</span>, <span class="string">'_Animal__COUNT'</span>: <span class="number">101</span>, <span class="string">'_Animal__weight'</span>: <span class="number">4</span>, <span class="string">'age'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Cat.__dict__</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">dict_proxy(&#123;<span class="string">'NAME'</span>: <span class="string">'CAT'</span>,</span><br><span class="line">            <span class="string">'_Cat__COUNT'</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">'__doc__'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'__module__'</span>: <span class="string">'study_subclass'</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: Animal.__dict__</span><br><span class="line">Out[<span class="number">8</span>]: </span><br><span class="line">dict_proxy(&#123;<span class="string">'HEIGHT'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'_Animal__COUNT'</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">'_Animal__getweight'</span>: &lt;function study_subclass.__getweight&gt;,</span><br><span class="line">            <span class="string">'_Animal__showcount2'</span>: &lt;classmethod at <span class="number">0x7ff0ae878f30</span>&gt;,</span><br><span class="line">            <span class="string">'__dict__'</span>: &lt;attribute <span class="string">'__dict__'</span> of <span class="string">'Animal'</span> objects&gt;,</span><br><span class="line">            <span class="string">'__doc__'</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">'__init__'</span>: &lt;function study_subclass.__init__&gt;,</span><br><span class="line">            <span class="string">'__module__'</span>: <span class="string">'study_subclass'</span>,</span><br><span class="line">            <span class="string">'__weakref__'</span>: &lt;attribute <span class="string">'__weakref__'</span> of <span class="string">'Animal'</span> objects&gt;,</span><br><span class="line">            <span class="string">'eat'</span>: &lt;function study_subclass.eat&gt;,</span><br><span class="line">            <span class="string">'showcount1'</span>: &lt;classmethod at <span class="number">0x7ff0ae878280</span>&gt;,</span><br><span class="line">            <span class="string">'showcount3'</span>: &lt;function study_subclass.showcount3&gt;&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: c.showcount1()  <span class="comment"># 把c的类传入cls中去</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">study_subclass</span>.<span class="title">Cat</span>'&gt;</span></span><br><span class="line">&#123;'__module__': 'study_subclass', '__doc__': None, 'NAME': 'CAT', '_Cat__COUNT': 200&#125;</span><br><span class="line"><span class="number">100</span>　<span class="comment"># 因为Cat.__dict__中没有_Animal__COUNT,所以到父类中找，找到了父类;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="2-多重继承问题"><a href="#2-多重继承问题" class="headerlink" title="2. 多重继承问题"></a>2. 多重继承问题</h3><ul>
<li><p>python支持多继承，但同时也带来了二义性(如何调用哪个父类中的方法)，提供了深度优先（经典类)和广度优先(新式类）策略来解决这样的问题</p>
</li>
<li><p>python2.７版本中的经典类中，类没有<code>mro()</code> 方法和<code>__mro__</code>属性，它的MRO执行顺序是这样的</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/mul.png" alt="经典类MRO执行策略"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">上面的执行顺序就是　F--&gt;E---&gt;B--&gt;A--&gt;D，然后Ｃ无法访问到（不知道原因）</span><br></pre></td></tr></table></figure>

<ul>
<li><p>新式类中使用的是 <code>C3算法</code>，解决了经典类中的无法访问到的问题(使用的是<code>深度优先算法</code>)，改进了(<code>广度优先算法</code>)中存在<code>单调性</code>问题（单调性指的就是一旦F(D, E) ,那么在Ｆ的所有子类中，访问顺序都是从D到Ｅ)</p>
<p>针对上面的继承关系，新式类的MRO顺序是下面这样的：</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/new.png" alt="新式类MRO顺序"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">新式类中mro执行顺序Ｆ--&gt;E--&gt;B--&gt;D--&gt;C--&gt;A--object</span><br></pre></td></tr></table></figure>

<p><strong>这里使用了Ｃ3算法，要生成F的继续顺序时(理解为调用mro()),首先将入度为０(指向该节点的箭头数量)的节点放入列表，并将F节点及与它有关的箭头从上图删除；继续寻找入度为０的节点，找到Ｅ和Ｄ,左侧优先的原则，将E放入列表，然后删除；接下来找到B和Ｄ,将Ｂ放入列表；接下来就是Ｄ,然后C,接下来就是Ａ,最后一个元素就是object</strong> </p>
</li>
<li><p>多重继承的情况下，可能存在重复调用问题，当每个子类中都使用<code>父类.属性名</code> 调用父类的方法时，父类重复调用, 为了解决这个问题，使用super()这个类就可以解决这个问题；</p>
</li>
</ul>
<h3 id="3-super与MRO"><a href="#3-super与MRO" class="headerlink" title="3.super与MRO"></a>3.super与MRO</h3><ul>
<li>新式类，都会自带<code>__mro__</code> 属性，当使用super()调用父类的方法时，会按照<code>__mro__</code> 属性中的元素逐个查找方法，如果找到就停止查找，如果没有找到就报错；</li>
<li>super()是一个类，可以接收的参数如下:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">super() <span class="comment"># 只能在python3中使用，与 super(cls, self)相同</span></span><br><span class="line"><span class="comment"># 第一个参数是类名，第二个参数是一个实例化对象，这个对象可以是子类的实例化对象</span></span><br><span class="line"><span class="comment"># 第一个参数type就是从__mro__找到的那个类的位置开始</span></span><br><span class="line"><span class="comment"># 第二个参数obj,决定的就是用哪个类的__mro__</span></span><br><span class="line">super(type, obj)</span><br><span class="line">super(type1, type2) <span class="comment"># 可以都是类，如果想使用super(F, F), 必须使用super(F, F).f(F())才能使用</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用super()类，之所以能够解决上面的问题，关键在于它查找类的方式等同与下面的方式:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里cls就相当于 type, ins 相当于类的实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">class_query</span><span class="params">(cls, ins)</span>:</span> </span><br><span class="line">	cls_list = ins.__class__.mro()</span><br><span class="line">	<span class="keyword">return</span> cls_list[cls_list.index(cls) + <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="4-在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现"><a href="#4-在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现" class="headerlink" title="4. 在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现."></a>4. 在看源码过程中，多处使用Mixin设计模式，其实就是多重继承的表现.</h3><ul>
<li>Mixin设计模式的使用原则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mixin类不应该显式出现__init__ 初始化方法；</span><br><span class="line">Mixin类通常不能独立工作，混入其他类中的功能实现；</span><br><span class="line">Mixin类的祖先类应该也是Mixin类；</span><br><span class="line">使用Mixin类通常在继承列表的第一个位置；</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>MRO</tag>
      </tags>
  </entry>
  <entry>
    <title>flask cookie使用</title>
    <url>/2020/02/20/flask-cookie%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Flask-cookie使用"><a href="#Flask-cookie使用" class="headerlink" title="Flask cookie使用"></a><center>Flask cookie使用</center></h3><a id="more"></a>

<h3 id="1-设置和删除cookie"><a href="#1-设置和删除cookie" class="headerlink" title="1.设置和删除cookie"></a>1.设置和删除cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">"设置cookie"</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'username'</span>, <span class="string">'cgn'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete_cookie')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'删除cookie'</span>)</span><br><span class="line">    response.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="2-设置cookie的过期时间"><a href="#2-设置cookie的过期时间" class="headerlink" title="2.设置cookie的过期时间"></a>2.设置cookie的过期时间</h3><ul>
<li>第一种方式使用<code>max_age</code> 参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_max_age')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set max age'</span>)</span><br><span class="line">    <span class="comment"># max_age使用's'为单位，默认值为None,表示随着浏览器关闭过期</span></span><br><span class="line">    ＃ 这时候表示过期时间是<span class="number">10</span>s后过期</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, max_age=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方式使用<code>expires</code>参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_expires</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set expire '</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires) <span class="comment">#expires接收datetime对象</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>当同时使用<code>expires</code>, <code>max_age</code> 参数，那么将使用<code>max_age</code> 参数的值作为过期值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/set_age_expire')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_age_expire</span><span class="params">()</span>:</span></span><br><span class="line">    response = Response(<span class="string">'set age expire'</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'user'</span>, <span class="string">'cgn'</span>, expires=expires, max_age=<span class="number">30</span>) <span class="comment">#过期时间为30s</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<h3 id="3-在子域名中如何获取cookie"><a href="#3-在子域名中如何获取cookie" class="headerlink" title="3. 在子域名中如何获取cookie"></a>3. 在子域名中如何获取cookie</h3><ul>
<li>第一步:在开发过程中可以通过设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">"SERVER_NAME"</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"><span class="comment"># 在/etc/hosts 文件中添加映射</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> test.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> bp.test.com</span><br></pre></td></tr></table></figure>

<ul>
<li>第二步: 通过蓝图设置子域名访问</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, request</span><br><span class="line"></span><br><span class="line">sub_bp = Blueprint(<span class="string">'submin'</span>, __name__, subdomain=<span class="string">'bp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@sub_bp.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    get_key = request.cookies.get(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">return</span> get_key <span class="keyword">or</span> <span class="string">"Hello  none"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">'SERVER_NAME'</span>] = <span class="string">'test.com:5000'</span></span><br><span class="line"></span><br><span class="line">app.register_blueprint(sub_bp)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">    response = Response(<span class="string">"Hello world"</span>)</span><br><span class="line">    expires = datetime.now() + timedelta(days=<span class="number">30</span>)</span><br><span class="line">    response.set_cookie(<span class="string">'test'</span>, <span class="string">'cookie'</span>, domain=<span class="string">'.test.com'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>然后通过访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;test.com:5000&#x2F;index  # 设置cookie</span><br><span class="line">http:&#x2F;&#x2F;bp.test.com:5000&#x2F;index # 在子域名中访问到cookie</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>cookie</tag>
      </tags>
  </entry>
  <entry>
    <title>python描述符</title>
    <url>/2020/02/20/python%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="再谈python中的descriptor"><a href="#再谈python中的descriptor" class="headerlink" title="再谈python中的descriptor"></a><center>再谈python中的descriptor</center></h2><a id="more"></a>

<h3 id="1-flask使用data-descriptor"><a href="#1-flask使用data-descriptor" class="headerlink" title="1. flask使用data descriptor"></a>1. flask使用data descriptor</h3><ul>
<li>查看flask内置session源码时，发现使用了实现<code>__get__</code> 和<code>__set__</code> 方法的类，于是查看了相关的资料，记录如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">     s = self.get_signing_serializer(app)</span><br><span class="line">     <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">     val = request.cookies.get(app.session_cookie_name) <span class="comment"># 获取session_cookie_name这个属性</span></span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br><span class="line">     max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         data = s.loads(val, max_age=max_age)</span><br><span class="line">         <span class="keyword">return</span> self.session_class(data)</span><br><span class="line">     <span class="keyword">except</span> BadSignature:</span><br><span class="line">         <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session_cookie_name = ConfigAttribute(<span class="string">"SESSION_COOKIE_NAME"</span>)　＃Flask类中的属性</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConfigAttribute</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Makes an attribute forward to the config"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, get_converter=None)</span>:</span></span><br><span class="line">        self.__name__ = name</span><br><span class="line">        self.get_converter = get_converter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:　　＃ 通过类访问 ConfigAttribute的对象</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        rv = obj.config[self.__name__]  ＃将调用app.config[self.__name__]</span><br><span class="line">        <span class="keyword">if</span> self.get_converter <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            rv = self.get_converter(rv)</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        obj.config[self.__name__] = value <span class="comment">#将调用app.config[self.__name__] = value</span></span><br></pre></td></tr></table></figure>

<h3 id="2-分析使用-get-与-set"><a href="#2-分析使用-get-与-set" class="headerlink" title="2.分析使用__get__ 与__set__"></a>2.分析使用<code>__get__</code> 与<code>__set__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">TestDescriptor</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'get'</span>, self, obj, type)</span><br><span class="line">   ...:         <span class="keyword">return</span> obj</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'set'</span>, self, obj,  val)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">'delete'</span>, self, obj)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = TestDescriptor()</span><br><span class="line">   ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: t.d  <span class="comment"># 通过实例对象访问属性</span></span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[4]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Test.d　＃通过类访问属性</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [7]:</span> t.d = <span class="string">'hello'</span>　　＃通过实例对象设置属性 调用d.__set__</span><br><span class="line">(<span class="string">'set'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, <span class="string">'hello'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: t.d　＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, &lt;__main__.Test object at <span class="number">0x7f0386170e50</span>&gt;, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"><span class="title">Out</span>[8]:</span> &lt;__main__.Test at <span class="number">0x7f0386170e50</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: Test.d ＃调用d.__get__</span><br><span class="line">(<span class="string">'get'</span>, &lt;__main__.TestDescriptor object at <span class="number">0x7f0386187c90</span>&gt;, <span class="literal">None</span>, &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Test</span>'&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">In</span> [10]:</span> Test.d = <span class="string">'hello'</span>  <span class="comment">#直接赋值，不会调用d.__set__ </span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: t.d　　　＃　可以获得值</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d　＃　可以获得值</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="3-仅仅使用-get"><a href="#3-仅仅使用-get" class="headerlink" title="3. 仅仅使用__get__"></a>3. 仅仅使用<code>__get__</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="class"><span class="keyword">class</span> <span class="title">DataDesc</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, type=None)</span>:</span></span><br><span class="line">   ...:         <span class="keyword">return</span> (self, obj, type)</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">5</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     d = DataDesc()</span><br><span class="line">   ...:     </span><br><span class="line">In [<span class="number">6</span>]: t = Test()</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: t.d <span class="comment">#调用__get__</span></span><br><span class="line">Out[<span class="number">7</span>]: </span><br><span class="line">(&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;,</span><br><span class="line"> &lt;__main__.Test at <span class="number">0x7f55399f62d0</span>&gt;,</span><br><span class="line"> __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: Test.d  ＃调用__get__</span><br><span class="line">Out[<span class="number">8</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">n [<span class="number">9</span>]: t.d = <span class="string">'hello'</span> </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: t.d </span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: Test.d</span><br><span class="line">Out[<span class="number">11</span>]: (&lt;__main__.DataDesc at <span class="number">0x7f55399f79d0</span>&gt;, <span class="literal">None</span>, __main__.Test)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: Test.d = <span class="string">'world'</span>  </span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: t.d</span><br><span class="line">Out[<span class="number">13</span>]: <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: Test.d</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'world'</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过obj.attr 属性查找策略(优先级)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. attr是自动产生的属性（最高) 如：__class__，__str__</span><br><span class="line">2. 查找obj.__class__.__dict__ 也就是对象obj所在类中存在data descriptor对象attr(实现了&#96;__get__&#96; 和&#96;__set__&#96;方法),找到就返回&#96;__get__&#96;的执行结果，没有找到就到父类或者祖先类中查找是否有data descirptor,</span><br><span class="line">（实际上就是查找这个类属性是不是有data descriptor对象或者父类中是否存在这个对象，如果是就执行__get__方法）</span><br><span class="line">3. 就到obj.__dict__中查找，找到就返回，找不到就进入下一步;如果obj是一个类，找到descriptor就返回</span><br><span class="line">__get__的执行结果，或者普通属性的值，没有执行下一步；</span><br><span class="line">（实际上就是先查找当前类或者父类中有无此属性)</span><br><span class="line">４．在obj.__class__.__dict__中查找是否存在non-data descriptor(仅仅实现了&#96;__get__&#96;方法)，找到就返回&#96;__get__&#96; 的结果，如果找到一个普通属性，就直接返回；找不到就报AttributeError;</span><br></pre></td></tr></table></figure>

<p>通过obj.attr = value赋值策略：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 查找obj.__class__.__dict__中是否有data descriptor对象，有就调用`__set__` 方法，没有就去父类或者祖先类中查找是否有data descriptor,依然没有就进入下一步；</span><br><span class="line">２．直接在obj.__dict__中加入obj.__dict__[attr] = vlaue;</span><br></pre></td></tr></table></figure>

<p>执行顺序就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特殊类属性</span><br><span class="line">数据描述符</span><br><span class="line">实例属性</span><br><span class="line">非数据描述符</span><br><span class="line">__getattr__（如果定义了的话）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>flask session机制</title>
    <url>/2020/02/19/flask-session%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="flask-session机制"><a href="#flask-session机制" class="headerlink" title="flask session机制"></a><center>flask session机制</center></h2><a id="more"></a>

<h2 id="1-对于session处理从请求上下文执行push方法开始"><a href="#1-对于session处理从请求上下文执行push方法开始" class="headerlink" title="1. 对于session处理从请求上下文执行push方法开始"></a>1. 对于session处理从请求上下文执行push方法开始</h2><ul>
<li>首先执行ctx.push()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    session_interface = self.app.session_interface</span><br><span class="line">    ＃ 为请求上下文对象中的session对象赋值为　SecureCookieSession对象</span><br><span class="line">    self.session = session_interface.open_session(self.app, self.request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.session <span class="keyword">is</span> <span class="literal">None</span>:　＃只有当没有设置secret_key时执行它</span><br><span class="line">        <span class="comment"># 为self.session 赋值为　NullSession对象</span></span><br><span class="line">        self.session = session_interface.make_null_session(self.app)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来进入<code>class SecureCookieSessionInterface(SessionInterface):</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_session</span><span class="params">(self, app, request)</span>:</span></span><br><span class="line">      s = self.get_signing_serializer(app)</span><br><span class="line">      <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">      <span class="comment"># 从request.cookies中获取键'session'的值</span></span><br><span class="line">      val = request.cookies.get(app.session_cookie_name)</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> val:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()　＃第一次请求到来没有这个值，返回一个对象                         <span class="comment"># SecureCookieSession()</span></span><br><span class="line">      max_age = total_seconds(app.permanent_session_lifetime)</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          data = s.loads(val, max_age=max_age)</span><br><span class="line">          <span class="keyword">return</span> self.session_class(data)　</span><br><span class="line">      <span class="keyword">except</span> BadSignature:</span><br><span class="line">          <span class="keyword">return</span> self.session_class()</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SecureCookieSession</span><span class="params">(CallbackDict, SessionMixin)</span>:</span></span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">ctx = _request_ctx_stack.top</span><br><span class="line">  bp = ctx.request.blueprint</span><br><span class="line">  funcs = ctx._after_request_functions</span><br><span class="line">  <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">  <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">      funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">  <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">      response = handler(response)</span><br><span class="line">  <span class="comment"># 只要app.secret_key 被设置过，这里永远不会为False</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">      <span class="comment"># 最终执行这里的save_session </span></span><br><span class="line">      self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">  <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_session</span><span class="params">(self, app, session, response)</span>:</span></span><br><span class="line">      domain = self.get_cookie_domain(app)</span><br><span class="line">      path = self.get_cookie_path(app)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># If the session is modified to be empty, remove the cookie.</span></span><br><span class="line">      <span class="comment"># If the session is empty, return without setting the cookie.</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> session: <span class="comment">#</span></span><br><span class="line">          <span class="keyword">if</span> session.modified:</span><br><span class="line">              response.delete_cookie(</span><br><span class="line">                  app.session_cookie_name, domain=domain, path=path</span><br><span class="line">              )</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Add a "Vary: Cookie" header if the session was accessed at all.</span></span><br><span class="line">      <span class="keyword">if</span> session.accessed:</span><br><span class="line">          response.vary.add(<span class="string">"Cookie"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> self.should_set_cookie(app, session):</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      httponly = self.get_cookie_httponly(app)</span><br><span class="line">      secure = self.get_cookie_secure(app)</span><br><span class="line">      samesite = self.get_cookie_samesite(app)</span><br><span class="line">      expires = self.get_expiration_time(app, session)</span><br><span class="line">      val = self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">      response.set_cookie(</span><br><span class="line">          app.session_cookie_name,</span><br><span class="line">          val,</span><br><span class="line">          expires=expires,</span><br><span class="line">          httponly=httponly,</span><br><span class="line">          domain=domain,</span><br><span class="line">          path=path,</span><br><span class="line">          secure=secure,</span><br><span class="line">          samesite=samesite,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="２-使用session-的方式"><a href="#２-使用session-的方式" class="headerlink" title="２. 使用session  的方式"></a>２. 使用<code>session</code>  的方式</h2><ul>
<li>如何设置session</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment"># 设置session的键为'www', 值为'world </span></span><br><span class="line">    <span class="comment"># 操作session时候</span></span><br><span class="line">    <span class="comment"># 通过LocalProxy对象找到Local栈顶存储的请求上下文对象中的session属性</span></span><br><span class="line">    <span class="comment"># 执行__setitem__方法就是执行 SecureCookieSession对象的__setitem__方法</span></span><br><span class="line">    session[<span class="string">'www'</span>] = <span class="string">'world'</span></span><br><span class="line">    <span class="comment"># 默认为False,这时session的过期时间是当浏览器关闭时过期</span></span><br><span class="line">    <span class="comment"># 当设置为True时，这时session的过期时间为默认31天。</span></span><br><span class="line">    session.permanent = <span class="literal">True</span>  </span><br><span class="line">    s = SecureCookieSessionInterface()</span><br><span class="line">    value = s.get_expiration_time(app, session)</span><br><span class="line">    print(value)  <span class="comment"># 打印出设置的过期时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"set session"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如何更改session默认过期时间31天</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在上面的基础上添加此配置</span></span><br><span class="line">app.config[<span class="string">'PERMANENT_SESSION_LIFETIME'</span>] = timedelta(hours=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>获取session的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/get')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span><span class="params">()</span>:</span></span><br><span class="line">    value = session.get(<span class="string">'www'</span>)  <span class="comment"># 获取session设置的键的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"get session %s"</span> % value</span><br></pre></td></tr></table></figure>

<ul>
<li>删除session中设置的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route('/delete')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delte</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># session.pop('www') #删除session中'www'的键值对</span></span><br><span class="line">    <span class="comment"># del session['www']　# 删除session中 'www'的键值对</span></span><br><span class="line">    session.clear()　＃清空这个类似字典的容器</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"delete session</span></span><br></pre></td></tr></table></figure>

<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flask中的session 实际上使用set_cookie 方法设置名字为session的cookie,他的值是将数据通过一定的算法得出的随机数,最终是存放在客户端中，因为如果想存储在其他位置，需要自定义session;同时session中的数据不能存放敏感数据，因为可以通过其他方法解析出来</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s = <span class="string">'eyJfcGVybWFuZW50Ijp0cnVlLCJ3d3ciOnsiIGIiOiJkMjl5YkdRPSJ9fQ.Xk56XQ.SlMSH-1sIZQCixZRm5fC6uG3AVs'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: data, timestamp, secret = s.split(<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: base64_decode(data)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'&#123;"_permanent":true,"www":&#123;" b":"d29ybGQ="&#125;&#125;'</span></span><br></pre></td></tr></table></figure>

<h3 id="4-使用扩展-flask-session"><a href="#4-使用扩展-flask-session" class="headerlink" title="4.使用扩展　flask-session"></a>4.使用扩展　flask-session</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">"SESSION_REDIS"</span>] = Redis(password=<span class="string">'studyredis'</span>)</span><br><span class="line"><span class="comment"># app.config["PERMANENT_SESSION_LIFETIME"] = timedelta(days=2)</span></span><br><span class="line">app.secret_key = <span class="string">'sdfasdfas'</span></span><br><span class="line">app.config[<span class="string">'SESSION_TYPE'</span>] = <span class="string">'redis'</span></span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>session</tag>
      </tags>
  </entry>
  <entry>
    <title>flask中的信号</title>
    <url>/2020/02/19/flask%E4%B8%AD%E7%9A%84%E4%BF%A1%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="flask中的信号"><a href="#flask中的信号" class="headerlink" title="flask中的信号"></a><center>flask中的信号</center></h2><a id="more"></a>

<h3 id="1-flask中使用的信号"><a href="#1-flask中使用的信号" class="headerlink" title="1. flask中使用的信号"></a>1. flask中使用的信号</h3><ul>
<li>flask中的信号基于blinker,在请求过程中定制行为</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install blinker</span><br></pre></td></tr></table></figure>

<ul>
<li>信号对象有：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">template_rendered = _signals.signal(<span class="string">"template-rendered"</span>)＃　模板渲染之后执行</span><br><span class="line">before_render_template = _signals.signal(<span class="string">"before-render-template"</span>) <span class="comment">#模板渲染之前执行</span></span><br><span class="line">request_started = _signals.signal(<span class="string">"request-started"</span>)＃请求到来之前</span><br><span class="line">request_finished = _signals.signal(<span class="string">"request-finished"</span>)＃请求结束之后</span><br><span class="line">request_tearing_down = _signals.signal(<span class="string">"request-tearing-down"</span>)＃请求执行完毕后自动执行(无论成功与否)</span><br><span class="line">got_request_exception = _signals.signal(<span class="string">"got-request-exception"</span>)＃请求执行出现异常执行</span><br><span class="line">appcontext_tearing_down = _signals.signal(<span class="string">"appcontext-tearing-down"</span>)＃　应用上下文执行完毕后自动执行(无论成功与否)</span><br><span class="line">appcontext_pushed = _signals.signal(<span class="string">"appcontext-pushed"</span>)＃应用上下文push</span><br><span class="line">appcontext_popped = _signals.signal(<span class="string">"appcontext-popped"</span>)＃应用上下文pop</span><br><span class="line">message_flashed = _signals.signal(<span class="string">"message-flashed"</span>)<span class="comment"># 向flash添加数据时</span></span><br></pre></td></tr></table></figure>

<h3 id="2-信号触发的区域"><a href="#2-信号触发的区域" class="headerlink" title="2. 信号触发的区域:"></a>2. 信号触发的区域:</h3><ul>
<li>开始(1)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.try_trigger_before_first_request_functions() <span class="comment"># 执行@app.before_first_request</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 触发request_started信号</span></span><br><span class="line">    request_started.send(self)</span><br><span class="line">    rv = self.preprocess_request()</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        rv = self.dispatch_request()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    rv = self.handle_user_exception(e)</span><br><span class="line"><span class="keyword">return</span> self.finalize_request(rv)</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来(2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kfuncs = self.before_request_funcs.get(<span class="literal">None</span>, ()) </span><br><span class="line"><span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.before_request_funcs:</span><br><span class="line">    funcs = chain(funcs, self.before_request_funcs[bp])</span><br><span class="line"><span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">    rv = func()  <span class="comment"># 执行@app.before_request</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<ul>
<li>(3)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dispatch_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    req = _request_ctx_stack.top.request</span><br><span class="line">    <span class="keyword">if</span> req.routing_exception <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.raise_routing_exception(req)</span><br><span class="line">    rule = req.url_rule</span><br><span class="line">    <span class="comment"># if we provide automatic options for this URL and the</span></span><br><span class="line">    <span class="comment"># request came with the OPTIONS method, reply automatically</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        getattr(rule, <span class="string">"provide_automatic_options"</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">and</span> req.method == <span class="string">"OPTIONS"</span></span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> self.make_default_options_response()</span><br><span class="line">    <span class="comment"># otherwise dispatch to the handler for that endpoint</span></span><br><span class="line">    <span class="keyword">return</span> self.view_functions[rule.endpoint](**req.view_args)<span class="comment"># 执行视图函数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>(4)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    ctx = _request_ctx_stack.top</span><br><span class="line">    bp = ctx.request.blueprint</span><br><span class="line">    funcs = ctx._after_request_functions</span><br><span class="line">    <span class="keyword">if</span> bp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> bp <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[bp]))</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">None</span> <span class="keyword">in</span> self.after_request_funcs:</span><br><span class="line">        funcs = chain(funcs, reversed(self.after_request_funcs[<span class="literal">None</span>]))</span><br><span class="line">    <span class="keyword">for</span> handler <span class="keyword">in</span> funcs:</span><br><span class="line">        response = handler(response) <span class="comment">#　执行@app.after_request</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.session_interface.is_null_session(ctx.session):</span><br><span class="line">        self.session_interface.save_session(self, ctx.session, response)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>(5)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">request_finished.send(self, response=response) <span class="comment">#触发　request_finished 信号</span></span><br></pre></td></tr></table></figure>

<h3 id="3-定义信号处理函数"><a href="#3-定义信号处理函数" class="headerlink" title="3. 定义信号处理函数"></a>3. 定义信号处理函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, signals</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">'测试触发'</span>)</span><br><span class="line">    print(args, kwargs)</span><br><span class="line"></span><br><span class="line">signals.request_started.connect(func)</span><br></pre></td></tr></table></figure>

<h3 id="4-自定义信号"><a href="#4-自定义信号" class="headerlink" title="4. 自定义信号"></a>4. 自定义信号</h3><ol>
<li>导入模块</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> blinker <span class="keyword">import</span> Namespace</span><br><span class="line"></span><br><span class="line">namesapce = Namespace()</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义一个信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立一个信号</span></span><br><span class="line">login_signal = namesapce.signal(<span class="string">'login'</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>监听信号及信号处理函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 信号处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_login</span><span class="params">(sender)</span>:</span></span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    now = datetime.now()</span><br><span class="line">    username = g.username</span><br><span class="line">    log_txt = <span class="string">"&#123;username&#125;/&#123;ip&#125;/&#123;now&#125;"</span>.format(username=username, ip=ip, now=now)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'log.txt'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(<span class="string">'log'</span>)</span><br><span class="line">        f.write(log_txt + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听一个信号</span></span><br><span class="line">login_signal.connect(test_login)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>发送信号</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        g.username = username</span><br><span class="line">        login_signal.send()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span></span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>信号</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(3)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h2 id="flask学习-3"><a href="#flask学习-3" class="headerlink" title="flask学习(3)"></a><center>flask学习(3)</center></h2><a id="more"></a>

<h3 id="1-Flask的app上下文"><a href="#1-Flask的app上下文" class="headerlink" title="1.Flask的app上下文"></a>1.Flask的app上下文</h3><p>1.1 通过ctx.push()进入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> top.preserved:</span><br><span class="line">        top.pop(top._preserved_exc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Before we push the request context we have to ensure that there</span></span><br><span class="line">    <span class="comment"># is an application context.</span></span><br><span class="line">    app_ctx = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> app_ctx <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> app_ctx.app != self.app:</span><br><span class="line">        app_ctx = self.app.app_context()  <span class="comment"># 返回AppContext()对象</span></span><br><span class="line">        app_ctx.push() <span class="comment"># 将app_ctx对象通过LocalStack添加到Local中</span></span><br><span class="line">        self._implicit_app_ctx_stack.append(app_ctx)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self._implicit_app_ctx_stack.append(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>1.2 AppContext类:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app  <span class="comment"># 全局代理对象current_app　代理的就是这个app</span></span><br><span class="line">        self.url_adapter = app.create_url_adapter(<span class="literal">None</span>)</span><br><span class="line">        self.g = app.app_ctx_globals_class() <span class="comment"># 全局代理对象g 代理的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Like request context, app contexts can be pushed multiple times</span></span><br><span class="line">        <span class="comment"># but there a basic "refcount" is enough to track them.</span></span><br><span class="line">        self._refcnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Binds the app context to the current context."""</span></span><br><span class="line">        self._refcnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(sys, <span class="string">"exc_clear"</span>):</span><br><span class="line">            sys.exc_clear()</span><br><span class="line">        _app_ctx_stack.push(self)</span><br><span class="line">        appcontext_pushed.send(self.app)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, exc=_sentinel)</span>:</span></span><br><span class="line">        <span class="string">"""Pops the app context."""</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._refcnt -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._refcnt &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> exc <span class="keyword">is</span> _sentinel:</span><br><span class="line">                    exc = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">                self.app.do_teardown_appcontext(exc)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            rv = _app_ctx_stack.pop()</span><br><span class="line">        <span class="keyword">assert</span> rv <span class="keyword">is</span> self, <span class="string">"Popped wrong app context.  (%r instead of %r)"</span> % (rv, self)</span><br><span class="line">        appcontext_popped.send(self.app)</span><br><span class="line">＃　支持　<span class="keyword">with</span> 语法：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.push()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, tb)</span>:</span></span><br><span class="line">        self.pop(exc_value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> BROKEN_PYPY_CTXMGR_EXIT <span class="keyword">and</span> exc_type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            reraise(exc_type, exc_value, tb)</span><br></pre></td></tr></table></figure>

<p>1.3  应用上下文对象中的具体属性:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app_ctx_globals_class = _AppCtxGlobals  <span class="comment">#  g----&gt; 对应的类对象</span></span><br><span class="line"><span class="comment"># current_app 对应的就是　Flask()实例app</span></span><br></pre></td></tr></table></figure>

<p>1.4 </p>
<p>总结：程序上下文的生命周期：随着请求上下文的生命周期产生和销毁；每个请求都会创建新的请求上下文堆栈，因为也会创建新的程序上下文堆栈，所以g 会在每个请求中重设；</p>
<p>程序上下文可以在不需要请求存在的情况下使用(测试)，这时候只需要单独推送程序上下文，可以看到不同的程序运行状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> flask <span class="keyword">import</span> Flask, current_app, g, session, request</span><br><span class="line"><span class="comment"># 这时候所有的全局上下文对象都没有被绑定，处于程序设置状态</span></span><br><span class="line">In [<span class="number">2</span>]: app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: current_app, g, session, request</span><br><span class="line">Out[<span class="number">3</span>]: </span><br><span class="line">(&lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: app_ctx = app.app_context()</span><br><span class="line"><span class="comment"># 推送程序上下文后，程序上下文对象都绑定了各自的对象，　－－程序运行状态</span></span><br><span class="line">In [<span class="number">5</span>]: app_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">6</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;,</span><br><span class="line"> &lt;LocalProxy unbound&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]:</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: req_ctx = app.test_request_context()</span><br><span class="line"><span class="comment"># 推送请求上下文后，四个对象都绑定了各自的对象　－－－　请求运行态</span></span><br><span class="line">In [<span class="number">8</span>]: req_ctx.push()</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: current_app, g, request, session</span><br><span class="line">Out[<span class="number">9</span>]: </span><br><span class="line">(&lt;Flask <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;flask.g of <span class="string">'__main__'</span>&gt;,</span><br><span class="line"> &lt;Request <span class="string">'http://localhost/'</span> [GET]&gt;,</span><br><span class="line"> &lt;NullSession &#123;&#125;&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<h3 id="2-多app应用"><a href="#2-多app应用" class="headerlink" title="2.多app应用"></a>2.多app应用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"><span class="keyword">from</span> werkzeug.middleware.dispatcher <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, globals</span><br><span class="line"><span class="keyword">from</span> flask.globals <span class="keyword">import</span> _app_ctx_stack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app1 = Flask(<span class="string">'app01'</span>)</span><br><span class="line">app2 = Flask(<span class="string">'app02'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app1.route('/index1')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app2.route('/index2')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"wwww"</span></span><br><span class="line"></span><br><span class="line">app = DispatcherMiddleware(app1, &#123;<span class="string">'/test'</span>: app2&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#作为脚本执行时，这时候就会出现同一个　'stack':对应多个值的情况，所有使用列表存储</span></span><br><span class="line"><span class="keyword">with</span> app1.app_context():</span><br><span class="line">    print(_app_ctx_stack._local.__storage__)</span><br><span class="line">    <span class="keyword">with</span> app2.app_context():</span><br><span class="line">        print(_app_ctx_stack._local.__storage__)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;]&#125;&#125;</span><br><span class="line">&#123;<span class="number">139943283095296</span>: &#123;<span class="string">'stack'</span>: [&lt;flask.ctx.AppContext object at <span class="number">0x7f4712923a50</span>&gt;, &lt;flask.ctx.AppContext object at <span class="number">0x7f4712923c50</span>&gt;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_simple(<span class="string">'localhost'</span>, <span class="number">5000</span>, app, )</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>pymysql 与数据库连接池</title>
    <url>/2020/02/19/pymysql-%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="pymysql以及DButils"><a href="#pymysql以及DButils" class="headerlink" title="pymysql以及DButils"></a><center>pymysql以及DButils</center></h2><a id="more"></a>

<ol>
<li>使用原生sql连接数据库(pymysql)</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> ＃ 在下面的情况下，会出现问题，多线程并发执行，不能正确的获取打算的结果。</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span>      </span><br><span class="line"> <span class="number">7</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">8</span>                        database=<span class="string">'Tutorial'</span>, charset=<span class="string">'utf8'</span>)</span><br><span class="line"> <span class="number">9</span>      </span><br><span class="line"><span class="number">10</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">11</span>     cursor = CONN.cursor()</span><br><span class="line"><span class="number">12</span>     cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">13</span>     result = cursor.fetchall()</span><br><span class="line"><span class="number">14</span>     cursor.close()</span><br><span class="line"><span class="number">15</span>     print(result)</span><br><span class="line"><span class="number">16</span>      </span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">19</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">20</span>     t.start()</span><br></pre></td></tr></table></figure>

<p>２．解决方案之一，使用锁机制:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span>      </span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line"> <span class="number">5</span> <span class="keyword">import</span> threading</span><br><span class="line"> <span class="number">6</span> <span class="keyword">from</span> threading <span class="keyword">import</span> RLock</span><br><span class="line"> <span class="number">7</span>      </span><br><span class="line"> <span class="number">8</span> LOCK = RLock()</span><br><span class="line"> <span class="number">9</span> CONN = pymysql.connect(host=<span class="string">'localhost'</span>, port=<span class="number">3306</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, database=<span class="string">'Tutorial'</span>,            charset=<span class="string">'utf8'</span>)</span><br><span class="line"><span class="number">10</span>      </span><br><span class="line"><span class="number">11</span> <span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line"><span class="number">12</span>     <span class="keyword">with</span> LOCK:                                                                                                  </span><br><span class="line"><span class="number">13</span>         cursor = CONN.cursor()</span><br><span class="line"><span class="number">14</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"><span class="number">15</span>         result = cursor.fetchall()</span><br><span class="line"><span class="number">16</span>         cursor.close()</span><br><span class="line"><span class="number">17</span>      </span><br><span class="line"><span class="number">18</span>         print(result)</span><br><span class="line"><span class="number">19</span>      </span><br><span class="line"><span class="number">20</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="number">21</span>     t = threading.Thread(target=task, args=(i,))</span><br><span class="line"><span class="number">22</span>     t.start()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解决方案二, 使用DBUtils 模块创建线程池:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line">  <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line">  <span class="number">3</span> <span class="keyword">import</span> threading</span><br><span class="line">  <span class="number">4</span> <span class="keyword">import</span> pymysql</span><br><span class="line">  <span class="number">5</span> <span class="keyword">from</span> DBUtils.PooledDB <span class="keyword">import</span> PooledDB</span><br><span class="line">  <span class="number">6</span>      </span><br><span class="line">  <span class="number">7</span> POOL = PooledDB(</span><br><span class="line">  <span class="number">8</span>         creator=pymysql, <span class="comment"># 使用的哪个模块连接数据库</span></span><br><span class="line">  <span class="number">9</span>         maxconnections=<span class="number">6</span>, <span class="comment">#连接池允许的最大连接数，０或者None表示不限制数量</span></span><br><span class="line"> <span class="number">10</span>         mincached=<span class="number">2</span>, <span class="comment"># 初始化时连接池最少创建的空闲连接，　０表示不创建</span></span><br><span class="line"> <span class="number">11</span>         maxcached=<span class="number">5</span>, <span class="comment"># 连接池中最多空闲的连接，　０或者None 表示不限制</span></span><br><span class="line"> <span class="number">12</span>        ＃ maxshared=<span class="number">3</span>,                                                                                                <span class="comment">#连接池中最多共享的连接数量，０或者None表示全部共享，因为pymysql和MySQLdb等模块的threadsafety都为１,                所以值无论设置为多少，_maxshared都是０,</span></span><br><span class="line"> <span class="number">13</span>         <span class="comment"># 所以所有连接都是共享连接,这个值不用设置就行</span></span><br><span class="line"> <span class="number">14</span>         blocking=<span class="literal">True</span>, <span class="comment"># 连接池如果没有可用连接后，是否阻塞等待，True:等待;False:不等待报错</span></span><br><span class="line"> <span class="number">15</span>         maxusage=<span class="literal">None</span>, <span class="comment"># 一个连接最多被重复使用的次数，None表示没有限制</span></span><br><span class="line"> <span class="number">16</span>         setsession=[], <span class="comment"># 开始回话前执行的命令列表　如["set time_zone ..."]</span></span><br><span class="line"> <span class="number">17</span>         ping=<span class="number">0</span>, <span class="comment">#ping MySQL服务器，检查服务是否可用，０或者None 表示Never, 1,默认（ｗhenever it is requested);      2(when a cursor is created)                                                                                     </span></span><br><span class="line"> <span class="number">18</span>         <span class="comment"># 4 (when a query is executed常用) ;7 (always常用）</span></span><br><span class="line"> <span class="number">19</span>         host=<span class="string">'localhost'</span>,</span><br><span class="line"> <span class="number">20</span>         port=<span class="number">3306</span>,</span><br><span class="line"> <span class="number">21</span>         user=<span class="string">'root'</span>,</span><br><span class="line"> <span class="number">22</span>         password=<span class="string">'123456'</span>,</span><br><span class="line"> <span class="number">23</span>         database=<span class="string">'Tutorial'</span></span><br><span class="line"> <span class="number">24</span>         )</span><br><span class="line"> <span class="number">25</span>      </span><br><span class="line"> <span class="number">26</span> <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line"> <span class="number">27</span>         <span class="string">"""</span></span><br><span class="line"><span class="string"> 28         检查当前运行的连接数量是否小于最大连接数，如果大于，等待或者　raise TooManyConnections</span></span><br><span class="line"><span class="string">29         一旦关闭连接，连接就返回到连接池让后续线程使用</span></span><br><span class="line"><span class="string"> 30         :return:</span></span><br><span class="line"><span class="string"> 31         """</span></span><br><span class="line"> <span class="number">32</span>         conn = POOL.connection()</span><br><span class="line"> <span class="number">33</span>         cursor = conn.cursor()</span><br><span class="line"> <span class="number">34</span>         cursor.execute(<span class="string">'select * from Snippets_album'</span>)</span><br><span class="line"> <span class="number">35</span>         result = cursor.fetchall()</span><br><span class="line"> <span class="number">36</span>         print(<span class="string">"线程&#123;&#125;: &#123;&#125;"</span>.format(arg, result))</span><br><span class="line"> <span class="number">37</span>         conn.close()</span><br><span class="line"> <span class="number">38</span>      </span><br><span class="line"> <span class="number">39</span>      </span><br><span class="line"> <span class="number">40</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"> <span class="number">41</span>     t = threading.Thread(target=func, args=(i,))</span><br><span class="line"> <span class="number">42</span>     t.start()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(2)</title>
    <url>/2020/02/19/flask%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h2 id="Flask-学习-2"><a href="#Flask-学习-2" class="headerlink" title="Flask 学习(2)"></a><center>Flask 学习(2)</center></h2><a id="more"></a>

<h3 id="1-flask请求上下文"><a href="#1-flask请求上下文" class="headerlink" title="1.flask请求上下文"></a>1.flask请求上下文</h3><p>１．从app.run()开始调用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> werkzeug.serving <span class="keyword">import</span> run_simple</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    run_simple(host, port, self, **options) <span class="comment">#当请求进来时将调用self的__call__方法</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># reset the first request information if the development server</span></span><br><span class="line">    <span class="comment"># reset normally.  This makes it possible to restart the server</span></span><br><span class="line">    <span class="comment"># without reloader and that stuff from an interactive shell.</span></span><br><span class="line">    self._got_first_request = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span> </span><br><span class="line">    <span class="string">"""The WSGI server calls the Flask application object as the</span></span><br><span class="line"><span class="string">    WSGI application. This calls :meth:`wsgi_app` which can be</span></span><br><span class="line"><span class="string">    wrapped to applying middleware."""</span></span><br><span class="line">    <span class="keyword">return</span> self.wsgi_app(environ, start_response)　＃利用这个函数可以做中间件</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">       <span class="comment"># ctx 就是RequestContext(self, environ)的对象</span></span><br><span class="line">       ＃　ctx就封装了app,request,session</span><br><span class="line">       ctx = self.request_context(environ)  </span><br><span class="line">       error = <span class="literal">None</span></span><br><span class="line">       <span class="keyword">try</span>:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               ＃　ctx入栈</span><br><span class="line">               ＃　 _request_ctx_stack.push(self)　请求上下文入栈</span><br><span class="line">               ctx.push() </span><br><span class="line">               response = self.full_dispatch_request()</span><br><span class="line">           <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">               error = e</span><br><span class="line">               response = self.handle_exception(e)</span><br><span class="line">           <span class="keyword">except</span>:  <span class="comment"># noqa: B001</span></span><br><span class="line">               error = sys.exc_info()[<span class="number">1</span>]</span><br><span class="line">               <span class="keyword">raise</span></span><br><span class="line">           <span class="keyword">return</span> response(environ, start_response)</span><br><span class="line">       <span class="keyword">finally</span>:</span><br><span class="line">           <span class="keyword">if</span> self.should_ignore_error(error):</span><br><span class="line">               error = <span class="literal">None</span></span><br><span class="line">           ctx.auto_pop(error) 　<span class="comment"># 删除请求上下文对象（里面有app上下文对象的pop)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app, environ, request=None, session=None)</span>:</span></span><br><span class="line">        self.app = app  </span><br><span class="line">        <span class="keyword">if</span> request <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            request = app.request_class(environ)　＃将请求相关的数据封装在Request中</span><br><span class="line">        self.request = request</span><br><span class="line">        self.url_adapter = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.url_adapter = app.create_url_adapter(self.request)</span><br><span class="line">        <span class="keyword">except</span> HTTPException <span class="keyword">as</span> e:</span><br><span class="line">            self.request.routing_exception = e</span><br><span class="line">        self.flashes = <span class="literal">None</span></span><br><span class="line">        self.session = session</span><br></pre></td></tr></table></figure>



<p>使用多线程处理请求时，如何保证直接导入的request对象就是当前请求的request对象？</p>
<p>Flask解决方案就是使用Werkzeug提供的Local类实现的(类似threading.local()),存放数据的同时记录下对应线程的ID,获取数据时根据所在线程的ID获取到对应的数据；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_app_object</span><span class="params">(name)</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> getattr(top, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_find_app</span><span class="params">()</span>:</span></span><br><span class="line">    top = _app_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_app_ctx_err_msg)</span><br><span class="line">    <span class="keyword">return</span> top.app</span><br><span class="line"></span><br><span class="line">_request_ctx_stack = LocalStack()  <span class="comment">#请求上下文堆栈</span></span><br><span class="line">_app_ctx_stack = LocalStack()　＃程序上下文堆栈</span><br><span class="line">＃　全局上下文代理对象(使用代理)</span><br><span class="line">current_app = LocalProxy(_find_app)　＃app上下文代理对象</span><br><span class="line"><span class="comment"># partial()返回一个新的函数对象　obj = partial(_lookup_req_object, "request")</span></span><br><span class="line"><span class="comment"># obj() 将调用_lookup_req_object("request")这个函数</span></span><br><span class="line">request = LocalProxy(partial(_lookup_req_object, <span class="string">"request"</span>))　＃请求上下文代理对象</span><br><span class="line">session = LocalProxy(partial(_lookup_req_object, <span class="string">"session"</span>))　＃请求上下文代理对象</span><br><span class="line">g = LocalProxy(partial(_lookup_app_object, <span class="string">"g"</span>))　＃app上下文代理对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implements_bool</span><br><span class="line">class LocalProxy(object):</span><br><span class="line">    __slots__ &#x3D; (&quot;__local&quot;, &quot;__dict__&quot;, &quot;__name__&quot;, &quot;__wrapped__&quot;)</span><br><span class="line"></span><br><span class="line">    def __init__(self, local, name&#x3D;None):</span><br><span class="line">    	＃对私有变量的赋值通过_LoclaProxy__local实现</span><br><span class="line">        object.__setattr__(self, &quot;_LocalProxy__local&quot;, local)</span><br><span class="line">        object.__setattr__(self, &quot;__name__&quot;, name)</span><br><span class="line">        if callable(local) and not hasattr(local, &quot;__release_local__&quot;):</span><br><span class="line">            # &quot;local&quot; is a callable that is not an instance of Local or</span><br><span class="line">            # LocalManager: mark it as a wrapped function.</span><br><span class="line">            object.__setattr__(self, &quot;__wrapped__&quot;, local)</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    def _get_current_object(self):</span><br><span class="line">        &quot;&quot;&quot;Return the current object.  This is useful if you want the real</span><br><span class="line">        object behind the proxy at a time for performance reasons or because</span><br><span class="line">        you want to pass the object into a different context.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if not hasattr(self.__local, &quot;__release_local__&quot;):</span><br><span class="line">        	#通过self.__local()函数获取</span><br><span class="line">            return self.__local()</span><br><span class="line">        try:</span><br><span class="line">            return getattr(self.__local, self.__name__)</span><br><span class="line">        except AttributeError:</span><br><span class="line">            raise RuntimeError(&quot;no object bound to %s&quot; % self.__name__)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理Local()对象的一个栈</span></span><br><span class="line">＃这里使用LocalStack而不是直接使用Local，主要原因时为了支持多app共存</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalStack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local = Local() <span class="comment"># </span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._local.__release_local__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._local.__ident_func__</span><br><span class="line"></span><br><span class="line"><span class="meta">    @__ident_func__.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ident_func__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        object.__setattr__(self._local, <span class="string">"__ident_func__"</span>, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_lookup</span><span class="params">()</span>:</span></span><br><span class="line">            rv = self.top</span><br><span class="line">            <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">"object unbound"</span>)</span><br><span class="line">            <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(_lookup)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="string">"""Pushes a new item to the stack"""</span></span><br><span class="line">        rv = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self._local.stack = rv = []</span><br><span class="line">        rv.append(obj)</span><br><span class="line">        <span class="keyword">return</span> rv　＃使用列表存储请求上文或者app上下文对象</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Removes the topmost item from the stack, will return the</span></span><br><span class="line"><span class="string">        old value or `None` if the stack was already empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = getattr(self._local, <span class="string">"stack"</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> stack <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">elif</span> len(stack) == <span class="number">1</span>:</span><br><span class="line">            release_local(self._local)</span><br><span class="line">            <span class="keyword">return</span> stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> stack.pop()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">"__storage__"</span>, <span class="string">"__ident_func__"</span>) <span class="comment"># 对外能够被访问的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        object.__setattr__(self, <span class="string">"__storage__"</span>, &#123;&#125;)</span><br><span class="line">        object.__setattr__(self, <span class="string">"__ident_func__"</span>, get_ident)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self.__storage__.items())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        <span class="string">"""Create a proxy for a name."""</span></span><br><span class="line">        <span class="keyword">return</span> LocalProxy(self, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__release_local__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__storage__.pop(self.__ident_func__(), <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        ident = self.__ident_func__()</span><br><span class="line">        storage = self.__storage__</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            storage[ident][name] = value</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            storage[ident] = &#123;name: value&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span> self.__storage__[self.__ident_func__()][name]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(name)</span><br></pre></td></tr></table></figure>

<p>总结:</p>
<p>视图函数获取请求对象的方式:</p>
<p>Django使用传递request参数的方式来实现；</p>
<p>Flask使用上下文管理的方式来实现：</p>
<p>请求进来，将请求的所有数据封装在RequestContext对象中，然后将这个对象通过LocalStack放到Local中；</p>
<p>在视图中使用的时候，调用request的属性时，实际上调用的是LocalProxy的方法，获取真实的request对象的属性；</p>
]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>flask学习(-)</title>
    <url>/2020/02/17/flask%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="flask学习"><a href="#flask学习" class="headerlink" title="flask学习(-)"></a><center>flask学习(-)</center></h2><a id="more"></a>

<p>flask作为轻量级，易于扩展的微型python web框架。Flask有两个依赖：一个是ＷSGI工具集(Werkzeug),一个是Jinja2模板引擎。Flask只保留web开发的核心功能，其他功能全靠外部扩展来实现(比如数据库集成，表单认证，文件上传)。WSGI是python中用来规定Web服务器如何与Python Web程序进行沟通的标准，与WSGI完全兼容的Flask能够配置到各种大型网络服务器中。</p>
<p>１．配置文件</p>
<ul>
<li><code>app.config[&#39;ADMIN_NAME&#39;] = &#39;cgn&#39; 单个配置</code></li>
<li><code>app.config.update(TESTING=True, SECRET_KEY=&#39;dsfsdfs&#39;) 多个配置</code></li>
<li><code>大型配置app.config.from_object(&#39;settings.DevelopmentConfig&#39;)</code></li>
</ul>
<p>２．路由器</p>
<ul>
<li>route()的常见参数有methods, endpoint,其他参数有</li>
<li>defaults: url没有参数，但是视图函数有参数的情况下，这里可以使用它</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/test', defaults=&#123;'id': 1&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teset</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id is %s"</span> % id</span><br></pre></td></tr></table></figure>

<ul>
<li>redirect_to: 重定向到另一个位置</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/redirect', redirect_to='/test')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello redirect"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>​    subdomain:支持子域名</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/www', subdomain='www')  # 访问　www.test.com:5000/www</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">www</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"www"</span></span><br><span class="line"><span class="comment"># 设置的前提：　app.config["SERVER_NAME"] = 'test.com:5000'</span></span><br><span class="line"><span class="comment"># 同时还需要修改 hosts文件，添加　127.0.0.1　www.test.com</span></span><br></pre></td></tr></table></figure>

<ul>
<li>strict_slashes: 是否严格的’/‘结尾</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/strict', strict_slashes=False) # strict_slashes=True, 严格url</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strict</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"strict visit"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>基于装饰器实现，本质是通过　app.add_url_rule(rule, endpoint, view_func, **options)实现</li>
<li>除了基本的FBV,还可以实现CBV</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(views.MethodView)</span>:</span></span><br><span class="line">    methods = [<span class="string">'GET'</span>]</span><br><span class="line">    decorators = [auth,]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Index.GET"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Index.POST"</span></span><br><span class="line"></span><br><span class="line">app.add_url_rule(<span class="string">'/index'</span>, view_func=IndexView.as_view(name=<span class="string">'index'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>内置的URL变量转换器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string: (默认值)不包括斜线的字符串 &lt;val&gt;</span><br><span class="line">int: &lt;int:year&gt; 整型</span><br><span class="line">float: &lt;flaot:val&gt; 浮点数</span><br><span class="line">path: &lt;path:path&gt; 包含斜线的字符串</span><br><span class="line">any: &lt;any(blue, white, red):color&gt; 匹配一系列给定值中的元素</span><br><span class="line">uuid: UUID字符串</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展URL变量转换器支持正则表达式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegerConverter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map, regex)</span>:</span></span><br><span class="line">        super(RegerConverter, self).__init__(map)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="comment"># 匹配成功时，传递给视图函数的参数的值</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        ＃使用url_for 反向生成url调用的函数</span><br><span class="line">        val = super(RegerConverter, self).to_url(value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">app.url_map.converters[<span class="string">'regex'</span>] = RegerConverter</span><br><span class="line">＃使用&lt;reger:test&gt; 这个转换器</span><br><span class="line"><span class="meta">@app.route('/index/&lt;reger("\d+"):test&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_test</span><span class="params">(test)</span>:</span></span><br><span class="line">    print(test)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello %s'</span> % test</span><br></pre></td></tr></table></figure>

<p>常见的错误:</p>
<ul>
<li>自定义装饰器，当给视图函数使用多个装饰器时，装饰器的顺序很重要，如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route('/detail/&lt;int:id&gt;', methods=['GET'], endpoint='detail_id')</span></span><br><span class="line"><span class="meta">@LoginRequired   # 访问之前要确认是否已经登录</span></span><br><span class="line">＃这个装饰器要放在@app.route的下面，如果放在上面，那么将不起任何作用，这时的理解是当请求到来的时候，执行的＃　视图处理函数就是＠app.route下面的函数，而在它上面的装饰器(如果有的话)的处理逻辑没有执行；</span><br><span class="line">＃同时这时候还需要给每个使用这个装饰器的函数添加endpoint参数，因为如果不添加，可能导致下面的错误</span><br><span class="line">＃因为视图函数的名字不能相同，这时候视图函数的名字都是wrapper</span><br><span class="line"><span class="comment"># AssertionError: View function mapping is overwriting an existing endpoint function: #wrapper</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_id</span><span class="params">(id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> id <span class="keyword">in</span> data_dict:</span><br><span class="line">        info = data_dict[id]</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'detail_id.html'</span>, info=info)</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的也可以通过修改装饰器函数(不添加endpoint)也可以实现,被装饰的视图函数的名字不同</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LoginRequired</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">	@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(session)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>

<p>３．模板语言</p>
<ul>
<li>向模板中传递html格式的字符串，如何标记为safe,使用　,或者通过Markup()</li>
<li>支持宏定义</li>
<li>其他语法与Django模板相似</li>
</ul>
<p>４．请求与响应</p>
<ul>
<li>请求的属性</li>
<li>返回值</li>
<li>如何定制响应相关的属性</li>
</ul>
<p>５．请求扩展</p>
<ul>
<li>@app.before_request 在每个请求之前都要执行被这个装饰器装饰的函数，可以有返回值，一旦返回值不是None,将拦截请求，或者重定向</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实现每个请求之前检查用户是否登录，除了`/login`</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'请求之前'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/login'</span> == request.path:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'username'</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<ul>
<li>@app.before_first_request,第一个请求到来的时候执行，不管是否有返回值都不会拦截</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_first_request</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是第一个请求'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>@app.after_request, 每个请求完成后都要执行的响应处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(response)</span>:</span></span><br><span class="line">    print(<span class="string">'bye bye'</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p><strong>可以使用多个请求和多个响应处理函数，它们的执行顺序是，请求处理从上到下，而响应是从下到上,,如果第一个请求被拦截后，那么后面的请求不会执行，但是响应都会执行</strong> </p>
<ul>
<li>＠app.errorhandler定制错误处理函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Page not found'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>给模板自定义全局函数或者过滤器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_global</span><span class="params">(a1, a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span>  a1 + a2</span><br><span class="line"><span class="comment"># &#123;&#123; use_global(1, 2) &#125;&#125;</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_filter</span><span class="params">(a1, a2, a3)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2 + a3</span><br><span class="line"><span class="comment"># &#123;&#123; 3|use_filter(3, 4) &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>６．中间件</p>
<p>当请求到来的时候，实际上执行的是app.wsgi_app(environ, start_response)这个方法，利用这一点，我们可以在处理请求之前做一些事情，下面就是中间件的处理，仅仅打印一些信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMiddleware</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, app)</span>:</span></span><br><span class="line">        self.app = app</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之前'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        result = self.app(environ, start_response)</span><br><span class="line">        print(<span class="string">'&#123;&#125;: 请求之后'</span>.format(MyMiddleware.__name__))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">app.wsgi_app = MyMiddleware(app.wsgi_app)</span><br></pre></td></tr></table></figure>



<p>７．闪现</p>
<ul>
<li>基于session实现的对临时数据的存取，主要应用显示消息</li>
<li>flash(‘message’)  —&gt;存消息</li>
<li>get_flashed_messages() —&gt;取出某个请求的所有消息，返回值是列表[(‘message’, ‘category’)],然后清空；</li>
</ul>
<p>８．蓝图</p>
<p>利用蓝图可以将应用分模块安排，可以按照功能模块化程序，同时蓝图可以有自己的静态文件夹和模板文件夹，另外蓝图也可以完成请求的扩展(注册路由，错误处理函数，上下文处理函数，请求处理函数)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> views.admin <span class="keyword">import</span> admin_bp</span><br><span class="line"><span class="keyword">from</span> views.auth <span class="keyword">import</span> auth_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.register_blueprint(auth_bp, url_prefix=<span class="string">'/auth'</span>)</span><br><span class="line">app.register_blueprint(admin_bp, url_prefix=<span class="string">'/admin'</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>flask</category>
      </categories>
      <tags>
        <tag>web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Django with celery使用</title>
    <url>/2020/02/15/django-with-celery%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Django-with-celery使用"><a href="#Django-with-celery使用" class="headerlink" title=" Django with celery使用"></a><center> Django with celery使用</center></h2><a id="more"></a>

<ol>
<li>当前使用的环境:</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">------------------------- -------</span><br><span class="line">amqp                      <span class="number">2.5</span><span class="number">.2</span>  </span><br><span class="line">asgiref                   <span class="number">3.2</span><span class="number">.3</span>  </span><br><span class="line">Babel                     <span class="number">2.8</span><span class="number">.0</span>  </span><br><span class="line">billiard                  <span class="number">3.6</span><span class="number">.2</span><span class="number">.0</span></span><br><span class="line">celery                    <span class="number">4.4</span><span class="number">.0</span>  </span><br><span class="line">Django                    <span class="number">3.0</span><span class="number">.3</span>  </span><br><span class="line">django-crispy-forms       <span class="number">1.8</span><span class="number">.1</span>  </span><br><span class="line">django-registration-redux <span class="number">2.7</span>    </span><br><span class="line">flower                    <span class="number">0.9</span><span class="number">.3</span>  </span><br><span class="line">importlib-metadata        <span class="number">1.5</span><span class="number">.0</span>  </span><br><span class="line">kombu                     <span class="number">4.6</span><span class="number">.7</span>  </span><br><span class="line">numpy                     <span class="number">1.18</span><span class="number">.1</span> </span><br><span class="line">pip                       <span class="number">20.0</span><span class="number">.2</span> </span><br><span class="line">pytz                      <span class="number">2019.3</span> </span><br><span class="line">redis                     <span class="number">3.4</span><span class="number">.1</span>  </span><br><span class="line">scipy                     <span class="number">1.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>项目目录结构</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DjangoCelery/</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── demoapp</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   ├── <span class="number">0001</span>_initial.py</span><br><span class="line">│   │   ├── <span class="number">0002</span>_jobmodel.py</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tasks.py  <span class="comment"># celery 任务模块</span></span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── DjangoCelery</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── celery.py　　　＃ celery实例模块</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── kill_celery.sh</span><br><span class="line">├── manage.py</span><br><span class="line">├── start_celery.sh</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>与celery有关的文件</li>
</ol>
<ul>
<li><code>DjangoCelery/celery.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'DjangoCelery.settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'DjangoCelery'</span>)</span><br><span class="line"></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/__init__.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app <span class="keyword">as</span> celery_app</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'celery_app'</span>,)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>DjangoCelery/settings.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># celery setting</span></span><br><span class="line"></span><br><span class="line">CELERY_BROKER_URL = <span class="string">'amqp://guest:guest@localhost'</span></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>]</span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://:studyredis@localhost:6379/1'</span></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/tasks.py</code> </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task, current_task</span><br><span class="line"><span class="keyword">from</span> demoapp.models <span class="keyword">import</span> Widget</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> scipy.fftpack <span class="keyword">import</span> fft</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers)</span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_widgets</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Widget.objects.count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@shared_task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rename_widget</span><span class="params">(wdiget_id, name)</span>:</span></span><br><span class="line">    w = Widget.objects.get(id=wdiget_id)</span><br><span class="line">    w.name = name</span><br><span class="line">    w.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用track_started=True 改变任务状态变化</span></span><br><span class="line"><span class="meta">@shared_task(track_started=True) # 任务状态从PEDDING--SUCCESS变化为PEDDING-STARTED-SUCCESS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fft_random</span><span class="params">(n)</span>:</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        x = random.normal(<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">2000</span>)</span><br><span class="line">        y = fft(x)</span><br><span class="line">        <span class="keyword">if</span> i == int(j * n / <span class="number">50</span>):</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"j=&#123;&#125;"</span>.format(j))</span><br><span class="line">            current_task.update_state(state=<span class="string">'PROGRESS'</span>, meta=&#123;<span class="string">'current'</span>: i, <span class="string">'total'</span>: n&#125;)</span><br><span class="line">    <span class="keyword">return</span> random.random()</span><br></pre></td></tr></table></figure>

<ul>
<li><code>demoapp/views.py</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, username)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'ffts'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           count = int(request.POST.get(<span class="string">'ffts'</span>))</span><br><span class="line">           print(count)</span><br><span class="line">           task = fft_random.delay(count)　＃开启任务</span><br><span class="line">           job = JobModel(user=request.user, task_id=task.task_id)</span><br><span class="line">           job.save()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> <span class="string">'cancel_computation'</span> <span class="keyword">in</span> request.POST.keys():</span><br><span class="line">           task = get_active_task(request.user)</span><br><span class="line">           <span class="keyword">if</span> task:</span><br><span class="line">               celery_app.control.revoke(task.task_id, terminate=<span class="literal">True</span>) <span class="comment">#取消耗时任务</span></span><br><span class="line">               print(<span class="string">"About to cancel"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               print(<span class="string">'No active task to cancel.'</span>)</span><br><span class="line">       <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'demoapp:Profile'</span>, args=[request.user.username]))</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>启动worker,关闭worker方式</p>
<p>4.1 使用后台作业方式</p>
<ul>
<li>`celery worker -A DjangoCelery -l info &amp;``</li>
<li>``ps -ef |grep celery| grep -v grep |awk ‘{print $2}’ |xargs kill -9` </li>
</ul>
<p>4.2 使用<code>sudo systemctl start celery.service</code> 方式开启</p>
<p>  官网文档:<a href="https://docs.celeryproject.org/en/stable/userguide/daemonizing.html" target="_blank" rel="noopener">设置守护进程</a> </p>
<ul>
<li><p>首先要增加<code>celery.service</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> [Unit]</span><br><span class="line"> <span class="number">2</span> Description=Celery Service</span><br><span class="line"> <span class="number">3</span> After=network.target</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> [Service]</span><br><span class="line"> <span class="number">6</span> Type=forking</span><br><span class="line"> <span class="number">7</span> User=cgn</span><br><span class="line"> <span class="number">8</span> Group=cgn</span><br><span class="line"> <span class="number">9</span> EnvironmentFile=/etc/conf.d/celery</span><br><span class="line"><span class="number">10</span> WorkingDirectory=/home/cgn/study_celery_with_django/DjangoCelery</span><br><span class="line"><span class="number">11</span> ExecStart=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi start $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">12 &gt;---&gt;---  -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">13 &gt;---&gt;---  --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> ExecStop=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi stopwait $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">16 &gt;---&gt;--- --pidfile=$&#123;CELERYD_PID_FILE&#125;'</span></span><br><span class="line"><span class="number">17</span>  </span><br><span class="line"><span class="number">18</span> ExecReload=/bin/bash -c <span class="string">'$&#123;CELERY_BIN&#125; multi restart $&#123;CELERYD_NODES&#125; \</span></span><br><span class="line"><span class="string">19 &gt;---&gt;---   -A $&#123;CELERY_APP&#125; --pidfile=$&#123;CELERYD_PID_FILE&#125; \</span></span><br><span class="line"><span class="string">20 &gt;---&gt;---   --logfile=$&#123;CELERYD_LOG_FILE&#125; --loglevel=$&#123;CELERYD_LOG_LEVEL&#125; $&#123;CELERYD_OPTS&#125;'</span></span><br><span class="line"><span class="number">21</span>  </span><br><span class="line"><span class="number">22</span> [Install]</span><br><span class="line"><span class="number">23</span> WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后执行<code>sudo systemctl daemon-reload</code> ,每次修改之后都要先执行它</p>
</li>
<li><p>增加配置文件<code>/etc/conf.d/celery</code> </p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> CELERYD_NODES=<span class="string">"celery"</span></span><br><span class="line">  <span class="number">2</span>  </span><br><span class="line">  <span class="number">3</span>  </span><br><span class="line">  <span class="number">4</span> <span class="comment">#CELERY_BIN="/usr/local/bin/celery"</span></span><br><span class="line">  <span class="number">5</span> <span class="comment"># CELERY_BIN="/virtualenvs/bin/celery"</span></span><br><span class="line">  <span class="number">6</span> CELERY_BIN=<span class="string">"/home/cgn/.local/share/virtualenvs/study_celery_with_django-qMMGxLEz/bin/celery"</span></span><br><span class="line">  <span class="number">7</span>  </span><br><span class="line">  <span class="number">8</span> CELERY_APP=<span class="string">"DjangoCelery"</span></span><br><span class="line">  <span class="number">9</span> CELERYD_MULTI=<span class="string">"multi"</span></span><br><span class="line"> <span class="number">10</span>  </span><br><span class="line"> <span class="number">11</span> CELERYD_OPTS=<span class="string">"--time-limit=300 --concurrency=4"</span></span><br><span class="line"> <span class="number">12</span>  </span><br><span class="line"> <span class="number">13</span> CELERYD_PID_FILE=<span class="string">"/var/run/celery/%n.pid"</span></span><br><span class="line"> <span class="number">14</span> CELERYD_LOG_FILE=<span class="string">"/var/log/celery/%n%I.log"</span></span><br><span class="line"> <span class="number">15</span> CELERYD_LOG_LEVEL=<span class="string">"INFO"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以通过这个命令<code>systemd-tmpfiles --create /etc/tmpfiles.d/xxx.conf</code> 快速创建目录</p>
<p>例如　<code>/etc/tmpfiles.d/celery.conf</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d /var/run/celery <span class="number">0755</span> cgn cgn </span><br><span class="line">d /var/log/celery <span class="number">0755</span> cgn cgn</span><br></pre></td></tr></table></figure>

<p>命令解释如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--create</span><br><span class="line"> 	创建或者写入所有f,F,w,d,D,v,p,L,c,b,m标记的文件与目录</span><br><span class="line">--remove</span><br><span class="line">	删除D,R标记的目录中的内容，以及r,R标记的目录与文件本身</span><br><span class="line">--clean</span><br><span class="line">	清理所有过期的文件与目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置完成之后可以通过如下命令进行开启和停止</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo systemctl start celery.service</span><br><span class="line">sudo systemctl stop celery.service</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq初学习</title>
    <url>/2020/02/15/rabbitmq%E5%88%9D%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="rabbitmq初学习"><a href="#rabbitmq初学习" class="headerlink" title=" rabbitmq初学习"></a><center> rabbitmq初学习</center></h2><a id="more"></a>
<p>学习地址: <a href="https://www.rabbitmq.com/tutorials/tutorial-one-python.html" target="_blank" rel="noopener">rabbitmq在python中的使用</a> </p>
<p>AMQP消息路由必须有三部分:交换器，队列和绑定；</p>
<p>生产者将消息发布到交换器上，消息最终到达队列，并被消费者接收；绑定决定了消息如何从交换器路由到特定的队列。</p>
<p>1.目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">study_rabbitmq/</span><br><span class="line">├── receive_message.py</span><br><span class="line">└── send_message.py</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>receive_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">4</span>  </span><br><span class="line"> <span class="number">5</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">6</span>  </span><br><span class="line"> <span class="number">7</span> channel = connection.channel()　＃发送消息都要通过信道</span><br><span class="line"> <span class="number">8</span> <span class="comment"># 这个code不必重复使用，如果我们已经确定这个hello队列已经存在的话，如果不确定，那么就需要写上(可重复使用，只在第一次被创建)</span></span><br><span class="line"> <span class="number">9</span> channel.queue_declare(queue=<span class="string">'hello'</span>)　＃创建队列</span><br><span class="line"><span class="number">10</span>  </span><br><span class="line"><span class="number">11</span>  </span><br><span class="line"><span class="number">12</span> <span class="comment"># 无论何时接收到消息，回调函数都将被调用</span></span><br><span class="line"><span class="number">13</span> <span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></span><br><span class="line"><span class="number">14</span>     print(<span class="string">"[x] Received %r"</span> % body)</span><br><span class="line"><span class="number">15</span>  </span><br><span class="line"><span class="number">16</span> <span class="comment"># 从'hello'这个队列中接收消息，同时对于接收到的消息都要确认(通过auto_ack=True自动确认)</span></span><br><span class="line">＃ 确认之后rabbitmq 才会把这条消息从队列中删除掉；</span><br><span class="line"><span class="number">17</span> channel.basic_consume(queue=<span class="string">'hello'</span>, on_message_callback=callback, auto_ack=<span class="literal">True</span>)</span><br><span class="line"><span class="number">18</span>  </span><br><span class="line"><span class="number">19</span> print(<span class="string">"[*] Waiting for messages.To exit press CTRL+C"</span>)</span><br><span class="line"><span class="number">20</span> <span class="comment"># 开启循环等待消息到来,调用回调函数</span></span><br><span class="line"><span class="number">21</span> channel.start_consuming()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>send_message.py</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="comment">#!/usr/bin/env python</span></span><br><span class="line"> <span class="number">2</span> <span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"> <span class="number">3</span> <span class="keyword">import</span> time</span><br><span class="line"> <span class="number">4</span> <span class="keyword">import</span> pika</span><br><span class="line"> <span class="number">5</span>  </span><br><span class="line"> <span class="number">6</span> <span class="comment"># 建立与rabbitmq server的连接</span></span><br><span class="line"> <span class="number">7</span> connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="string">'localhost'</span>))</span><br><span class="line"> <span class="number">8</span> channel = connection.channel()</span><br><span class="line"> <span class="number">9</span> <span class="comment"># 创建一个接收我们消息的queue</span></span><br><span class="line"><span class="number">10</span> channel.queue_declare(queue=<span class="string">'hello'</span>)</span><br><span class="line"><span class="number">11</span> <span class="comment"># rabbitmq 不能直接发送消息到队列中，必须通过exchange,这里使用默认exchange(一个空字符串)</span></span><br><span class="line"><span class="number">12</span> <span class="comment"># routing_key 指定队列的名字，使用这个交换器根据routing_key决定将消息发送到哪个队列中</span></span><br><span class="line"><span class="number">13</span> channel.basic_publish(exchange=<span class="string">''</span>, routing_key=<span class="string">'hello'</span>, body=<span class="string">'hello world!'</span>)</span><br><span class="line"><span class="number">14</span>  </span><br><span class="line"><span class="number">15</span> print(<span class="string">"[x] Sent 'hello world!'"</span>)</span><br><span class="line"><span class="number">16</span> connection.close()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>执行过程</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.启动 consumer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python receive_message.py </span><br><span class="line">[*] Waiting <span class="keyword">for</span> messages.To exit press CTRL+C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打开另一个终端启动　producer</span></span><br><span class="line">cgn@cgn-Lenovo-S40<span class="number">-70</span>:~/study_rabbitmq$ python send_message.py </span><br><span class="line">[x] Sent <span class="string">'hello world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看队列情况</span></span><br><span class="line"> sudo rabbitmqctl list_queues</span><br><span class="line"> hello	<span class="number">0</span></span><br><span class="line"></span><br><span class="line">＃４．查看消息是否被接收，消息被处理后是否发送确认标志</span><br><span class="line">~/study_rabbitmq$ sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br><span class="line">hello	<span class="number">0</span>	<span class="number">0</span></span><br><span class="line">＃ <span class="number">5.</span> 可以使用如下命令删除这个没有意义的队列</span><br><span class="line">sudo rabbitmqctl stop_app</span><br><span class="line">sudo rabbitmqctl reset</span><br><span class="line">sudo rabbitmqctl start_app</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>celery</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>celery初认识</title>
    <url>/2020/02/08/celery%E5%88%9D%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h3 id="celery初认识"><a href="#celery初认识" class="headerlink" title="celery初认识"></a><center>celery初认识</center></h3><a id="more"></a>

<h4 id="1-在python2-7环境下使用"><a href="#1-在python2-7环境下使用" class="headerlink" title="1. 在python2.7环境下使用"></a>1. 在python2.7环境下使用</h4><p>1.1 单个任务执行</p>
<ul>
<li>准备环境</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pipenv install --python <span class="number">2.7</span></span><br><span class="line">pipenv install celery</span><br><span class="line">pipenv install redis</span><br></pre></td></tr></table></figure>

<ul>
<li><p>celery_app_task.py 文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line">backend = <span class="string">'redis://:studyredis@127.0.0.1:6379/1'</span></span><br><span class="line">broker = <span class="string">'redis://:studyredis@127.0.0.1:6379/2'</span></span><br><span class="line"></span><br><span class="line">cel = celery.Celery(<span class="string">'test'</span>, backend=backend, broker=broker)</span><br><span class="line"></span><br><span class="line"><span class="meta">@cel.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
</li>
<li><p>add_task.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line">result = add.delay(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(result.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>check_result.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="keyword">from</span> celery_app_task <span class="keyword">import</span> cel</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> = AsyncResult(id=<span class="string">''</span>, app=cel)  <span class="comment"># 这里的 id为result.id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">    result = <span class="keyword">async</span>.gete()</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">    print(<span class="string">'执行失败'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'PENDING'</span>:</span><br><span class="line">    print(<span class="string">'任务等待被执行'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'RETRY'</span>:</span><br><span class="line">    print(<span class="string">'任务异常后正在重试'</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">'STARTED'</span>:</span><br><span class="line">    print(<span class="string">'任务已经开始执行'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始执行：</p>
<ul>
<li><code>celery  worker -A celery_app_task -l info</code> 启动工作队列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40-70 v4.4.0 (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux-4.4.0-173-generic-x86_64-with-Ubuntu-16.04-xenial 2020-02-08 17:13:07</span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         test:0x7f3f8bbdc5d0</span><br><span class="line">- ** ---------- .&gt; transport:   redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">- ** ---------- .&gt; results:     redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;1</span><br><span class="line">- *** --- * --- .&gt; concurrency: 4 (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks in this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange&#x3D;celery(direct) key&#x3D;celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_app_task.add</span><br><span class="line"></span><br><span class="line">[2020-02-08 17:13:07,576: INFO&#x2F;MainProcess] Connected to redis:&#x2F;&#x2F;:**@127.0.0.1:6379&#x2F;2</span><br><span class="line">[2020-02-08 17:13:07,581: INFO&#x2F;MainProcess] mingle: searching for neighbors</span><br><span class="line">[2020-02-08 17:13:08,597: INFO&#x2F;MainProcess] mingle: all alone</span><br><span class="line">[2020-02-08 17:13:08,615: INFO&#x2F;MainProcess] celery@cgn-Lenovo-S40-70 ready.</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>向任务队列中添加任务</p>
<p><code>python add_task.py</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-02-08 17:13:55,164: INFO&#x2F;MainProcess] Received task: celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce]  </span><br><span class="line">[2020-02-08 17:13:55,170: INFO&#x2F;ForkPoolWorker-1] Task celery_app_task.add[41d54578-388f-442b-a296-cae4cebcc9ce] succeeded in 0.00431576301344s: 7</span><br></pre></td></tr></table></figure>

<p>​    </p>
</li>
</ul>
<p>  1.2 多任务添加到消息中间件中</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">​</span><br></pre></td></tr></table></figure>
<p>├── celery_task<br>│   ├── celery_app.py<br>│   ├── <strong>init</strong>.py<br>│   ├── task_one.py<br>│   └── task_two.py<br>├── my_celery.py<br>​```</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- celery_app.py</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding&#x3D;utf-8 -*-</span><br><span class="line"></span><br><span class="line">from celery import Celery</span><br><span class="line"></span><br><span class="line">celery_task &#x3D; Celery(&quot;task&quot;,</span><br><span class="line">                     broker&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;1&quot;,</span><br><span class="line">                     backend&#x3D;&quot;redis:&#x2F;&#x2F;:studyredis@127.0.0.1:6379&#x2F;2&quot;,</span><br><span class="line">                     include&#x3D;[&quot;celery_task.task_one&quot;, &quot;celery_task.task_two&quot;])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery_app <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">two.delay(<span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启ｗorker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task.celery_app -l info</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9c486e9d0</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">411</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>,<span class="number">417</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">433</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">41</span>:<span class="number">26</span>,<span class="number">443</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">771</span>: INFO/MainProcess] Received task: celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">31</span>,<span class="number">773</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">782</span>: INFO/ForkPoolWorker<span class="number">-1</span>] Task celery_task.task_one.one[c47feed3-aec0<span class="number">-4369</span><span class="number">-92</span>b7-f5101119f73a] succeeded <span class="keyword">in</span> <span class="number">5.00957920798</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">3</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">17</span>:<span class="number">48</span>:<span class="number">36</span>,<span class="number">789</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_two.two[<span class="number">72</span>b6a2ac<span class="number">-0</span>bd3<span class="number">-4</span>b92-bab0<span class="number">-5</span>f83b318f7e7] succeeded <span class="keyword">in</span> <span class="number">5.01353460201</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<h3 id="2-在python3-6-环境下如何使用？"><a href="#2-在python3-6-环境下如何使用？" class="headerlink" title="2. 在python3.6 环境下如何使用？"></a>2. 在python3.6 环境下如何使用？</h3><p>２.1  添加多个任务到任务队列中</p>
</li>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py   <span class="comment"># 必须使用这个名字</span></span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_two.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_two (x + y) is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br><span class="line"></span><br><span class="line"> -------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7fe9fc743eb8</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">819</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">18</span>,<span class="number">828</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">847</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">05</span>:<span class="number">19</span>,<span class="number">857</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加任务到消息中间件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">251</span>: INFO/MainProcess] Received task: celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">32</span>,<span class="number">253</span>: INFO/MainProcess] Received task: celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1]  </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-2</span>] Task celery_task.task_two.two[<span class="number">41</span>d8d35a<span class="number">-1648</span><span class="number">-43</span>fd-bf32-f255ae31dbc1] succeeded <span class="keyword">in</span> <span class="number">5.015381631994387</span>s: (<span class="string">'task_two (x + y) is'</span>, <span class="number">50</span>)</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">17</span>:<span class="number">37</span>,<span class="number">270</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[b5d8990d<span class="number">-1</span>f11<span class="number">-42</span>fc-bd9a-f2b6c8438dc8] succeeded <span class="keyword">in</span> <span class="number">5.016119522973895</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3. 定时任务"></a>3. 定时任务</h3><p>3.1 在python3.6环境下实现定时10s后执行，使用如下：</p>
<ul>
<li><p>目录结构如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">├── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br><span class="line">├── my_celery.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>task_one.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>
</li>
<li><p>my_celery.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_task.task_one <span class="keyword">import</span> one</span><br><span class="line"><span class="keyword">from</span> celery_task.task_two <span class="keyword">import</span> two</span><br><span class="line"></span><br><span class="line">one.delay(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">two.delay(<span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">utc_time = datetime.utcfromtimestamp(time.time()) <span class="comment">#这里必须使用utc时间</span></span><br><span class="line">add_time = timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">action_time = utc_time + add_time</span><br><span class="line"></span><br><span class="line">res = one.apply_async(args=(<span class="number">10</span>, <span class="number">10</span>), eta=action_time) <span class="comment">#　定时10s后执行</span></span><br><span class="line">print(res.id)</span><br></pre></td></tr></table></figure>
</li>
<li><p>开启worker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-------------- celery@cgn-Lenovo-S40<span class="number">-70</span> v4<span class="number">.4</span><span class="number">.0</span> (cliffs)</span><br><span class="line">--- ***** ----- </span><br><span class="line">-- ******* ---- Linux<span class="number">-4.4</span><span class="number">.0</span><span class="number">-173</span>-generic-x86_64-<span class="keyword">with</span>-Ubuntu<span class="number">-16.04</span>-xenial <span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span></span><br><span class="line">- *** --- * --- </span><br><span class="line">- ** ---------- [config]</span><br><span class="line">- ** ---------- .&gt; app:         task:<span class="number">0x7f5c2b12de80</span></span><br><span class="line">- ** ---------- .&gt; transport:   redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">- ** ---------- .&gt; results:     redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">2</span></span><br><span class="line">- *** --- * --- .&gt; concurrency: <span class="number">4</span> (prefork)</span><br><span class="line">-- ******* ---- .&gt; task events: OFF (enable -E to monitor tasks <span class="keyword">in</span> this worker)</span><br><span class="line">--- ***** ----- </span><br><span class="line"> -------------- [queues]</span><br><span class="line">                .&gt; celery           exchange=celery(direct) key=celery</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">[tasks]</span><br><span class="line">  . celery_task.task_one.one</span><br><span class="line">  . celery_task.task_two.two</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">726</span>: INFO/MainProcess] Connected to redis://:**@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>/<span class="number">1</span></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">24</span>,<span class="number">736</span>: INFO/MainProcess] mingle: searching <span class="keyword">for</span> neighbors</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">757</span>: INFO/MainProcess] mingle: all alone</span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">09</span>:<span class="number">25</span>,<span class="number">772</span>: INFO/MainProcess] celery@cgn-Lenovo-S40<span class="number">-70</span> ready.</span><br></pre></td></tr></table></figure>
</li>
<li><p>将定时任务添加到任务队列中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python my_celery.py</span><br><span class="line"></span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">34</span>,<span class="number">567</span>: INFO/MainProcess] Received task: celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965]  ETA:[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">11</span>:<span class="number">11</span>:<span class="number">44.447419</span>+<span class="number">00</span>:<span class="number">00</span>] </span><br><span class="line">[<span class="number">2020</span><span class="number">-02</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">11</span>:<span class="number">49</span>,<span class="number">652</span>: INFO/ForkPoolWorker<span class="number">-4</span>] Task celery_task.task_one.one[d4eda9f6<span class="number">-013</span>d<span class="number">-4608</span><span class="number">-9892</span><span class="number">-1</span>b1605a1b965] succeeded <span class="keyword">in</span> <span class="number">5.012816867005313</span>s: (<span class="string">'task_one: x + y is'</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3.2 实现周期性定时任务</p>
<ul>
<li><p>目录结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">── celery_task</span><br><span class="line">│   ├── celery.py</span><br><span class="line">│   ├── task_one.py</span><br><span class="line">│   └── task_two.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>celery.py </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"></span><br><span class="line">celery_task = Celery(<span class="string">"task"</span>,</span><br><span class="line">                     broker=<span class="string">"redis://:studyredis@127.0.0.1:6379/1"</span>,</span><br><span class="line">                     backend=<span class="string">"redis://:studyredis@127.0.0.1:6379/2"</span>,</span><br><span class="line">                     include=[<span class="string">"celery_task.task_one"</span>, <span class="string">"celery_task.task_two"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每10s执行一次celery_task.task_one,参数是(10, 10)</span></span><br><span class="line">celery_task.conf.beat_schedule = &#123;</span><br><span class="line">        <span class="string">"each10s_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>, <span class="comment"># 任务函数</span></span><br><span class="line">            <span class="string">"schedule"</span>: <span class="number">10</span>, <span class="comment"># 每10s执行一次　＃频率</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each1m_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(minute=<span class="number">1</span>),  <span class="comment"># 每一分钟执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">"each24hours_task"</span>: &#123;</span><br><span class="line">            <span class="string">"task"</span>: <span class="string">"celery_task.task_one.one"</span>,</span><br><span class="line">            <span class="string">"schedule"</span>: crontab(hour=<span class="string">'*/24'</span>),  <span class="comment"># 每24小时执行一次</span></span><br><span class="line">            <span class="string">"args"</span>: (<span class="number">10</span>, <span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>task_one.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> celery_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@celery_task.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"task_one: x + y is"</span>, (x + y)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>开始生产出周期性任务,需要一个生产者beat</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">celery beat -A celery_task</span><br><span class="line"></span><br><span class="line">celery beat v4<span class="number">.4</span><span class="number">.0</span> (cliffs) <span class="keyword">is</span> starting.</span><br><span class="line">__    -    ... __   -        _</span><br><span class="line">LocalTime -&gt; 2020-02-08 20:47:44</span><br><span class="line">Configuration -&gt;</span><br><span class="line">    . broker -&gt; redis://:**@127.0.0.1:6379/1</span><br><span class="line">    . loader -&gt; celery.loaders.app.AppLoader</span><br><span class="line">    . scheduler -&gt; celery.beat.PersistentScheduler</span><br><span class="line">    . db -&gt; celerybeat-schedule</span><br><span class="line">    . logfile -&gt; [stderr]@%WARNING</span><br><span class="line">    . maxinterval -&gt; 5.00 minutes (300s)</span><br></pre></td></tr></table></figure>

<ul>
<li>开启worker </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">celery worker -A celery_task -l info</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery</tag>
      </tags>
  </entry>
  <entry>
    <title>分析中间件CsrfViewMiddleware源码</title>
    <url>/2020/01/28/%E5%88%86%E6%9E%90%E4%B8%AD%E9%97%B4%E4%BB%B6CsrfViewMiddleware%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h3 id="CsrfViewMiddleware-源码分析"><a href="#CsrfViewMiddleware-源码分析" class="headerlink" title=" ＣsrfViewMiddleware 源码分析"></a><center> <code>ＣsrfViewMiddleware</code> 源码分析</center></h3><a id="more"></a>

<ol>
<li><p>流程图</p>
<p><img src="https://raw.githubusercontent.com/lioncgn/upload_images/master/CsrfViewMiddleware.jpg" alt="avatar"></p>
</li>
</ol>
<ol start="2">
<li>源码分析</li>
</ol>
<ul>
<li>在工程的配置文件要有中间件 <code>CsrfViewMiddleware</code> 才能使用<code>csrf</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.csrf.CsrfViewMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">    <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>请求进来，首先通过各个中间件的<code>process_requst</code> 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="comment"># 第一次请求，返回None</span></span><br><span class="line">       csrf_token = self._get_token(request)</span><br><span class="line">       <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">           <span class="comment"># Use same token next time.</span></span><br><span class="line">           request.META[<span class="string">'CSRF_COOKIE'</span>] = csrf_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">_get_token</span><span class="params">(self, request)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">               <span class="keyword">return</span> request.session.get(CSRF_SESSION_KEY)</span><br><span class="line">           <span class="keyword">except</span> AttributeError:</span><br><span class="line">               <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                   <span class="string">'CSRF_USE_SESSIONS is enabled, but request.session is not '</span></span><br><span class="line">                   <span class="string">'set. SessionMiddleware must appear before CsrfViewMiddleware '</span></span><br><span class="line">                   <span class="string">'in MIDDLEWARE%s.'</span> % (<span class="string">'_CLASSES'</span> <span class="keyword">if</span> settings.MIDDLEWARE <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">               )</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           ＃ 默认配置中，CSRF_USE_SESSIONS 为<span class="literal">False</span>，总不会执行</span><br><span class="line">           <span class="keyword">try</span>:</span><br><span class="line">           ＃　第一次请求，没有cookie，返回<span class="literal">None</span></span><br><span class="line">               cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]</span><br><span class="line">           <span class="keyword">except</span> KeyError:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">           csrf_token = _sanitize_token(cookie_token)</span><br><span class="line">           <span class="keyword">if</span> csrf_token != cookie_token:</span><br><span class="line">               <span class="comment"># Cookie token needed to be replaced;</span></span><br><span class="line">               <span class="comment"># the cookie needs to be reset.</span></span><br><span class="line">               request.csrf_cookie_needs_reset = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> csrf_token</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后找到路由系统，根据请求的URL,找到对应的视图处理函数，然后再在各个中间件中找寻process_view</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_view</span><span class="params">(self, request, callback, callback_args, callback_kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">if</span> getattr(request, <span class="string">'csrf_processing_done'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">       <span class="keyword">if</span> getattr(callback, <span class="string">'csrf_exempt'</span>, <span class="literal">False</span>):</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">None</span>	</span><br><span class="line">       <span class="keyword">if</span> request.method <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'GET'</span>, <span class="string">'HEAD'</span>, <span class="string">'OPTIONS'</span>, <span class="string">'TRACE'</span>):</span><br><span class="line">           <span class="keyword">if</span> request.is_secure():  <span class="comment"># 如果是　https请求</span></span><br><span class="line">                   referer = force_text(</span><br><span class="line">                   request.META.get(<span class="string">'HTTP_REFERER'</span>),</span><br><span class="line">                   strings_only=<span class="literal">True</span>,</span><br><span class="line">                   errors=<span class="string">'replace'</span></span><br><span class="line">               )</span><br><span class="line">               <span class="keyword">if</span> referer <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_REFERER)</span><br><span class="line">          　　　....</span><br><span class="line">            csrf_token = request.META.get(<span class="string">'CSRF_COOKIE'</span>)</span><br><span class="line">            <span class="keyword">if</span> csrf_token <span class="keyword">is</span> <span class="literal">None</span>: <span class="comment"># 为空，直接拒绝</span></span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_NO_CSRF_COOKIE)</span><br><span class="line">  　　　　　　　　request_csrf_token = <span class="string">""</span></span><br><span class="line">           　<span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">               <span class="keyword">try</span>:</span><br><span class="line">                   request_csrf_token = request.POST.get(<span class="string">'csrfmiddlewaretoken'</span>, <span class="string">''</span>)</span><br><span class="line">               <span class="keyword">except</span> IOError:</span><br><span class="line">                   <span class="keyword">pass</span></span><br><span class="line">             <span class="keyword">if</span> request_csrf_token == <span class="string">""</span>:</span><br><span class="line">                   request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, <span class="string">''</span>)</span><br><span class="line">             request_csrf_token = _sanitize_token(request_csrf_token)</span><br><span class="line">             <span class="comment"># 比较请求头中的csrf_token 与从表单提交数据中获取的 request_csrf_token是否符合规则</span></span><br><span class="line">             <span class="keyword">if</span> <span class="keyword">not</span> _compare_salted_tokens(request_csrf_token, csrf_token):</span><br><span class="line">                   <span class="keyword">return</span> self._reject(request, REASON_BAD_TOKEN)</span><br><span class="line">        </span><br><span class="line">       <span class="comment"># 对于get, head, options, trace请求方法，直接跳过检查</span></span><br><span class="line">  　　　　　<span class="keyword">return</span> self._accept(request)</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行真正的视图处理函数，如果返回的是渲染后的表单，同时表单中有标签  ,那么在渲染这个标签的时候，将调用get_token() 函数，这个函数的作用有两方面</p>
<ul>
<li>为请求头添加<code>CSRF_COOKIE</code> 属性，值为随机生成的64位<code>ascii</code>值</li>
<li>为表单隐藏的字段<code>csrfmiddlewaretoken</code> 赋值</li>
<li>设置请求头<code>CSRF_COOKIE_USED</code> 为True</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"CSRF_COOKIE"</span> <span class="keyword">not</span> <span class="keyword">in</span> request.META:</span><br><span class="line">               csrf_secret = _get_new_csrf_string()</span><br><span class="line">               request.META[<span class="string">"CSRF_COOKIE"</span>] = _salt_cipher_secret(csrf_secret)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               csrf_secret = _unsalt_cipher_token(request.META[<span class="string">"CSRF_COOKIE"</span>])</span><br><span class="line">           request.META[<span class="string">"CSRF_COOKIE_USED"</span>] = <span class="literal">True</span></span><br><span class="line">           <span class="keyword">return</span> _salt_cipher_secret(csrf_secret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后执行<code>process_response</code> 响应，根据上面<code>get_token</code> 被调用，将执行<code>_set_token()</code> 函数，为响应设置<code>cookie</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> getattr(request, <span class="string">'csrf_cookie_needs_reset'</span>, <span class="literal">False</span>):</span><br><span class="line">          <span class="keyword">if</span> getattr(response, <span class="string">'csrf_cookie_set'</span>, <span class="literal">False</span>):</span><br><span class="line">              <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 执行过 get_token后，这个条件不成立</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> request.META.get(<span class="string">"CSRF_COOKIE_USED"</span>, <span class="literal">False</span>): </span><br><span class="line">          <span class="keyword">return</span> response</span><br><span class="line">      ＃　为返回的响应设置cookie</span><br><span class="line">      self._set_token(request, response)</span><br><span class="line">      response.csrf_cookie_set = <span class="literal">True</span></span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_set_token</span><span class="params">(self, request, response)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> settings.CSRF_USE_SESSIONS:</span><br><span class="line">          request.session[CSRF_SESSION_KEY] = request.META[<span class="string">'CSRF_COOKIE'</span>]</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          response.set_cookie(</span><br><span class="line">              settings.CSRF_COOKIE_NAME,　＃　cookie键为　csrftoken</span><br><span class="line">              request.META[<span class="string">'CSRF_COOKIE'</span>], <span class="comment"># 对应的值为　get_token函数生成的值</span></span><br><span class="line">              max_age=settings.CSRF_COOKIE_AGE,</span><br><span class="line">              domain=settings.CSRF_COOKIE_DOMAIN,</span><br><span class="line">              path=settings.CSRF_COOKIE_PATH,</span><br><span class="line">              secure=settings.CSRF_COOKIE_SECURE,</span><br><span class="line">              httponly=settings.CSRF_COOKIE_HTTPONLY,</span><br><span class="line">          )</span><br><span class="line">          <span class="comment"># Set the Vary header since content varies with the CSRF cookie.</span></span><br><span class="line">          patch_vary_headers(response, (<span class="string">'Cookie'</span>,))</span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<ul>
<li><p>对get,head, options, trace这样的方法，不做<code>csrf</code>认证</p>
</li>
<li><p>只有当表单中使用了 这样的标签后，调用<code>get_token</code> 方法，为表单中与<code>csrf</code> 有关的字段赋值，同时这个值会随着每次请求而发生变化；</p>
</li>
<li><p>对于post,put, patch, delete 这样的请求，都会做出验证，如果想要不对这些做出认证，方法可以有</p>
<ul>
<li><p>不使用这个中间件</p>
</li>
<li><p>使用<code>csrf_exempt</code> 这个装饰器</p>
</li>
<li><p>如果是类视图中的函数，可以为类添加<code>@method_decorator(csrf_exempt, name=&#39;dispatch&#39;)</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>study-心理路线</title>
    <url>/2020/01/28/study-%E5%BF%83%E7%90%86%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="自觉持续的勤奋"><a href="#自觉持续的勤奋" class="headerlink" title=" 自觉持续的勤奋"></a><center> 自觉持续的勤奋</center></h2><a id="more"></a>

<p>​    如果身在职场，人微言轻，家境平平，那么持续性的自律和勤奋就是我的出路。我也曾经这样考虑过，我跑步的速度赶不上别人，我唯一能够做的就是持续性的跑步，我的速度不如人家，那就训练坚持跑的意志，这是我觉得是唯一一件主观上要发挥自己能力需要锻炼自己的事情。第一份工作就是自己没有好好考虑好，没有危机感，总感觉自己生活还行，从不知要修炼自己的能力，最近两年都处在恍恍惚惚中，好像又回到了学校里的焦虑时光，好像从来不知道自己到底热爱什么，可是我喜欢这种按键盘的感觉，在昏黄的午后，余晖照在我旁边的茶杯上，我坐在笔记本面前，迅速的在敲代码。</p>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>django template 使用</title>
    <url>/2020/01/27/django-template-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="django-中的template使用"><a href="#django-中的template使用" class="headerlink" title=" django 中的template使用 "></a><center> django 中的template使用 </center></h2><a id="more"></a>

<h3 id="1-可以使用python-manage-py-shell-来快速测试模板语法是否正确"><a href="#1-可以使用python-manage-py-shell-来快速测试模板语法是否正确" class="headerlink" title="1. 可以使用python manage.py shell 来快速测试模板语法是否正确"></a>1. 可以使用<code>python manage.py shell</code> 来快速测试模板语法是否正确</h3><ul>
<li>模板中分变量和标签 </li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量的表示方法 &#123;&#123; var &#125;&#125;</span></span><br><span class="line">   <span class="comment"># 标签的表示方法  &#123;% if　%&#125;&#125; &#123;% else %&#125; &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>测试前的准备工作：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Context, Template</span><br><span class="line">   <span class="comment"># 生成一个模板对象</span></span><br><span class="line">   t = Template(<span class="string">'My name is &#123;&#123; name &#125;&#125;'</span>)</span><br><span class="line">   <span class="comment"># 创建给模板传递数据的对象,使用字典映射变量和他们的值</span></span><br><span class="line">   c = Context(&#123;<span class="string">'name'</span>: <span class="string">'Test'</span>&#125;) <span class="comment"># 给变量name 传递一个字符串 'Test'</span></span><br><span class="line">   <span class="comment"># 使用模板对象的render方法进行填充</span></span><br><span class="line">   t.render(c) <span class="comment"># 输出是一个unicode对象</span></span><br><span class="line">   <span class="comment"># u'My name is Test'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>向模板传递字典，或者类对象，如何访问他们的数据, 都是通过<code>.</code> 进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'Sally'</span>, <span class="string">'age'</span>: <span class="number">32</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old.'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 访问对象的属性</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">d = datetime.now()</span><br><span class="line">t = Template(<span class="string">'The month is &#123;&#123; date.month &#125;&#125; and the year is &#123;&#123; date.year &#125;&#125;'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'date'</span>: d&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"><span class="comment"># 也可以访问对象的方法，但是只能调用不带参数的方法，同时不能带()</span></span><br><span class="line">t = Template(<span class="string">'&#123;&#123; var &#125;&#125;--- &#123;&#123; var.upper &#125;&#125;----&#123;&#123; var.isdigit &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'var'</span>: <span class="string">'hello'</span>&#125;))</span><br><span class="line"><span class="comment"># 也可以通过索引访问列表中的元素，但是不能使用负索引</span></span><br><span class="line">alist = [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">t = Template(<span class="string">'Item 1 is &#123;&#123; items.1 &#125;&#125;'</span>)</span><br><span class="line">t.render(Context(&#123;<span class="string">'items'</span>: alist&#125;))</span><br><span class="line"><span class="comment"># 模板系统遇到点时，会按照一下顺序进行查找：</span></span><br><span class="line"><span class="comment"># 1. 字典类型</span></span><br><span class="line"><span class="comment"># 2. 属性查找</span></span><br><span class="line"><span class="comment"># 3. 方法调用</span></span><br><span class="line"><span class="comment"># 4. 列表类型索引查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 点查找可以多级嵌套使用</span></span><br><span class="line">person = &#123;<span class="string">'name'</span>: <span class="string">'sally'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;</span><br><span class="line">t = Template(<span class="string">'&#123;&#123; person.name.upper &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old'</span>)</span><br><span class="line">c = Context(&#123;<span class="string">'person'</span>: person&#125;)</span><br><span class="line">t.render(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法调用注意点</span></span><br><span class="line"><span class="comment"># 如果方法中有抛出异常，那么在渲染过程中就会传播此异常。为了不传播此异常，只要设置该异常有</span></span><br><span class="line">silent_variable_failure = <span class="literal">True</span> 这个属性就不会传播此异常</span><br><span class="line">t = Template(<span class="string">"My name is &#123;&#123; person.first_name &#125;&#125;"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> SilentAssertionError, <span class="string">"foo"</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SilentAssertionError</span><span class="params">(AssertionError)</span>:</span></span><br><span class="line">    silent_variable_failure = <span class="literal">True</span></span><br><span class="line">t.render(Context(&#123;<span class="string">'person'</span>: Person()&#125;))</span><br><span class="line"><span class="comment"># 默认情况下，变量不存在，模板系统将展示它为空字符串；</span></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 注释语法： </span><br><span class="line"></span><br><span class="line">  - 单行注释 &#96;&#123;#  This is a comment #&#125;&#96;</span><br><span class="line">  - 多行注释 &#96;&#123;% comment %&#125; &#123;% endcomment %&#125;&#96;</span><br><span class="line"></span><br><span class="line">- 过滤器，显示变量内容前修改它的值</span><br><span class="line"></span><br><span class="line">  - &#96;&#123;&#123; name|lower &#125;&#125;&#96; 转变为小写显示</span><br><span class="line">  - &#96;&#123;&#123; my_list|first|upper &#125;&#125;&#96; 列表的第一个元素大写显示</span><br><span class="line">  - 带参数的过滤器，通过冒号之后添加双引号作为参数的值</span><br><span class="line">  - &#96;&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125;&#96; 显示变量的前30个词</span><br><span class="line"></span><br><span class="line">### 2. MVC</span><br><span class="line"></span><br><span class="line">- MVC(Model-View-Controller)，一种软件架构模式，分别是数据存取逻辑，业务逻辑和表现逻辑相互分开并组合在一起。</span><br><span class="line">- M: 数据存取部分， 对应于Django中的models</span><br><span class="line">- V:选择显示哪些数据以及如何显示，由视图和模板处理</span><br><span class="line">- C：根据用户输入委派视图部分，也就是Django中的路由，对给定的URL调用适当的python函数</span><br><span class="line">- 由于C由框架自行处理，Django中更关注的是Model，模板（Template)和视图（Views），所以也被称为MTV框架；</span><br><span class="line">- M（代表模型Model),数据存取层，处理与数据相关的所有事务：如何存取，如何验证有效性，以及数据之间的关系</span><br><span class="line">- T( 代表模板Template),表现层，如何在页面中显示；</span><br><span class="line">- V(View):业务逻辑层，是模型与模板之间的桥梁；</span><br><span class="line"></span><br><span class="line">### 3.模型</span><br><span class="line"></span><br><span class="line">- 通过&#96;python manage.py shell&#96; 研究 存取数据的一些知识</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  	from App.models import Animal</span><br><span class="line">  	# 查找所有对象</span><br><span class="line">  	animal_list &#x3D; Animal.objects.all() #返回一个QuerySet </span><br><span class="line">  	animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;) # 返回单个对象 </span><br><span class="line">  	# 只能用于返回单个对象，当返回值多于一个或者没有找到时会报错</span><br><span class="line">  	try:</span><br><span class="line">  		animal &#x3D; Animal.objects.get(name&#x3D;&#39;dog&#39;)</span><br><span class="line">  	except Animal.DoesNotExist:  #DoesNotExist是类的属性，可以捕获并处理</span><br><span class="line">  		print(&#39;Animal does not name is dog&#39;)</span><br><span class="line">  	# 排序,按照某个字段进行排序</span><br><span class="line">  	animal &#x3D; Animal.objects.order_by(&#39;name&#39;)</span><br><span class="line">  	# 倒序排列通过</span><br><span class="line">  	aniaml &#x3D; Animal.objects.order_by(&#39;-name&#39;)</span><br><span class="line">  	# 对应的sql语句就是</span><br><span class="line">  	# select id, name from Animal order by name DESC;</span><br><span class="line">  	# order_by(arg1, arg2) 多个字段表示arg1相同的情况下，按照arg2进行排序</span><br><span class="line">  	# 如果向对所有的查询都执行排序，就配置类属性,那么默认情况下都会执行排序</span><br><span class="line">  	class Meta:</span><br><span class="line">  		ordering &#x3D; [&#39;name&#39;]</span><br><span class="line">  		</span><br><span class="line">  	# 过滤和排序可以同时使用</span><br><span class="line">  	animal &#x3D; Animal.objects.filter(name&#x3D;&#39;dog&#39;).order_by(&#39;name&#39;)</span><br><span class="line">  	#对应的sql</span><br><span class="line">  	# select id, name from Animal where name&#x3D;&#39;dog&#39; order by name;</span><br><span class="line">  	# 返回前两条记录</span><br><span class="line">  	# animal &#x3D; Animal.objects.order_by(&#39;name&#39;)[0:2]</span><br><span class="line">  	# 对应的sql</span><br><span class="line">  	# select id, name from Animal order by name offset 0 limit 2;</span><br><span class="line">  	# 不支持负索引</span><br><span class="line">  	</span><br><span class="line">  	# save 方法将一条记录的所有数据提交到数据库</span><br><span class="line">  	# update 方法只将更新的数据提交到数据库，可以避免其他列可能被其他进程改动，引起竞态；</span><br><span class="line">  	Animal.objects.order_by(id&#x3D;1).update(name&#x3D;&#39;Dog&#39;) # 返回受影响的记录条数</span><br><span class="line">  	#对应的sql语句</span><br><span class="line">  	# select id, name from Animal set name&#x3D;&#39;Dog&#39; where id&#x3D;1;</span><br><span class="line">  	</span><br><span class="line">  	# 删除操作,删除指定的一条记录</span><br><span class="line">  	Animal.objects.filter(id&#x3D;1).delete()</span><br><span class="line">  	# 删除所有记录</span><br><span class="line">  	Animal.objects.all().delete()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3>]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>djangorestframework 组件使用</title>
    <url>/2020/01/20/djangorestframework-%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="djangorestframework组件使用"><a href="#djangorestframework组件使用" class="headerlink" title=" djangorestframework组件使用"></a><center> djangorestframework组件使用</center></h2><a id="more"></a>

<p>1.根据token值进行认证</p>
<p>自定义认证器 <code>authenticators</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication</span><br><span class="line">   <span class="keyword">from</span> rest_framework <span class="keyword">import</span> exceptions</span><br><span class="line">   <span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(BaseAuthentication)</span>:</span></span><br><span class="line">       <span class="comment"># 自己实现认证过程</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span><span class="params">(self, request)</span>:</span></span><br><span class="line">           token = request.query_parames.get(<span class="string">'token'</span>)</span><br><span class="line">           token_obj = UserToken.objects.filter(u_token=token).first()</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> token_obj:</span><br><span class="line">               <span class="keyword">raise</span> exceptions.AuthenticationFailed(<span class="string">'用户认证失败'</span>) <span class="comment">#必须抛出一个异常</span></span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> (token_obj.user, token_obj)  <span class="comment">#必须返回一个元祖赋值给request.user, request.auth</span></span><br><span class="line">           </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAuth</span><span class="params">(APIView)</span>:</span></span><br><span class="line">       <span class="comment">#定义该类的认证，通过认证后才能访问这个类的视图函数</span></span><br><span class="line">	authentication_classes = [MyAuth,]</span><br><span class="line">       </span><br><span class="line">    <span class="comment"># 也可以定义所有视图类的认证器</span></span><br></pre></td></tr></table></figure>

<p>认证流程及返回值：</p>
<p>通过调用APIView中的dispatch方法，将原生的request对象就行包装，添加了认证类的对象属性，</p>
<p>然后执行intial方法，调用里面的perform_authentication方法，这个方法将使用request.user来执行认证的具体实现，遍历所有的认证类，然后执行认证。</p>
<p>自定义类需要实现的方法：</p>
<ul>
<li>authenticate</li>
<li>authenticate_header</li>
</ul>
<p>返回值有三种：</p>
<ul>
<li>None</li>
<li>元祖</li>
<li>raise APIException子类的异常</li>
</ul>
<p>​    2.为了给不同的视图类都实现权限的功能，实现自定义的权限，区分局部使用和全局使用的配置</p>
<p>基于用户角色的权限控制</p>
<p>实现自定义权限类的方式：</p>
<p>继承自BasePermission</p>
<ul>
<li>实现 has_permission方法</li>
</ul>
<p>返回值两种：</p>
<ul>
<li>True</li>
<li>False</li>
</ul>
<p>​    3.实现频率组件（根据用户是否认证，设置不同的键，进行频率控制）</p>
<p>​        -  匿名用户  (ip或者代理ip)</p>
<p>​        - 验证过的用户（用户名) </p>
<ol start="4">
<li><p>版本控制（BasicVersioning)  可以局部配置或者全局配置</p>
<ul>
<li><p>通过查询参数自定义版本</p>
<ul>
<li><p><a href="http://localhost:8000/api/user/?version=v1" target="_blank" rel="noopener">http://localhost:8000/api/user/?version=v1</a></p>
</li>
<li><p>可以通过在get请求中添加版本参数来获取版本</p>
</li>
<li><p>继承QueryParameterVersioning</p>
</li>
</ul>
</li>
<li><p>在url中设置版本</p>
<ul>
<li><a href="http://localhost:8000/api/v1/user/" target="_blank" rel="noopener">http://localhost:8000/api/v1/user/</a></li>
<li>使用内置的URLPathVersioning</li>
<li>通过request.version 获取url中的version</li>
<li>通过request.versioning_scheme获取版本类的对象</li>
</ul>
</li>
<li><p>可以反向生成包含版本的url</p>
<ul>
<li>通过reqeust.versioning_scheme.reverse(viewname=’user’, request=request)来得到url</li>
</ul>
</li>
</ul>
</li>
<li><p>解析器(</p>
<p>​    用来做什么？</p>
<ul>
<li><p>对请求过来的数据根据content-type选择合适的解析器解析到request.data)</p>
</li>
<li><p>入口在调用 request.data时，根据content-type选择对应的解析器</p>
</li>
<li></li>
<li><p>当请求体有数据，而请求POST没数据时，发生了什么？</p>
</li>
<li><p>指定解析器（根据不同请求头中的数据进行解析）</p>
</li>
<li><p>content-type: application/json  或者 x-www-form-urlencoded 或者form-data </p>
</li>
<li><p>可以为全局视图配置解析器，或者为单个视图配置解析器</p>
</li>
<li><p>默认支持application/json, x-www-form-urlencoded, form-data</p>
</li>
</ul>
</li>
<li><p>序列化</p>
<ul>
<li><p>请求数据进行验证</p>
<ul>
<li>可以自定义验证出错信息error_messages={‘required’: ‘字段缺失’， ‘blank’: ‘字段不能为空字符串‘}</li>
<li>可以自定义验证字段方法<ul>
<li>def validate_field_name(self, value)</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Queryset</code> 进行序列化</p>
<p>基于数据库模型类定义序列化类，继承Serializer 或者ModelSerializer</p>
<ul>
<li><p>自定义显示字段名字通过  source</p>
<ul>
<li>role = serializers.CharField(source=’u_role’)</li>
</ul>
</li>
<li><p>自定义显示字段的方式</p>
<ul>
<li>roles = serializers.SerializerMethodField()</li>
<li>def get_role(self, row):</li>
</ul>
</li>
<li><p>自定序列化连表操作 depth=1  #官方建议 1-10</p>
</li>
<li><p>为某个字段反向生成url</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>​    7.分页</p>
<ul>
<li><p>如果数据库有一千万条数据时，后面的分页数据响应越来越慢，如何解决这个问题？</p>
</li>
<li><p>设置每页显示多少条，显示结果</p>
</li>
<li><p>也可以设置基于索引位置，显示多少条  LimitOffPagination</p>
</li>
<li><p>将查询的页码显示为随机数，为了防止查询太对的页数</p>
</li>
</ul>
<p>​    8.路由</p>
<p>​    9.渲染器</p>
<p>​    10. 扩展APIView视图</p>
]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>面试题</title>
    <url>/2020/01/20/interview/</url>
    <content><![CDATA[<h2 id="web开发面试题"><a href="#web开发面试题" class="headerlink" title=" web开发面试题 "></a><center> web开发面试题 </center></h2><ol>
<li><p>中间件有几种方法？</p>
<ul>
<li><p>process_request(self, request)</p>
<ul>
<li>django接收到request之后，在未解析url确定运行的view之前</li>
<li>返回值有None, HttpResponse对象</li>
<li>如果返回None,Django继续处理这个request,执行后续的中间件；</li>
<li>如果返回ＨttpResponse,Django不再执行其他的中间件以及视图，立即返回；</li>
</ul>
</li>
<li><p>process_view(self, request, view, <em>args, *</em>kwargs)</p>
<ul>
<li>调用时机是在：django执行完request预处理函数并确定待执行的view之后，但是在view函数实际执行之前</li>
<li>request,是HttpResponse对象，view是要调用的视图函数对象</li>
<li><em>args, *</em>kwargs:传入view的位置参数和关键字参数；</li>
<li>返回None 或者HttpResponse对象</li>
<li>返回None,Ｄjango继续处理这个request,执行后续的中间件，然后调用相应的ｖｉｅｗ;</li>
<li>返回HttpResponse对象，django不再执行任何其他的中间件以及对应的view, 立即返回ＨttpResponse;</li>
</ul>
</li>
<li><p>process_response(self, request, response)</p>
<ul>
<li>调用时机是在django执行ｖｉｅｗ函数并生成response 之后</li>
<li>参数：request是request对象，response是从view中返回的response对象</li>
<li>必须返回　ＨttpResponse对象；</li>
</ul>
</li>
<li><p>process_exception(self, request, exception)</p>
<ul>
<li>调用时机：view函数抛出了一个未捕获的异常调用</li>
<li>参数：exception是view函数抛出的实际的异常对象exception</li>
<li>返回值：None, django使用框架内置的异常处理机制</li>
<li>返回　HttpResponse对象，</li>
</ul>
</li>
<li><p>适用于所有请求批量操作</p>
</li>
</ul>
<p>场景:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 基于角色的权限控制</span><br><span class="line">- 用户认证</span><br><span class="line">- csrf </span><br><span class="line">- session</span><br><span class="line">- 日志记录</span><br><span class="line">- 黑名单</span><br></pre></td></tr></table></figure>
</li>
<li><p>csrf_token 如何实现的？如何避免csrf验证？</p>
</li>
<li><p>谈谈对restful 的理解？</p>
</li>
<li><p>面向对象的理解？</p>
<p>封装 ，继承，多态</p>
<p>封装: 类的封装，实例的封装</p>
<p>继承: 为什么要继承？深度优先（经典类）广度优先（新式类）</p>
</li>
<li><p>django请求的声明周期?</p>
<p>WSGI —&gt;中间件–&gt;路由匹配 —&gt;视图（FBV/CBV)—&gt;响应</p>
</li>
<li><p>常见的请求头，状态码，请求方法</p>
</li>
<li><p>源码流程</p>
</li>
<li><p>mysql 联表查询语句？ 数据量很大的时候，分页如何做？</p>
</li>
<li><p>如何实现跨域？</p>
<ul>
<li>CORS</li>
<li>jsonp</li>
<li>nginx 反向代理</li>
</ul>
</li>
<li><p>djangorestframework提供的功能或者入口在哪里？</p>
<ul>
<li>首先我们自己定义的类视图要继承APIView或者它的子类</li>
<li>APIView 重新实现了dispatch方法</li>
<li>dispatch方法中两个重要的方法：initialize_request 和initial方法</li>
<li>initialize_request()对原始的request进行封装，同时添加了解析器和认证器；</li>
<li>initial方法中实现了版本，执行认证，检查权限和频率访问；</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>restful风格规范</title>
    <url>/2020/01/20/restful%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="restful风格规范"><a href="#restful风格规范" class="headerlink" title=" restful风格规范 "></a><center> restful风格规范 </center></h2><a id="more"></a>

<ol>
<li>协议</li>
<li>域名（url中应该体现api接口)<ul>
<li>放在主域名<a href="https://example.com/api" target="_blank" rel="noopener">https://example.com/api</a></li>
<li>或者使用专有域名<a href="https://api.example.com" target="_blank" rel="noopener">https://api.example.com</a>  存在跨域问题</li>
</ul>
</li>
<li>版本   (url中体现版本)</li>
<li>能够提供查询参数接口，过滤返回结果</li>
<li>定义资源的方式尽量使用名词()</li>
<li>响应参数使用json格式</li>
<li>状态码与code结合</li>
<li>错误信息</li>
<li>返回结果，不同的请求，返回不同的结果。</li>
<li>返回结果中最好加上一个超链接</li>
</ol>
<p>、</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>restful</tag>
      </tags>
  </entry>
  <entry>
    <title>python2.x中json的操作</title>
    <url>/2020/01/20/python2-x%E4%B8%ADjson%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="python2-x中json的操作"><a href="#python2-x中json的操作" class="headerlink" title=" python2.x中json的操作 "></a><center> python2.x中json的操作 </center></h2><a id="more"></a>

<p>json的操作就是将字典转换为json格式的字符串(dump/dumps),也可以将json格式的字符串转换成字典(load/loads).</p>
<ol>
<li>dumps方法(字典转换成json格式的字符串）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   astr = json.dumps(adict)</span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment"># &#123;"a": "123", "c": "json", "b": "\u6d4b\u8bd5"&#125;</span></span><br><span class="line">   astr = json.dumps(adict, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>) <span class="comment">#indent确定缩进，ensure_ascii=False显示中文</span></span><br><span class="line">   print(astr)</span><br><span class="line">   <span class="comment">#&#123;</span></span><br><span class="line">   	<span class="string">"a"</span>: <span class="string">"123"</span>, </span><br><span class="line">   	<span class="string">"c"</span>: <span class="string">"json"</span>, </span><br><span class="line">   	<span class="string">"b"</span>: <span class="string">"测试"</span></span><br><span class="line"> &#125;</span><br><span class="line">   <span class="keyword">with</span> open(<span class="string">'str.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">       f.write(astr.decode(<span class="string">'utf-8'</span>).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">   <span class="comment"># 可以通过 sudo apt install jq 工具来查看json文件</span></span><br><span class="line">   <span class="comment"># cat str.json|jq</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>dump方法作用和上面一样</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adict = &#123;<span class="string">'a'</span>: <span class="string">'123'</span>, <span class="string">'b'</span>: <span class="string">'测试'</span>, <span class="string">'c'</span>: <span class="string">'json'</span>&#125;</span><br><span class="line">   f = open(<span class="string">'str.json'</span>, <span class="string">'w'</span>)</span><br><span class="line">   json.dump(adict, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">   <span class="comment">#不需要write方法就可以写入文件</span></span><br></pre></td></tr></table></figure>

<p>因此，操作文件的时候，使用dump,不需要操作文件的时候，使用dumps.</p>
<ol start="3">
<li>loads方法,将json字符串转换成字典</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   content = f.read()</span><br><span class="line">   data = json.loads(content)</span><br><span class="line">   <span class="comment">###############</span></span><br><span class="line">   f = open(<span class="string">'str.json'</span>)</span><br><span class="line">   data = json.load(f)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>可以通过codecs模块中的open方法指定编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = codecs.open(<span class="string">'str.json'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># python3 中的open方法可以使用encoding参数</span></span><br></pre></td></tr></table></figure>

<p>应用中遇到的问题: 使用Django，通过<code>session.set_expiry(timedelta(days=3))</code> 为<code>session</code> 设置过期时间时，遇到了<code>TypeError: datetime.datetime(2020, 1, 23, 11, 1, 58, 993654) is not JSON serializable</code> 这样的错误，就是因为json默认不支持对<code>datetime</code> 对象的序列化。</p>
<p>首先解决方法:在工程的配置文件 <code>settings</code> 中设置一个属性</p>
<p>`SESSION_SERIALIZER=’django.contrib.sessions.serializers.PickleSerializer’ </p>
<p>如果自定义支持对<code>datetime</code> 的序列化，可以通过下面的方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">   adict = &#123;<span class="string">'name'</span>: <span class="string">'test'</span>, <span class="string">'create_time'</span>: datetime.now()&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">DateEncoder</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">           <span class="keyword">if</span> isinstance(obj, datetime):</span><br><span class="line">               <span class="keyword">return</span> obj.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> super(DateEncoder, self).default(obj)</span><br><span class="line">    </span><br><span class="line">   print(json.dumps(adict, cls=DateEncoder))</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的魔术方法使用</title>
    <url>/2020/01/18/python%E4%B8%AD%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Python中的魔术方法使用"><a href="#Python中的魔术方法使用" class="headerlink" title="Python中的魔术方法使用"></a><center>Python中的魔术方法使用</center></h2><a id="more"></a>
<h3 id="1-getattribute-使用"><a href="#1-getattribute-使用" class="headerlink" title="1. __getattribute__ 使用"></a>1. <code>__getattribute__</code> 使用</h3><p>1.1 新式类使用<code>__getattribute__</code> 这个方法后，无论实例访问类属性，实例属性，方法，还是访问不存在的属性时，都会调用这个方法，而通过类访问属性，方法时，不会调用这个方法</p>
<p>常用于：实现访问属性时执行一段代码的特性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">   ...:     gender = <span class="string">"男"</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">   ...:         self.name = name</span><br><span class="line">   ...:         self.age = age</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"拦截"</span>)</span><br><span class="line">   ...:         <span class="keyword">try</span>:</span><br><span class="line">   ...:             super(Man, self).__getattribute__(attr)</span><br><span class="line">   ...:         <span class="keyword">except</span> AttributeError:</span><br><span class="line">   ...:             print(<span class="string">"have not attribute of %s"</span> % attr)</span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(self)</span>:</span></span><br><span class="line">   ...:         print(<span class="string">"hello world"</span>)</span><br><span class="line">   ...:         </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: ins = Man(<span class="string">'test'</span>, <span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: print(Man.gender)</span><br><span class="line">男</span><br><span class="line">＃　类访问不存在的属性不会调用</span><br><span class="line">In [<span class="number">5</span>]: print(Man.name)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-5</span><span class="number">-011</span>ae3c55855&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 print(Man.name)</span><br><span class="line"></span><br><span class="line">AttributeError: type object <span class="string">'Man'</span> has no attribute <span class="string">'name'</span></span><br><span class="line">In [<span class="number">6</span>]: print(ins.name)</span><br><span class="line">拦截</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: ins.age</span><br><span class="line">拦截</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: ins.xxx</span><br><span class="line">拦截</span><br><span class="line">have <span class="keyword">not</span> attribute of xxx</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: ins.hello()</span><br><span class="line">拦截</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-9</span><span class="number">-6</span>af60b825039&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 ins.hello()</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'NoneType'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure>

<p>总之，通过实例访问的属性，方法都会被拦截，包括<code>self.__dict__</code> ,使用这个方法的唯一安全方式就是覆盖父类的方法。</p>
<p>1.2 如果使用了<code>__getattr__</code> 这个方法，它的执行条件是 <code>__getattribute__</code> 触发了<code>AttributeError</code> 异常后，才会调用这个方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name</span><br><span class="line">           self.age = age</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">           <span class="keyword">print</span> <span class="string">'执行__getattr__'</span></span><br><span class="line">       	</span><br><span class="line">    ins = Man(<span class="string">'hello'</span>, <span class="number">20</span>)</span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#执行__getattr__  (父类的__getattribute__触发了AttributeError异常)</span></span><br><span class="line">    当添加了下面的方法后</span><br><span class="line">    	<span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, attr)</span>:</span></span><br><span class="line">    		<span class="keyword">print</span> <span class="string">'拦截'</span></span><br><span class="line">    ins.job</span><br><span class="line">    <span class="comment">#拦截  (将不会执行__getattr__这个方法，因为__getattribute__覆盖了父类的方法，没有触发异常)</span></span><br></pre></td></tr></table></figure>

<p>1.3 使用<code>__setattr__</code> :任何对实例属性赋值的操作都将调用这个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">       gender = <span class="string">'男'</span></span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">           self.name = name <span class="comment">#执行 __setattr__</span></span><br><span class="line">           self.age = age <span class="comment">#执行__setattr__</span></span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">       	<span class="keyword">print</span> <span class="string">'执行__setattr__'</span></span><br><span class="line">       	self.__dict__[key] = val <span class="comment">#这里不能通过self.key = val这种方式进行赋值，否则会进入无限循环</span></span><br><span class="line">       	</span><br><span class="line">   ins = Man(<span class="string">'hello'</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   <span class="comment">#执行__setattr__</span></span><br><span class="line">   Man.gender = <span class="string">'女'</span>  <span class="comment">#不会执行__setattr__</span></span><br></pre></td></tr></table></figure>

<h3 id="2-get-与-set"><a href="#2-get-与-set" class="headerlink" title="2. __get__ 与__set__"></a>2. <code>__get__</code> 与<code>__set__</code></h3><p>2.1 <code>__get__</code> 使用:拥有这个方法的类，产生一个实例，同时这个实例是另一个类的类属性，实例属性与这个方法就没有关系了；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBase</span><span class="params">(object)</span>:</span> <span class="comment">#这个类可以称为non-data descriptor</span></span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>)</span><br><span class="line">           print(instance, owner)</span><br><span class="line">     </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestBase()</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (&lt;__main__.TestMain instance at 0x7fd46ba0a200&gt;, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># enter __get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7fd46b9e9668&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span>  <span class="comment">#通过实例进行赋值</span></span><br><span class="line">       print(t.tes) <span class="comment"># 获得这个值</span></span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes <span class="comment">#访问这个值，将调用__get__</span></span><br><span class="line">       <span class="comment"># (None, &lt;class __main__.TestMain at 0x7f7ead5e1668&gt;)</span></span><br><span class="line">       <span class="comment"># 通过TestMain赋值</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#通过这种方式赋值，不会调用__get__</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值后，类再访问这个属性，不能获取这个值，调用了<code>__get__</code> </p>
<p>2.2 <code>__get__</code> 和<code>__set__</code> 同时存在的情况下，如何呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSet</span><span class="params">(object)</span>:</span>  <span class="comment">#这个类称为 data descriptor</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __get__'</span>, instance, owner)</span><br><span class="line">           </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, val)</span>:</span></span><br><span class="line">           print(<span class="string">'enter __set__'</span>, instance, val)</span><br><span class="line">           </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span><span class="params">(object)</span>:</span></span><br><span class="line">       tes = TestSet()</span><br><span class="line">	</span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       t = TestMain()</span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff1acb00f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       t.tes = <span class="number">1</span> <span class="comment"># 调用__set__方法</span></span><br><span class="line">       <span class="comment"># ('enter __set__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, 1)</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', &lt;__main__.TestMain object at 0x7ff8c5c56f10&gt;, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># ('enter __get__', None, &lt;class '__main__.TestMain'&gt;)</span></span><br><span class="line">       TestMain.tes = <span class="number">1</span> <span class="comment">#与__get__, __set__无关</span></span><br><span class="line">       t.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br><span class="line">       TestMain.tes</span><br><span class="line">       <span class="comment"># 1</span></span><br></pre></td></tr></table></figure>

<p>总结: 通过实例对属性赋值时，调用<code>__set__</code> ,然后无论通过类还是实例再次获取这个属性时，都将调用<code>__get__</code> </p>
<p><code>__get__</code> 的应用在<code>Django</code> 中的体现是，可以重写<code>@classmethod</code> 实现只能通过类进行访问类方法，而不能通过实例访问类方法：（<code>from django.utils.decorators import classonlymethod</code> )</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>新式类</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装最新版的nodejs</title>
    <url>/2020/01/17/ubuntu16-04%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84nodejs/</url>
    <content><![CDATA[<h2 id="ubuntu16-04安装最新版的nodejs"><a href="#ubuntu16-04安装最新版的nodejs" class="headerlink" title="ubuntu16.04安装最新版的nodejs"></a><center>ubuntu16.04安装最新版的nodejs</center></h2><a id="more"></a>
<p>ubuntu16.04 默认安装了v4.2.6版本的nodejs，为了使用最新版的nodejs，使用一下方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>sudo apt update -y</span><br><span class="line"><span class="number">2.</span>sudo apt install nodejs nodejs-legacy npm -y</span><br><span class="line"><span class="number">3.</span>sudo npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="number">4.</span>sudo npm install n -g</span><br><span class="line"><span class="number">5.</span>sudo n stable</span><br></pre></td></tr></table></figure>

<p>遇到的问题：</p>
<p>使用命令<code>n</code> 安装过程非常缓慢，需要修改<code>n</code> 中的 <code>N_NODE_MIRROR</code> ，更改为国内的镜像源</p>
<p><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a> </p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
